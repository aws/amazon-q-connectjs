(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["QConnectJS"] = factory();
	else
		root["QConnectJS"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7272:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  I: () => (/* reexport */ Sha256)
});

// UNUSED EXPORTS: WebCryptoSha256

;// ./node_modules/@aws-crypto/util/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
const fromUtf8 = (input) => new TextEncoder().encode(input);

;// ./node_modules/@aws-crypto/util/build/module/convertToBuffer.js
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Quick polyfill
var convertToBuffer_fromUtf8 = typeof Buffer !== "undefined" && Buffer.from
    ? function (input) { return Buffer.from(input, "utf8"); }
    : fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array)
        return data;
    if (typeof data === "string") {
        return convertToBuffer_fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
}
//# sourceMappingURL=convertToBuffer.js.map
;// ./node_modules/@aws-crypto/util/build/module/isEmptyData.js
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function isEmptyData(data) {
    if (typeof data === "string") {
        return data.length === 0;
    }
    return data.byteLength === 0;
}
//# sourceMappingURL=isEmptyData.js.map
;// ./node_modules/@aws-crypto/util/build/module/index.js
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0




//# sourceMappingURL=index.js.map
;// ./node_modules/@aws-crypto/sha256-browser/build/module/constants.js
var SHA_256_HASH = { name: "SHA-256" };
var SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: SHA_256_HASH
};
var EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);
//# sourceMappingURL=constants.js.map
;// ./node_modules/@aws-sdk/util-locate-window/dist-es/index.js
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") {
        return window;
    }
    else if (typeof self !== "undefined") {
        return self;
    }
    return fallbackWindow;
}

;// ./node_modules/@aws-crypto/sha256-browser/build/module/webCryptoSha256.js



var webCryptoSha256_Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
    }
    Sha256.prototype.update = function (data) {
        if (isEmptyData(data)) {
            return;
        }
        var update = convertToBuffer(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function () {
        var _this = this;
        if (this.key) {
            return this.key.then(function (key) {
                return locateWindow()
                    .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, _this.toHash)
                    .then(function (data) { return new Uint8Array(data); });
            });
        }
        if (isEmptyData(this.toHash)) {
            return Promise.resolve(EMPTY_DATA_SHA_256);
        }
        return Promise.resolve()
            .then(function () {
            return locateWindow().crypto.subtle.digest(SHA_256_HASH, _this.toHash);
        })
            .then(function (data) { return Promise.resolve(new Uint8Array(data)); });
    };
    Sha256.prototype.reset = function () {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
            this.key = new Promise(function (resolve, reject) {
                locateWindow()
                    .crypto.subtle.importKey("raw", convertToBuffer(_this.secret), SHA_256_HMAC_ALGO, false, ["sign"])
                    .then(resolve, reject);
            });
            this.key.catch(function () { });
        }
    };
    return Sha256;
}());

//# sourceMappingURL=webCryptoSha256.js.map
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs
var tslib_es6 = __webpack_require__(1635);
;// ./node_modules/@aws-crypto/sha256-js/build/module/constants.js
/**
 * @internal
 */
var BLOCK_SIZE = 64;
/**
 * @internal
 */
var DIGEST_LENGTH = 32;
/**
 * @internal
 */
var KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */
var INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */
var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
//# sourceMappingURL=constants.js.map
;// ./node_modules/@aws-crypto/sha256-js/build/module/RawSha256.js

/**
 * @internal
 */
var RawSha256 = /** @class */ (function () {
    function RawSha256() {
        this.state = Int32Array.from(INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */
        this.finished = false;
    }
    RawSha256.prototype.update = function (data) {
        if (this.finished) {
            throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
            throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function () {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
                for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
                    bufferView.setUint8(i, 0);
                }
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
                bufferView.setUint8(i, 0);
            }
            bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
            out[i * 4] = (this.state[i] >>> 24) & 0xff;
            out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;
            out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;
            out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function () {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for (var i = 0; i < BLOCK_SIZE; i++) {
            if (i < 16) {
                this.temp[i] =
                    ((buffer[i * 4] & 0xff) << 24) |
                        ((buffer[i * 4 + 1] & 0xff) << 16) |
                        ((buffer[i * 4 + 2] & 0xff) << 8) |
                        (buffer[i * 4 + 3] & 0xff);
            }
            else {
                var u = this.temp[i - 2];
                var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
                u = this.temp[i - 15];
                var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
                this.temp[i] =
                    ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
            }
            var t1 = ((((((state4 >>> 6) | (state4 << 26)) ^
                ((state4 >>> 11) | (state4 << 21)) ^
                ((state4 >>> 25) | (state4 << 7))) +
                ((state4 & state5) ^ (~state4 & state6))) |
                0) +
                ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) |
                0;
            var t2 = ((((state0 >>> 2) | (state0 << 30)) ^
                ((state0 >>> 13) | (state0 << 19)) ^
                ((state0 >>> 22) | (state0 << 10))) +
                ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
                0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = (state3 + t1) | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = (t1 + t2) | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}());

//# sourceMappingURL=RawSha256.js.map
;// ./node_modules/@aws-crypto/sha256-js/build/module/jsSha256.js




var jsSha256_Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        this.secret = secret;
        this.hash = new RawSha256();
        this.reset();
    }
    Sha256.prototype.update = function (toHash) {
        if (isEmptyData(toHash) || this.error) {
            return;
        }
        try {
            this.hash.update(convertToBuffer(toHash));
        }
        catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */
    Sha256.prototype.digestSync = function () {
        if (this.error) {
            throw this.error;
        }
        if (this.outer) {
            if (!this.outer.finished) {
                this.outer.update(this.hash.digest());
            }
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */
    Sha256.prototype.digest = function () {
        return (0,tslib_es6.__awaiter)(this, void 0, void 0, function () {
            return (0,tslib_es6.__generator)(this, function (_a) {
                return [2 /*return*/, this.digestSync()];
            });
        });
    };
    Sha256.prototype.reset = function () {
        this.hash = new RawSha256();
        if (this.secret) {
            this.outer = new RawSha256();
            var inner = bufferFromSecret(this.secret);
            var outer = new Uint8Array(BLOCK_SIZE);
            outer.set(inner);
            for (var i = 0; i < BLOCK_SIZE; i++) {
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for (var i = 0; i < inner.byteLength; i++) {
                inner[i] = 0;
            }
        }
    };
    return Sha256;
}());

function bufferFromSecret(secret) {
    var input = convertToBuffer(secret);
    if (input.byteLength > BLOCK_SIZE) {
        var bufferHash = new RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}
//# sourceMappingURL=jsSha256.js.map
;// ./node_modules/@aws-crypto/sha256-js/build/module/index.js

//# sourceMappingURL=index.js.map
;// ./node_modules/@aws-crypto/supports-web-crypto/build/module/supportsWebCrypto.js

var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) &&
        typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
function supportsSubtleCrypto(subtle) {
    return (subtle &&
        subtleCryptoMethods.every(function (methodName) { return typeof subtle[methodName] === "function"; }));
}
function supportsZeroByteGCM(subtle) {
    return __awaiter(this, void 0, void 0, function () {
        var key, zeroByteAuthTag, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!supportsSubtleCrypto(subtle))
                        return [2 /*return*/, false];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"])];
                case 2:
                    key = _b.sent();
                    return [4 /*yield*/, subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
                case 4:
                    _a = _b.sent();
                    return [2 /*return*/, false];
                case 5: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=supportsWebCrypto.js.map
;// ./node_modules/@aws-crypto/sha256-browser/build/module/crossPlatformSha256.js





var Sha256 = /** @class */ (function () {
    function Sha256(secret) {
        if (supportsWebCrypto(locateWindow())) {
            this.hash = new webCryptoSha256_Sha256(secret);
        }
        else {
            this.hash = new jsSha256_Sha256(secret);
        }
    }
    Sha256.prototype.update = function (data, encoding) {
        this.hash.update(convertToBuffer(data));
    };
    Sha256.prototype.digest = function () {
        return this.hash.digest();
    };
    Sha256.prototype.reset = function () {
        this.hash.reset();
    };
    return Sha256;
}());

//# sourceMappingURL=crossPlatformSha256.js.map
;// ./node_modules/@aws-crypto/sha256-browser/build/module/index.js


//# sourceMappingURL=index.js.map

/***/ }),

/***/ 6924:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $Command: () => (/* reexport */ smithy_client_dist_es/* Command */.uB),
  AccessDeniedException: () => (/* reexport */ AccessDeniedException),
  ActionType: () => (/* reexport */ ActionType),
  ActivateEvaluationFormCommand: () => (/* reexport */ ActivateEvaluationFormCommand),
  AgentAvailabilityTimer: () => (/* reexport */ AgentAvailabilityTimer),
  AgentStatusState: () => (/* reexport */ AgentStatusState),
  AgentStatusType: () => (/* reexport */ AgentStatusType),
  AnsweringMachineDetectionStatus: () => (/* reexport */ AnsweringMachineDetectionStatus),
  ArtifactStatus: () => (/* reexport */ ArtifactStatus),
  AssociateAnalyticsDataSetCommand: () => (/* reexport */ AssociateAnalyticsDataSetCommand),
  AssociateApprovedOriginCommand: () => (/* reexport */ AssociateApprovedOriginCommand),
  AssociateBotCommand: () => (/* reexport */ AssociateBotCommand),
  AssociateDefaultVocabularyCommand: () => (/* reexport */ AssociateDefaultVocabularyCommand),
  AssociateFlowCommand: () => (/* reexport */ AssociateFlowCommand),
  AssociateInstanceStorageConfigCommand: () => (/* reexport */ AssociateInstanceStorageConfigCommand),
  AssociateLambdaFunctionCommand: () => (/* reexport */ AssociateLambdaFunctionCommand),
  AssociateLexBotCommand: () => (/* reexport */ AssociateLexBotCommand),
  AssociatePhoneNumberContactFlowCommand: () => (/* reexport */ AssociatePhoneNumberContactFlowCommand),
  AssociateQueueQuickConnectsCommand: () => (/* reexport */ AssociateQueueQuickConnectsCommand),
  AssociateRoutingProfileQueuesCommand: () => (/* reexport */ AssociateRoutingProfileQueuesCommand),
  AssociateSecurityKeyCommand: () => (/* reexport */ AssociateSecurityKeyCommand),
  AssociateTrafficDistributionGroupUserCommand: () => (/* reexport */ AssociateTrafficDistributionGroupUserCommand),
  AssociateUserProficienciesCommand: () => (/* reexport */ AssociateUserProficienciesCommand),
  AttachedFileInvalidRequestExceptionReason: () => (/* reexport */ AttachedFileInvalidRequestExceptionReason),
  AttendeeFilterSensitiveLog: () => (/* reexport */ AttendeeFilterSensitiveLog),
  BatchAssociateAnalyticsDataSetCommand: () => (/* reexport */ BatchAssociateAnalyticsDataSetCommand),
  BatchDisassociateAnalyticsDataSetCommand: () => (/* reexport */ BatchDisassociateAnalyticsDataSetCommand),
  BatchGetAttachedFileMetadataCommand: () => (/* reexport */ BatchGetAttachedFileMetadataCommand),
  BatchGetFlowAssociationCommand: () => (/* reexport */ BatchGetFlowAssociationCommand),
  BatchPutContactCommand: () => (/* reexport */ BatchPutContactCommand),
  BehaviorType: () => (/* reexport */ BehaviorType),
  Channel: () => (/* reexport */ Channel),
  ChatEventType: () => (/* reexport */ ChatEventType),
  ClaimPhoneNumberCommand: () => (/* reexport */ ClaimPhoneNumberCommand),
  Comparison: () => (/* reexport */ Comparison),
  CompleteAttachedFileUploadCommand: () => (/* reexport */ CompleteAttachedFileUploadCommand),
  ConflictException: () => (/* reexport */ ConflictException),
  Connect: () => (/* reexport */ Connect),
  ConnectClient: () => (/* reexport */ ConnectClient),
  ConnectServiceException: () => (/* reexport */ ConnectServiceException),
  ConnectionDataFilterSensitiveLog: () => (/* reexport */ ConnectionDataFilterSensitiveLog),
  ContactAnalysisFilterSensitiveLog: () => (/* reexport */ ContactAnalysisFilterSensitiveLog),
  ContactFilterSensitiveLog: () => (/* reexport */ ContactFilterSensitiveLog),
  ContactFlowModuleState: () => (/* reexport */ ContactFlowModuleState),
  ContactFlowModuleStatus: () => (/* reexport */ ContactFlowModuleStatus),
  ContactFlowNotPublishedException: () => (/* reexport */ ContactFlowNotPublishedException),
  ContactFlowState: () => (/* reexport */ ContactFlowState),
  ContactFlowStatus: () => (/* reexport */ ContactFlowStatus),
  ContactFlowType: () => (/* reexport */ ContactFlowType),
  ContactInitiationMethod: () => (/* reexport */ ContactInitiationMethod),
  ContactNotFoundException: () => (/* reexport */ ContactNotFoundException),
  ContactState: () => (/* reexport */ ContactState),
  CreateAgentStatusCommand: () => (/* reexport */ CreateAgentStatusCommand),
  CreateContactFlowCommand: () => (/* reexport */ CreateContactFlowCommand),
  CreateContactFlowModuleCommand: () => (/* reexport */ CreateContactFlowModuleCommand),
  CreateEvaluationFormCommand: () => (/* reexport */ CreateEvaluationFormCommand),
  CreateHoursOfOperationCommand: () => (/* reexport */ CreateHoursOfOperationCommand),
  CreateInstanceCommand: () => (/* reexport */ CreateInstanceCommand),
  CreateInstanceRequestFilterSensitiveLog: () => (/* reexport */ CreateInstanceRequestFilterSensitiveLog),
  CreateIntegrationAssociationCommand: () => (/* reexport */ CreateIntegrationAssociationCommand),
  CreateParticipantCommand: () => (/* reexport */ CreateParticipantCommand),
  CreatePersistentContactAssociationCommand: () => (/* reexport */ CreatePersistentContactAssociationCommand),
  CreatePredefinedAttributeCommand: () => (/* reexport */ CreatePredefinedAttributeCommand),
  CreatePromptCommand: () => (/* reexport */ CreatePromptCommand),
  CreateQueueCommand: () => (/* reexport */ CreateQueueCommand),
  CreateQuickConnectCommand: () => (/* reexport */ CreateQuickConnectCommand),
  CreateRoutingProfileCommand: () => (/* reexport */ CreateRoutingProfileCommand),
  CreateRuleCommand: () => (/* reexport */ CreateRuleCommand),
  CreateSecurityProfileCommand: () => (/* reexport */ CreateSecurityProfileCommand),
  CreateTaskTemplateCommand: () => (/* reexport */ CreateTaskTemplateCommand),
  CreateTrafficDistributionGroupCommand: () => (/* reexport */ CreateTrafficDistributionGroupCommand),
  CreateUseCaseCommand: () => (/* reexport */ CreateUseCaseCommand),
  CreateUserCommand: () => (/* reexport */ CreateUserCommand),
  CreateUserHierarchyGroupCommand: () => (/* reexport */ CreateUserHierarchyGroupCommand),
  CreateUserRequestFilterSensitiveLog: () => (/* reexport */ CreateUserRequestFilterSensitiveLog),
  CreateViewCommand: () => (/* reexport */ CreateViewCommand),
  CreateViewRequestFilterSensitiveLog: () => (/* reexport */ CreateViewRequestFilterSensitiveLog),
  CreateViewResponseFilterSensitiveLog: () => (/* reexport */ CreateViewResponseFilterSensitiveLog),
  CreateViewVersionCommand: () => (/* reexport */ CreateViewVersionCommand),
  CreateViewVersionResponseFilterSensitiveLog: () => (/* reexport */ CreateViewVersionResponseFilterSensitiveLog),
  CreateVocabularyCommand: () => (/* reexport */ CreateVocabularyCommand),
  CreatedByInfo: () => (/* reexport */ CreatedByInfo),
  CredentialsFilterSensitiveLog: () => (/* reexport */ CredentialsFilterSensitiveLog),
  CurrentMetricName: () => (/* reexport */ CurrentMetricName),
  DeactivateEvaluationFormCommand: () => (/* reexport */ DeactivateEvaluationFormCommand),
  DeleteAttachedFileCommand: () => (/* reexport */ DeleteAttachedFileCommand),
  DeleteContactEvaluationCommand: () => (/* reexport */ DeleteContactEvaluationCommand),
  DeleteContactFlowCommand: () => (/* reexport */ DeleteContactFlowCommand),
  DeleteContactFlowModuleCommand: () => (/* reexport */ DeleteContactFlowModuleCommand),
  DeleteEvaluationFormCommand: () => (/* reexport */ DeleteEvaluationFormCommand),
  DeleteHoursOfOperationCommand: () => (/* reexport */ DeleteHoursOfOperationCommand),
  DeleteInstanceCommand: () => (/* reexport */ DeleteInstanceCommand),
  DeleteIntegrationAssociationCommand: () => (/* reexport */ DeleteIntegrationAssociationCommand),
  DeletePredefinedAttributeCommand: () => (/* reexport */ DeletePredefinedAttributeCommand),
  DeletePromptCommand: () => (/* reexport */ DeletePromptCommand),
  DeleteQueueCommand: () => (/* reexport */ DeleteQueueCommand),
  DeleteQuickConnectCommand: () => (/* reexport */ DeleteQuickConnectCommand),
  DeleteRoutingProfileCommand: () => (/* reexport */ DeleteRoutingProfileCommand),
  DeleteRuleCommand: () => (/* reexport */ DeleteRuleCommand),
  DeleteSecurityProfileCommand: () => (/* reexport */ DeleteSecurityProfileCommand),
  DeleteTaskTemplateCommand: () => (/* reexport */ DeleteTaskTemplateCommand),
  DeleteTrafficDistributionGroupCommand: () => (/* reexport */ DeleteTrafficDistributionGroupCommand),
  DeleteUseCaseCommand: () => (/* reexport */ DeleteUseCaseCommand),
  DeleteUserCommand: () => (/* reexport */ DeleteUserCommand),
  DeleteUserHierarchyGroupCommand: () => (/* reexport */ DeleteUserHierarchyGroupCommand),
  DeleteViewCommand: () => (/* reexport */ DeleteViewCommand),
  DeleteViewVersionCommand: () => (/* reexport */ DeleteViewVersionCommand),
  DeleteVocabularyCommand: () => (/* reexport */ DeleteVocabularyCommand),
  DescribeAgentStatusCommand: () => (/* reexport */ DescribeAgentStatusCommand),
  DescribeAuthenticationProfileCommand: () => (/* reexport */ DescribeAuthenticationProfileCommand),
  DescribeContactCommand: () => (/* reexport */ DescribeContactCommand),
  DescribeContactEvaluationCommand: () => (/* reexport */ DescribeContactEvaluationCommand),
  DescribeContactFlowCommand: () => (/* reexport */ DescribeContactFlowCommand),
  DescribeContactFlowModuleCommand: () => (/* reexport */ DescribeContactFlowModuleCommand),
  DescribeContactResponseFilterSensitiveLog: () => (/* reexport */ DescribeContactResponseFilterSensitiveLog),
  DescribeEvaluationFormCommand: () => (/* reexport */ DescribeEvaluationFormCommand),
  DescribeHoursOfOperationCommand: () => (/* reexport */ DescribeHoursOfOperationCommand),
  DescribeInstanceAttributeCommand: () => (/* reexport */ DescribeInstanceAttributeCommand),
  DescribeInstanceCommand: () => (/* reexport */ DescribeInstanceCommand),
  DescribeInstanceResponseFilterSensitiveLog: () => (/* reexport */ DescribeInstanceResponseFilterSensitiveLog),
  DescribeInstanceStorageConfigCommand: () => (/* reexport */ DescribeInstanceStorageConfigCommand),
  DescribePhoneNumberCommand: () => (/* reexport */ DescribePhoneNumberCommand),
  DescribePredefinedAttributeCommand: () => (/* reexport */ DescribePredefinedAttributeCommand),
  DescribePromptCommand: () => (/* reexport */ DescribePromptCommand),
  DescribeQueueCommand: () => (/* reexport */ DescribeQueueCommand),
  DescribeQuickConnectCommand: () => (/* reexport */ DescribeQuickConnectCommand),
  DescribeRoutingProfileCommand: () => (/* reexport */ DescribeRoutingProfileCommand),
  DescribeRuleCommand: () => (/* reexport */ DescribeRuleCommand),
  DescribeSecurityProfileCommand: () => (/* reexport */ DescribeSecurityProfileCommand),
  DescribeTrafficDistributionGroupCommand: () => (/* reexport */ DescribeTrafficDistributionGroupCommand),
  DescribeUserCommand: () => (/* reexport */ DescribeUserCommand),
  DescribeUserHierarchyGroupCommand: () => (/* reexport */ DescribeUserHierarchyGroupCommand),
  DescribeUserHierarchyStructureCommand: () => (/* reexport */ DescribeUserHierarchyStructureCommand),
  DescribeUserResponseFilterSensitiveLog: () => (/* reexport */ DescribeUserResponseFilterSensitiveLog),
  DescribeViewCommand: () => (/* reexport */ DescribeViewCommand),
  DescribeViewResponseFilterSensitiveLog: () => (/* reexport */ DescribeViewResponseFilterSensitiveLog),
  DescribeVocabularyCommand: () => (/* reexport */ DescribeVocabularyCommand),
  DestinationNotAllowedException: () => (/* reexport */ DestinationNotAllowedException),
  DirectoryType: () => (/* reexport */ DirectoryType),
  DisassociateAnalyticsDataSetCommand: () => (/* reexport */ DisassociateAnalyticsDataSetCommand),
  DisassociateApprovedOriginCommand: () => (/* reexport */ DisassociateApprovedOriginCommand),
  DisassociateBotCommand: () => (/* reexport */ DisassociateBotCommand),
  DisassociateFlowCommand: () => (/* reexport */ DisassociateFlowCommand),
  DisassociateInstanceStorageConfigCommand: () => (/* reexport */ DisassociateInstanceStorageConfigCommand),
  DisassociateLambdaFunctionCommand: () => (/* reexport */ DisassociateLambdaFunctionCommand),
  DisassociateLexBotCommand: () => (/* reexport */ DisassociateLexBotCommand),
  DisassociatePhoneNumberContactFlowCommand: () => (/* reexport */ DisassociatePhoneNumberContactFlowCommand),
  DisassociateQueueQuickConnectsCommand: () => (/* reexport */ DisassociateQueueQuickConnectsCommand),
  DisassociateRoutingProfileQueuesCommand: () => (/* reexport */ DisassociateRoutingProfileQueuesCommand),
  DisassociateSecurityKeyCommand: () => (/* reexport */ DisassociateSecurityKeyCommand),
  DisassociateTrafficDistributionGroupUserCommand: () => (/* reexport */ DisassociateTrafficDistributionGroupUserCommand),
  DisassociateUserProficienciesCommand: () => (/* reexport */ DisassociateUserProficienciesCommand),
  DismissUserContactCommand: () => (/* reexport */ DismissUserContactCommand),
  DuplicateResourceException: () => (/* reexport */ DuplicateResourceException),
  EncryptionType: () => (/* reexport */ EncryptionType),
  EndpointType: () => (/* reexport */ EndpointType),
  EvaluationAnswerData: () => (/* reexport */ EvaluationAnswerData),
  EvaluationFormItem: () => (/* reexport */ EvaluationFormItem),
  EvaluationFormNumericQuestionAutomation: () => (/* reexport */ EvaluationFormNumericQuestionAutomation),
  EvaluationFormQuestionType: () => (/* reexport */ EvaluationFormQuestionType),
  EvaluationFormQuestionTypeProperties: () => (/* reexport */ EvaluationFormQuestionTypeProperties),
  EvaluationFormScoringMode: () => (/* reexport */ EvaluationFormScoringMode),
  EvaluationFormScoringStatus: () => (/* reexport */ EvaluationFormScoringStatus),
  EvaluationFormSingleSelectQuestionAutomationOption: () => (/* reexport */ EvaluationFormSingleSelectQuestionAutomationOption),
  EvaluationFormSingleSelectQuestionDisplayMode: () => (/* reexport */ EvaluationFormSingleSelectQuestionDisplayMode),
  EvaluationFormVersionStatus: () => (/* reexport */ EvaluationFormVersionStatus),
  EvaluationStatus: () => (/* reexport */ EvaluationStatus),
  EventSourceName: () => (/* reexport */ EventSourceName),
  FailureReasonCode: () => (/* reexport */ FailureReasonCode),
  FileStatusType: () => (/* reexport */ FileStatusType),
  FileUseCaseType: () => (/* reexport */ FileUseCaseType),
  FlowAssociationResourceType: () => (/* reexport */ FlowAssociationResourceType),
  GetAttachedFileCommand: () => (/* reexport */ GetAttachedFileCommand),
  GetContactAttributesCommand: () => (/* reexport */ GetContactAttributesCommand),
  GetCurrentMetricDataCommand: () => (/* reexport */ GetCurrentMetricDataCommand),
  GetCurrentUserDataCommand: () => (/* reexport */ GetCurrentUserDataCommand),
  GetFederationTokenCommand: () => (/* reexport */ GetFederationTokenCommand),
  GetFederationTokenResponseFilterSensitiveLog: () => (/* reexport */ GetFederationTokenResponseFilterSensitiveLog),
  GetFlowAssociationCommand: () => (/* reexport */ GetFlowAssociationCommand),
  GetMetricDataCommand: () => (/* reexport */ GetMetricDataCommand),
  GetMetricDataV2Command: () => (/* reexport */ GetMetricDataV2Command),
  GetPromptFileCommand: () => (/* reexport */ GetPromptFileCommand),
  GetTaskTemplateCommand: () => (/* reexport */ GetTaskTemplateCommand),
  GetTrafficDistributionCommand: () => (/* reexport */ GetTrafficDistributionCommand),
  Grouping: () => (/* reexport */ Grouping),
  HierarchyGroupMatchType: () => (/* reexport */ HierarchyGroupMatchType),
  HistoricalMetricName: () => (/* reexport */ HistoricalMetricName),
  HoursOfOperationDays: () => (/* reexport */ HoursOfOperationDays),
  IdempotencyException: () => (/* reexport */ IdempotencyException),
  ImportPhoneNumberCommand: () => (/* reexport */ ImportPhoneNumberCommand),
  InstanceAttributeType: () => (/* reexport */ InstanceAttributeType),
  InstanceFilterSensitiveLog: () => (/* reexport */ InstanceFilterSensitiveLog),
  InstanceReplicationStatus: () => (/* reexport */ InstanceReplicationStatus),
  InstanceStatus: () => (/* reexport */ InstanceStatus),
  InstanceStorageResourceType: () => (/* reexport */ InstanceStorageResourceType),
  InstanceSummaryFilterSensitiveLog: () => (/* reexport */ InstanceSummaryFilterSensitiveLog),
  IntegrationType: () => (/* reexport */ IntegrationType),
  InternalServiceException: () => (/* reexport */ InternalServiceException),
  IntervalPeriod: () => (/* reexport */ IntervalPeriod),
  InvalidContactFlowException: () => (/* reexport */ InvalidContactFlowException),
  InvalidContactFlowModuleException: () => (/* reexport */ InvalidContactFlowModuleException),
  InvalidParameterException: () => (/* reexport */ InvalidParameterException),
  InvalidRequestException: () => (/* reexport */ InvalidRequestException),
  InvalidRequestExceptionReason: () => (/* reexport */ InvalidRequestExceptionReason),
  LexVersion: () => (/* reexport */ LexVersion),
  LimitExceededException: () => (/* reexport */ LimitExceededException),
  ListAgentStatusesCommand: () => (/* reexport */ ListAgentStatusesCommand),
  ListAnalyticsDataAssociationsCommand: () => (/* reexport */ ListAnalyticsDataAssociationsCommand),
  ListApprovedOriginsCommand: () => (/* reexport */ ListApprovedOriginsCommand),
  ListAuthenticationProfilesCommand: () => (/* reexport */ ListAuthenticationProfilesCommand),
  ListBotsCommand: () => (/* reexport */ ListBotsCommand),
  ListContactEvaluationsCommand: () => (/* reexport */ ListContactEvaluationsCommand),
  ListContactFlowModulesCommand: () => (/* reexport */ ListContactFlowModulesCommand),
  ListContactFlowsCommand: () => (/* reexport */ ListContactFlowsCommand),
  ListContactReferencesCommand: () => (/* reexport */ ListContactReferencesCommand),
  ListDefaultVocabulariesCommand: () => (/* reexport */ ListDefaultVocabulariesCommand),
  ListEvaluationFormVersionsCommand: () => (/* reexport */ ListEvaluationFormVersionsCommand),
  ListEvaluationFormsCommand: () => (/* reexport */ ListEvaluationFormsCommand),
  ListFlowAssociationResourceType: () => (/* reexport */ ListFlowAssociationResourceType),
  ListFlowAssociationsCommand: () => (/* reexport */ ListFlowAssociationsCommand),
  ListHoursOfOperationsCommand: () => (/* reexport */ ListHoursOfOperationsCommand),
  ListInstanceAttributesCommand: () => (/* reexport */ ListInstanceAttributesCommand),
  ListInstanceStorageConfigsCommand: () => (/* reexport */ ListInstanceStorageConfigsCommand),
  ListInstancesCommand: () => (/* reexport */ ListInstancesCommand),
  ListInstancesResponseFilterSensitiveLog: () => (/* reexport */ ListInstancesResponseFilterSensitiveLog),
  ListIntegrationAssociationsCommand: () => (/* reexport */ ListIntegrationAssociationsCommand),
  ListLambdaFunctionsCommand: () => (/* reexport */ ListLambdaFunctionsCommand),
  ListLexBotsCommand: () => (/* reexport */ ListLexBotsCommand),
  ListPhoneNumbersCommand: () => (/* reexport */ ListPhoneNumbersCommand),
  ListPhoneNumbersV2Command: () => (/* reexport */ ListPhoneNumbersV2Command),
  ListPredefinedAttributesCommand: () => (/* reexport */ ListPredefinedAttributesCommand),
  ListPromptsCommand: () => (/* reexport */ ListPromptsCommand),
  ListQueueQuickConnectsCommand: () => (/* reexport */ ListQueueQuickConnectsCommand),
  ListQueuesCommand: () => (/* reexport */ ListQueuesCommand),
  ListQuickConnectsCommand: () => (/* reexport */ ListQuickConnectsCommand),
  ListRealtimeContactAnalysisSegmentsV2Command: () => (/* reexport */ ListRealtimeContactAnalysisSegmentsV2Command),
  ListRoutingProfileQueuesCommand: () => (/* reexport */ ListRoutingProfileQueuesCommand),
  ListRoutingProfilesCommand: () => (/* reexport */ ListRoutingProfilesCommand),
  ListRulesCommand: () => (/* reexport */ ListRulesCommand),
  ListSecurityKeysCommand: () => (/* reexport */ ListSecurityKeysCommand),
  ListSecurityProfileApplicationsCommand: () => (/* reexport */ ListSecurityProfileApplicationsCommand),
  ListSecurityProfilePermissionsCommand: () => (/* reexport */ ListSecurityProfilePermissionsCommand),
  ListSecurityProfilesCommand: () => (/* reexport */ ListSecurityProfilesCommand),
  ListTagsForResourceCommand: () => (/* reexport */ ListTagsForResourceCommand),
  ListTaskTemplatesCommand: () => (/* reexport */ ListTaskTemplatesCommand),
  ListTrafficDistributionGroupUsersCommand: () => (/* reexport */ ListTrafficDistributionGroupUsersCommand),
  ListTrafficDistributionGroupsCommand: () => (/* reexport */ ListTrafficDistributionGroupsCommand),
  ListUseCasesCommand: () => (/* reexport */ ListUseCasesCommand),
  ListUserHierarchyGroupsCommand: () => (/* reexport */ ListUserHierarchyGroupsCommand),
  ListUserProficienciesCommand: () => (/* reexport */ ListUserProficienciesCommand),
  ListUsersCommand: () => (/* reexport */ ListUsersCommand),
  ListViewVersionsCommand: () => (/* reexport */ ListViewVersionsCommand),
  ListViewVersionsResponseFilterSensitiveLog: () => (/* reexport */ ListViewVersionsResponseFilterSensitiveLog),
  ListViewsCommand: () => (/* reexport */ ListViewsCommand),
  ListViewsResponseFilterSensitiveLog: () => (/* reexport */ ListViewsResponseFilterSensitiveLog),
  MaximumResultReturnedException: () => (/* reexport */ MaximumResultReturnedException),
  MeetingFeatureStatus: () => (/* reexport */ MeetingFeatureStatus),
  MonitorCapability: () => (/* reexport */ MonitorCapability),
  MonitorContactCommand: () => (/* reexport */ MonitorContactCommand),
  NotificationContentType: () => (/* reexport */ NotificationContentType),
  NotificationDeliveryType: () => (/* reexport */ NotificationDeliveryType),
  NumberComparisonType: () => (/* reexport */ NumberComparisonType),
  NumericQuestionPropertyAutomationLabel: () => (/* reexport */ NumericQuestionPropertyAutomationLabel),
  OutboundContactNotPermittedException: () => (/* reexport */ OutboundContactNotPermittedException),
  OutputTypeNotFoundException: () => (/* reexport */ OutputTypeNotFoundException),
  ParticipantRole: () => (/* reexport */ ParticipantRole),
  ParticipantTimerAction: () => (/* reexport */ ParticipantTimerAction),
  ParticipantTimerType: () => (/* reexport */ ParticipantTimerType),
  ParticipantTimerValue: () => (/* reexport */ ParticipantTimerValue),
  PauseContactCommand: () => (/* reexport */ PauseContactCommand),
  PhoneNumberCountryCode: () => (/* reexport */ PhoneNumberCountryCode),
  PhoneNumberType: () => (/* reexport */ PhoneNumberType),
  PhoneNumberWorkflowStatus: () => (/* reexport */ PhoneNumberWorkflowStatus),
  PhoneType: () => (/* reexport */ PhoneType),
  PredefinedAttributeValues: () => (/* reexport */ PredefinedAttributeValues),
  PropertyValidationException: () => (/* reexport */ PropertyValidationException),
  PropertyValidationExceptionReason: () => (/* reexport */ PropertyValidationExceptionReason),
  PutUserStatusCommand: () => (/* reexport */ PutUserStatusCommand),
  QueueStatus: () => (/* reexport */ QueueStatus),
  QueueType: () => (/* reexport */ QueueType),
  QuickConnectType: () => (/* reexport */ QuickConnectType),
  RealTimeContactAnalysisOutputType: () => (/* reexport */ RealTimeContactAnalysisOutputType),
  RealTimeContactAnalysisPostContactSummaryFailureCode: () => (/* reexport */ RealTimeContactAnalysisPostContactSummaryFailureCode),
  RealTimeContactAnalysisPostContactSummaryStatus: () => (/* reexport */ RealTimeContactAnalysisPostContactSummaryStatus),
  RealTimeContactAnalysisSegmentType: () => (/* reexport */ RealTimeContactAnalysisSegmentType),
  RealTimeContactAnalysisSentimentLabel: () => (/* reexport */ RealTimeContactAnalysisSentimentLabel),
  RealTimeContactAnalysisStatus: () => (/* reexport */ RealTimeContactAnalysisStatus),
  RealTimeContactAnalysisSupportedChannel: () => (/* reexport */ RealTimeContactAnalysisSupportedChannel),
  RealTimeContactAnalysisTimeData: () => (/* reexport */ RealTimeContactAnalysisTimeData),
  RealtimeContactAnalysisSegment: () => (/* reexport */ RealtimeContactAnalysisSegment),
  ReferenceStatus: () => (/* reexport */ ReferenceStatus),
  ReferenceSummary: () => (/* reexport */ ReferenceSummary),
  ReferenceType: () => (/* reexport */ ReferenceType),
  RehydrationType: () => (/* reexport */ RehydrationType),
  ReleasePhoneNumberCommand: () => (/* reexport */ ReleasePhoneNumberCommand),
  ReplicateInstanceCommand: () => (/* reexport */ ReplicateInstanceCommand),
  ReplicateInstanceRequestFilterSensitiveLog: () => (/* reexport */ ReplicateInstanceRequestFilterSensitiveLog),
  ResourceConflictException: () => (/* reexport */ ResourceConflictException),
  ResourceInUseException: () => (/* reexport */ ResourceInUseException),
  ResourceNotFoundException: () => (/* reexport */ ResourceNotFoundException),
  ResourceNotReadyException: () => (/* reexport */ ResourceNotReadyException),
  ResourceType: () => (/* reexport */ ResourceType),
  ResumeContactCommand: () => (/* reexport */ ResumeContactCommand),
  ResumeContactRecordingCommand: () => (/* reexport */ ResumeContactRecordingCommand),
  RoutingCriteriaStepStatus: () => (/* reexport */ RoutingCriteriaStepStatus),
  RulePublishStatus: () => (/* reexport */ RulePublishStatus),
  SearchAgentStatusesCommand: () => (/* reexport */ SearchAgentStatusesCommand),
  SearchAvailablePhoneNumbersCommand: () => (/* reexport */ SearchAvailablePhoneNumbersCommand),
  SearchContactFlowModulesCommand: () => (/* reexport */ SearchContactFlowModulesCommand),
  SearchContactFlowsCommand: () => (/* reexport */ SearchContactFlowsCommand),
  SearchContactsCommand: () => (/* reexport */ SearchContactsCommand),
  SearchContactsMatchType: () => (/* reexport */ SearchContactsMatchType),
  SearchContactsRequestFilterSensitiveLog: () => (/* reexport */ SearchContactsRequestFilterSensitiveLog),
  SearchContactsTimeRangeType: () => (/* reexport */ SearchContactsTimeRangeType),
  SearchCriteriaFilterSensitiveLog: () => (/* reexport */ SearchCriteriaFilterSensitiveLog),
  SearchHoursOfOperationsCommand: () => (/* reexport */ SearchHoursOfOperationsCommand),
  SearchPredefinedAttributesCommand: () => (/* reexport */ SearchPredefinedAttributesCommand),
  SearchPromptsCommand: () => (/* reexport */ SearchPromptsCommand),
  SearchQueuesCommand: () => (/* reexport */ SearchQueuesCommand),
  SearchQuickConnectsCommand: () => (/* reexport */ SearchQuickConnectsCommand),
  SearchResourceTagsCommand: () => (/* reexport */ SearchResourceTagsCommand),
  SearchRoutingProfilesCommand: () => (/* reexport */ SearchRoutingProfilesCommand),
  SearchSecurityProfilesCommand: () => (/* reexport */ SearchSecurityProfilesCommand),
  SearchUserHierarchyGroupsCommand: () => (/* reexport */ SearchUserHierarchyGroupsCommand),
  SearchUsersCommand: () => (/* reexport */ SearchUsersCommand),
  SearchUsersResponseFilterSensitiveLog: () => (/* reexport */ SearchUsersResponseFilterSensitiveLog),
  SearchVocabulariesCommand: () => (/* reexport */ SearchVocabulariesCommand),
  SearchableContactAttributesCriteriaFilterSensitiveLog: () => (/* reexport */ SearchableContactAttributesCriteriaFilterSensitiveLog),
  SearchableContactAttributesFilterSensitiveLog: () => (/* reexport */ SearchableContactAttributesFilterSensitiveLog),
  SearchableQueueType: () => (/* reexport */ SearchableQueueType),
  SendChatIntegrationEventCommand: () => (/* reexport */ SendChatIntegrationEventCommand),
  ServiceQuotaExceededException: () => (/* reexport */ ServiceQuotaExceededException),
  SingleSelectQuestionRuleCategoryAutomationCondition: () => (/* reexport */ SingleSelectQuestionRuleCategoryAutomationCondition),
  SortOrder: () => (/* reexport */ SortOrder),
  SortableFieldName: () => (/* reexport */ SortableFieldName),
  SourceType: () => (/* reexport */ SourceType),
  StartAttachedFileUploadCommand: () => (/* reexport */ StartAttachedFileUploadCommand),
  StartChatContactCommand: () => (/* reexport */ StartChatContactCommand),
  StartContactEvaluationCommand: () => (/* reexport */ StartContactEvaluationCommand),
  StartContactRecordingCommand: () => (/* reexport */ StartContactRecordingCommand),
  StartContactStreamingCommand: () => (/* reexport */ StartContactStreamingCommand),
  StartOutboundChatContactCommand: () => (/* reexport */ StartOutboundChatContactCommand),
  StartOutboundVoiceContactCommand: () => (/* reexport */ StartOutboundVoiceContactCommand),
  StartOutboundVoiceContactRequestFilterSensitiveLog: () => (/* reexport */ StartOutboundVoiceContactRequestFilterSensitiveLog),
  StartTaskContactCommand: () => (/* reexport */ StartTaskContactCommand),
  StartTaskContactRequestFilterSensitiveLog: () => (/* reexport */ StartTaskContactRequestFilterSensitiveLog),
  StartWebRTCContactCommand: () => (/* reexport */ StartWebRTCContactCommand),
  StartWebRTCContactRequestFilterSensitiveLog: () => (/* reexport */ StartWebRTCContactRequestFilterSensitiveLog),
  StartWebRTCContactResponseFilterSensitiveLog: () => (/* reexport */ StartWebRTCContactResponseFilterSensitiveLog),
  Statistic: () => (/* reexport */ Statistic),
  StopContactCommand: () => (/* reexport */ StopContactCommand),
  StopContactRecordingCommand: () => (/* reexport */ StopContactRecordingCommand),
  StopContactStreamingCommand: () => (/* reexport */ StopContactStreamingCommand),
  StorageType: () => (/* reexport */ StorageType),
  StringComparisonType: () => (/* reexport */ StringComparisonType),
  SubmitContactEvaluationCommand: () => (/* reexport */ SubmitContactEvaluationCommand),
  SuspendContactRecordingCommand: () => (/* reexport */ SuspendContactRecordingCommand),
  TagContactCommand: () => (/* reexport */ TagContactCommand),
  TagResourceCommand: () => (/* reexport */ TagResourceCommand),
  TargetListType: () => (/* reexport */ TargetListType),
  TaskTemplateFieldType: () => (/* reexport */ TaskTemplateFieldType),
  TaskTemplateStatus: () => (/* reexport */ TaskTemplateStatus),
  ThrottlingException: () => (/* reexport */ ThrottlingException),
  TimerEligibleParticipantRoles: () => (/* reexport */ TimerEligibleParticipantRoles),
  TooManyRequestsException: () => (/* reexport */ TooManyRequestsException),
  TrafficDistributionGroupStatus: () => (/* reexport */ TrafficDistributionGroupStatus),
  TrafficType: () => (/* reexport */ TrafficType),
  TranscriptCriteriaFilterSensitiveLog: () => (/* reexport */ TranscriptCriteriaFilterSensitiveLog),
  TranscriptFilterSensitiveLog: () => (/* reexport */ TranscriptFilterSensitiveLog),
  TransferContactCommand: () => (/* reexport */ TransferContactCommand),
  Unit: () => (/* reexport */ Unit),
  UntagContactCommand: () => (/* reexport */ UntagContactCommand),
  UntagResourceCommand: () => (/* reexport */ UntagResourceCommand),
  UpdateAgentStatusCommand: () => (/* reexport */ UpdateAgentStatusCommand),
  UpdateAuthenticationProfileCommand: () => (/* reexport */ UpdateAuthenticationProfileCommand),
  UpdateContactAttributesCommand: () => (/* reexport */ UpdateContactAttributesCommand),
  UpdateContactCommand: () => (/* reexport */ UpdateContactCommand),
  UpdateContactEvaluationCommand: () => (/* reexport */ UpdateContactEvaluationCommand),
  UpdateContactFlowContentCommand: () => (/* reexport */ UpdateContactFlowContentCommand),
  UpdateContactFlowMetadataCommand: () => (/* reexport */ UpdateContactFlowMetadataCommand),
  UpdateContactFlowModuleContentCommand: () => (/* reexport */ UpdateContactFlowModuleContentCommand),
  UpdateContactFlowModuleMetadataCommand: () => (/* reexport */ UpdateContactFlowModuleMetadataCommand),
  UpdateContactFlowNameCommand: () => (/* reexport */ UpdateContactFlowNameCommand),
  UpdateContactRequestFilterSensitiveLog: () => (/* reexport */ UpdateContactRequestFilterSensitiveLog),
  UpdateContactRoutingDataCommand: () => (/* reexport */ UpdateContactRoutingDataCommand),
  UpdateContactScheduleCommand: () => (/* reexport */ UpdateContactScheduleCommand),
  UpdateEvaluationFormCommand: () => (/* reexport */ UpdateEvaluationFormCommand),
  UpdateHoursOfOperationCommand: () => (/* reexport */ UpdateHoursOfOperationCommand),
  UpdateInstanceAttributeCommand: () => (/* reexport */ UpdateInstanceAttributeCommand),
  UpdateInstanceStorageConfigCommand: () => (/* reexport */ UpdateInstanceStorageConfigCommand),
  UpdateParticipantRoleConfigChannelInfo: () => (/* reexport */ UpdateParticipantRoleConfigChannelInfo),
  UpdateParticipantRoleConfigCommand: () => (/* reexport */ UpdateParticipantRoleConfigCommand),
  UpdatePhoneNumberCommand: () => (/* reexport */ UpdatePhoneNumberCommand),
  UpdatePhoneNumberMetadataCommand: () => (/* reexport */ UpdatePhoneNumberMetadataCommand),
  UpdatePredefinedAttributeCommand: () => (/* reexport */ UpdatePredefinedAttributeCommand),
  UpdatePromptCommand: () => (/* reexport */ UpdatePromptCommand),
  UpdateQueueHoursOfOperationCommand: () => (/* reexport */ UpdateQueueHoursOfOperationCommand),
  UpdateQueueMaxContactsCommand: () => (/* reexport */ UpdateQueueMaxContactsCommand),
  UpdateQueueNameCommand: () => (/* reexport */ UpdateQueueNameCommand),
  UpdateQueueOutboundCallerConfigCommand: () => (/* reexport */ UpdateQueueOutboundCallerConfigCommand),
  UpdateQueueStatusCommand: () => (/* reexport */ UpdateQueueStatusCommand),
  UpdateQuickConnectConfigCommand: () => (/* reexport */ UpdateQuickConnectConfigCommand),
  UpdateQuickConnectNameCommand: () => (/* reexport */ UpdateQuickConnectNameCommand),
  UpdateRoutingProfileAgentAvailabilityTimerCommand: () => (/* reexport */ UpdateRoutingProfileAgentAvailabilityTimerCommand),
  UpdateRoutingProfileConcurrencyCommand: () => (/* reexport */ UpdateRoutingProfileConcurrencyCommand),
  UpdateRoutingProfileDefaultOutboundQueueCommand: () => (/* reexport */ UpdateRoutingProfileDefaultOutboundQueueCommand),
  UpdateRoutingProfileNameCommand: () => (/* reexport */ UpdateRoutingProfileNameCommand),
  UpdateRoutingProfileQueuesCommand: () => (/* reexport */ UpdateRoutingProfileQueuesCommand),
  UpdateRuleCommand: () => (/* reexport */ UpdateRuleCommand),
  UpdateSecurityProfileCommand: () => (/* reexport */ UpdateSecurityProfileCommand),
  UpdateTaskTemplateCommand: () => (/* reexport */ UpdateTaskTemplateCommand),
  UpdateTrafficDistributionCommand: () => (/* reexport */ UpdateTrafficDistributionCommand),
  UpdateUserHierarchyCommand: () => (/* reexport */ UpdateUserHierarchyCommand),
  UpdateUserHierarchyGroupNameCommand: () => (/* reexport */ UpdateUserHierarchyGroupNameCommand),
  UpdateUserHierarchyStructureCommand: () => (/* reexport */ UpdateUserHierarchyStructureCommand),
  UpdateUserIdentityInfoCommand: () => (/* reexport */ UpdateUserIdentityInfoCommand),
  UpdateUserIdentityInfoRequestFilterSensitiveLog: () => (/* reexport */ UpdateUserIdentityInfoRequestFilterSensitiveLog),
  UpdateUserPhoneConfigCommand: () => (/* reexport */ UpdateUserPhoneConfigCommand),
  UpdateUserProficienciesCommand: () => (/* reexport */ UpdateUserProficienciesCommand),
  UpdateUserRoutingProfileCommand: () => (/* reexport */ UpdateUserRoutingProfileCommand),
  UpdateUserSecurityProfilesCommand: () => (/* reexport */ UpdateUserSecurityProfilesCommand),
  UpdateViewContentCommand: () => (/* reexport */ UpdateViewContentCommand),
  UpdateViewContentRequestFilterSensitiveLog: () => (/* reexport */ UpdateViewContentRequestFilterSensitiveLog),
  UpdateViewContentResponseFilterSensitiveLog: () => (/* reexport */ UpdateViewContentResponseFilterSensitiveLog),
  UpdateViewMetadataCommand: () => (/* reexport */ UpdateViewMetadataCommand),
  UpdateViewMetadataRequestFilterSensitiveLog: () => (/* reexport */ UpdateViewMetadataRequestFilterSensitiveLog),
  UseCaseType: () => (/* reexport */ UseCaseType),
  UserFilterSensitiveLog: () => (/* reexport */ UserFilterSensitiveLog),
  UserIdentityInfoFilterSensitiveLog: () => (/* reexport */ UserIdentityInfoFilterSensitiveLog),
  UserIdentityInfoLiteFilterSensitiveLog: () => (/* reexport */ UserIdentityInfoLiteFilterSensitiveLog),
  UserNotFoundException: () => (/* reexport */ UserNotFoundException),
  UserSearchSummaryFilterSensitiveLog: () => (/* reexport */ UserSearchSummaryFilterSensitiveLog),
  VideoCapability: () => (/* reexport */ VideoCapability),
  ViewContentFilterSensitiveLog: () => (/* reexport */ ViewContentFilterSensitiveLog),
  ViewFilterSensitiveLog: () => (/* reexport */ ViewFilterSensitiveLog),
  ViewInputContentFilterSensitiveLog: () => (/* reexport */ ViewInputContentFilterSensitiveLog),
  ViewStatus: () => (/* reexport */ ViewStatus),
  ViewSummaryFilterSensitiveLog: () => (/* reexport */ ViewSummaryFilterSensitiveLog),
  ViewType: () => (/* reexport */ ViewType),
  ViewVersionSummaryFilterSensitiveLog: () => (/* reexport */ ViewVersionSummaryFilterSensitiveLog),
  VocabularyLanguageCode: () => (/* reexport */ VocabularyLanguageCode),
  VocabularyState: () => (/* reexport */ VocabularyState),
  VoiceRecordingTrack: () => (/* reexport */ VoiceRecordingTrack),
  __Client: () => (/* reexport */ smithy_client_dist_es/* Client */.Kj),
  paginateGetCurrentMetricData: () => (/* reexport */ paginateGetCurrentMetricData),
  paginateGetCurrentUserData: () => (/* reexport */ paginateGetCurrentUserData),
  paginateGetMetricData: () => (/* reexport */ paginateGetMetricData),
  paginateGetMetricDataV2: () => (/* reexport */ paginateGetMetricDataV2),
  paginateListAgentStatuses: () => (/* reexport */ paginateListAgentStatuses),
  paginateListApprovedOrigins: () => (/* reexport */ paginateListApprovedOrigins),
  paginateListAuthenticationProfiles: () => (/* reexport */ paginateListAuthenticationProfiles),
  paginateListBots: () => (/* reexport */ paginateListBots),
  paginateListContactEvaluations: () => (/* reexport */ paginateListContactEvaluations),
  paginateListContactFlowModules: () => (/* reexport */ paginateListContactFlowModules),
  paginateListContactFlows: () => (/* reexport */ paginateListContactFlows),
  paginateListContactReferences: () => (/* reexport */ paginateListContactReferences),
  paginateListDefaultVocabularies: () => (/* reexport */ paginateListDefaultVocabularies),
  paginateListEvaluationFormVersions: () => (/* reexport */ paginateListEvaluationFormVersions),
  paginateListEvaluationForms: () => (/* reexport */ paginateListEvaluationForms),
  paginateListFlowAssociations: () => (/* reexport */ paginateListFlowAssociations),
  paginateListHoursOfOperations: () => (/* reexport */ paginateListHoursOfOperations),
  paginateListInstanceAttributes: () => (/* reexport */ paginateListInstanceAttributes),
  paginateListInstanceStorageConfigs: () => (/* reexport */ paginateListInstanceStorageConfigs),
  paginateListInstances: () => (/* reexport */ paginateListInstances),
  paginateListIntegrationAssociations: () => (/* reexport */ paginateListIntegrationAssociations),
  paginateListLambdaFunctions: () => (/* reexport */ paginateListLambdaFunctions),
  paginateListLexBots: () => (/* reexport */ paginateListLexBots),
  paginateListPhoneNumbers: () => (/* reexport */ paginateListPhoneNumbers),
  paginateListPhoneNumbersV2: () => (/* reexport */ paginateListPhoneNumbersV2),
  paginateListPredefinedAttributes: () => (/* reexport */ paginateListPredefinedAttributes),
  paginateListPrompts: () => (/* reexport */ paginateListPrompts),
  paginateListQueueQuickConnects: () => (/* reexport */ paginateListQueueQuickConnects),
  paginateListQueues: () => (/* reexport */ paginateListQueues),
  paginateListQuickConnects: () => (/* reexport */ paginateListQuickConnects),
  paginateListRealtimeContactAnalysisSegmentsV2: () => (/* reexport */ paginateListRealtimeContactAnalysisSegmentsV2),
  paginateListRoutingProfileQueues: () => (/* reexport */ paginateListRoutingProfileQueues),
  paginateListRoutingProfiles: () => (/* reexport */ paginateListRoutingProfiles),
  paginateListRules: () => (/* reexport */ paginateListRules),
  paginateListSecurityKeys: () => (/* reexport */ paginateListSecurityKeys),
  paginateListSecurityProfileApplications: () => (/* reexport */ paginateListSecurityProfileApplications),
  paginateListSecurityProfilePermissions: () => (/* reexport */ paginateListSecurityProfilePermissions),
  paginateListSecurityProfiles: () => (/* reexport */ paginateListSecurityProfiles),
  paginateListTaskTemplates: () => (/* reexport */ paginateListTaskTemplates),
  paginateListTrafficDistributionGroupUsers: () => (/* reexport */ paginateListTrafficDistributionGroupUsers),
  paginateListTrafficDistributionGroups: () => (/* reexport */ paginateListTrafficDistributionGroups),
  paginateListUseCases: () => (/* reexport */ paginateListUseCases),
  paginateListUserHierarchyGroups: () => (/* reexport */ paginateListUserHierarchyGroups),
  paginateListUserProficiencies: () => (/* reexport */ paginateListUserProficiencies),
  paginateListUsers: () => (/* reexport */ paginateListUsers),
  paginateListViewVersions: () => (/* reexport */ paginateListViewVersions),
  paginateListViews: () => (/* reexport */ paginateListViews),
  paginateSearchAgentStatuses: () => (/* reexport */ paginateSearchAgentStatuses),
  paginateSearchAvailablePhoneNumbers: () => (/* reexport */ paginateSearchAvailablePhoneNumbers),
  paginateSearchContactFlowModules: () => (/* reexport */ paginateSearchContactFlowModules),
  paginateSearchContactFlows: () => (/* reexport */ paginateSearchContactFlows),
  paginateSearchContacts: () => (/* reexport */ paginateSearchContacts),
  paginateSearchHoursOfOperations: () => (/* reexport */ paginateSearchHoursOfOperations),
  paginateSearchPredefinedAttributes: () => (/* reexport */ paginateSearchPredefinedAttributes),
  paginateSearchPrompts: () => (/* reexport */ paginateSearchPrompts),
  paginateSearchQueues: () => (/* reexport */ paginateSearchQueues),
  paginateSearchQuickConnects: () => (/* reexport */ paginateSearchQuickConnects),
  paginateSearchResourceTags: () => (/* reexport */ paginateSearchResourceTags),
  paginateSearchRoutingProfiles: () => (/* reexport */ paginateSearchRoutingProfiles),
  paginateSearchSecurityProfiles: () => (/* reexport */ paginateSearchSecurityProfiles),
  paginateSearchUserHierarchyGroups: () => (/* reexport */ paginateSearchUserHierarchyGroups),
  paginateSearchUsers: () => (/* reexport */ paginateSearchUsers),
  paginateSearchVocabularies: () => (/* reexport */ paginateSearchVocabularies)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
var dist_es = __webpack_require__(1095);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js + 1 modules
var middleware_logger_dist_es = __webpack_require__(9359);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var middleware_recursion_detection_dist_es = __webpack_require__(8377);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js + 6 modules
var middleware_user_agent_dist_es = __webpack_require__(6961);
// EXTERNAL MODULE: ./node_modules/@smithy/config-resolver/dist-es/index.js + 13 modules
var config_resolver_dist_es = __webpack_require__(1487);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/index.js + 17 modules
var core_dist_es = __webpack_require__(2516);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-content-length/dist-es/index.js
var middleware_content_length_dist_es = __webpack_require__(649);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-endpoint/dist-es/index.js + 8 modules
var middleware_endpoint_dist_es = __webpack_require__(7012);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-retry/dist-es/index.js + 10 modules
var middleware_retry_dist_es = __webpack_require__(6232);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 27 modules
var smithy_client_dist_es = __webpack_require__(5342);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js + 15 modules
var resolveAwsSdkSigV4Config = __webpack_require__(8088);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@aws-sdk/client-connect/dist-es/auth/httpAuthSchemeProvider.js


const defaultConnectHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
        operation: (0,util_middleware_dist_es/* getSmithyContext */.u)(context).operation,
        region: (await (0,util_middleware_dist_es/* normalizeProvider */.t)(config.region)()) ||
            (() => {
                throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
            })(),
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "connect",
            region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
            signingProperties: {
                config,
                context,
            },
        }),
    };
}
const defaultConnectHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
        default: {
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
    }
    return options;
};
const resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0,resolveAwsSdkSigV4Config/* resolveAwsSdkSigV4Config */.h)(config);
    return {
        ...config_0,
    };
};

;// ./node_modules/@aws-sdk/client-connect/dist-es/endpoint/EndpointParameters.js
const resolveClientEndpointParameters = (options) => {
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "connect",
    };
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

;// ./node_modules/@aws-sdk/client-connect/package.json
const package_namespaceObject = {"rE":"3.667.0"};
// EXTERNAL MODULE: ./node_modules/@aws-crypto/sha256-browser/build/module/index.js + 13 modules
var build_module = __webpack_require__(7272);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var util_user_agent_browser_dist_es = __webpack_require__(9391);
// EXTERNAL MODULE: ./node_modules/@smithy/fetch-http-handler/dist-es/index.js + 4 modules
var fetch_http_handler_dist_es = __webpack_require__(3957);
// EXTERNAL MODULE: ./node_modules/@smithy/invalid-dependency/dist-es/invalidProvider.js
var invalidProvider = __webpack_require__(2423);
// EXTERNAL MODULE: ./node_modules/@smithy/util-body-length-browser/dist-es/index.js + 1 modules
var util_body_length_browser_dist_es = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var util_retry_dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js + 4 modules
var AwsSdkSigV4Signer = __webpack_require__(6228);
// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 3 modules
var util_base64_dist_es = __webpack_require__(1302);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8_browser = __webpack_require__(2637);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js
var toUtf8_browser = __webpack_require__(5792);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 9 modules
var util_endpoints_dist_es = __webpack_require__(6652);
// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var _smithy_util_endpoints_dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/client-connect/dist-es/endpoint/ruleset.js
const u = "required", v = "fn", w = "argv", x = "ref";
const a = true, b = "isSet", c = "booleanEquals", d = "error", e = "endpoint", f = "tree", g = "PartitionResult", h = "getAttr", i = { [u]: false, "type": "String" }, j = { [u]: true, "default": false, "type": "Boolean" }, k = { [x]: "Endpoint" }, l = { [v]: c, [w]: [{ [x]: "UseFIPS" }, true] }, m = { [v]: c, [w]: [{ [x]: "UseDualStack" }, true] }, n = {}, o = { [v]: h, [w]: [{ [x]: g }, "supportsFIPS"] }, p = { [x]: g }, q = { [v]: c, [w]: [true, { [v]: h, [w]: [p, "supportsDualStack"] }] }, r = [l], s = [m], t = [{ [x]: "Region" }];
const _data = { version: "1.0", parameters: { Region: i, UseDualStack: j, UseFIPS: j, Endpoint: i }, rules: [{ conditions: [{ [v]: b, [w]: [k] }], rules: [{ conditions: r, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: s, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: k, properties: n, headers: n }, type: e }], type: f }, { conditions: [{ [v]: b, [w]: t }], rules: [{ conditions: [{ [v]: "aws.partition", [w]: t, assign: g }], rules: [{ conditions: [l, m], rules: [{ conditions: [{ [v]: c, [w]: [a, o] }, q], rules: [{ endpoint: { url: "https://connect-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: r, rules: [{ conditions: [{ [v]: c, [w]: [o, a] }], rules: [{ conditions: [{ [v]: "stringEquals", [w]: [{ [v]: h, [w]: [p, "name"] }, "aws-us-gov"] }], endpoint: { url: "https://connect.{Region}.amazonaws.com", properties: n, headers: n }, type: e }, { endpoint: { url: "https://connect-fips.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: s, rules: [{ conditions: [q], rules: [{ endpoint: { url: "https://connect.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: n, headers: n }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { endpoint: { url: "https://connect.{Region}.{PartitionResult#dnsSuffix}", properties: n, headers: n }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
const ruleSet = _data;

;// ./node_modules/@aws-sdk/client-connect/dist-es/endpoint/endpointResolver.js



const cache = new _smithy_util_endpoints_dist_es/* EndpointCache */.kS({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"],
});
const defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0,_smithy_util_endpoints_dist_es/* resolveEndpoint */.sO)(ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    }));
};
_smithy_util_endpoints_dist_es/* customEndpointFunctions */.mw.aws = util_endpoints_dist_es/* awsEndpointFunctions */.UF;

;// ./node_modules/@aws-sdk/client-connect/dist-es/runtimeConfig.shared.js







const getRuntimeConfig = (config) => {
    return {
        apiVersion: "2017-08-08",
        base64Decoder: config?.base64Decoder ?? util_base64_dist_es/* fromBase64 */.E,
        base64Encoder: config?.base64Encoder ?? util_base64_dist_es/* toBase64 */.n,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultConnectHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
                signer: new AwsSdkSigV4Signer/* AwsSdkSigV4Signer */.f2(),
            },
        ],
        logger: config?.logger ?? new smithy_client_dist_es/* NoOpLogger */.N4(),
        serviceId: config?.serviceId ?? "Connect",
        urlParser: config?.urlParser ?? url_parser_dist_es/* parseUrl */.D,
        utf8Decoder: config?.utf8Decoder ?? fromUtf8_browser/* fromUtf8 */.a,
        utf8Encoder: config?.utf8Encoder ?? toUtf8_browser/* toUtf8 */.P,
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-defaults-mode-browser/dist-es/index.js + 8 modules
var util_defaults_mode_browser_dist_es = __webpack_require__(8727);
;// ./node_modules/@aws-sdk/client-connect/dist-es/runtimeConfig.browser.js











const runtimeConfig_browser_getRuntimeConfig = (config) => {
    const defaultsMode = (0,util_defaults_mode_browser_dist_es/* resolveDefaultsModeConfig */.I)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_dist_es/* loadConfigsForDefaultMode */.lT);
    const clientSharedValues = getRuntimeConfig(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_browser_dist_es/* calculateBodyLength */.n,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,util_user_agent_browser_dist_es/* defaultUserAgent */.m)({ serviceId: clientSharedValues.serviceId, clientVersion: package_namespaceObject.rE }),
        maxAttempts: config?.maxAttempts ?? util_retry_dist_es/* DEFAULT_MAX_ATTEMPTS */.Gz,
        region: config?.region ?? (0,invalidProvider/* invalidProvider */.B)("Region is missing"),
        requestHandler: fetch_http_handler_dist_es/* FetchHttpHandler */.NC.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || util_retry_dist_es/* DEFAULT_RETRY_MODE */.L0),
        sha256: config?.sha256 ?? build_module/* Sha256 */.I,
        streamCollector: config?.streamCollector ?? fetch_http_handler_dist_es/* streamCollector */.kv,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(config_resolver_dist_es/* DEFAULT_USE_DUALSTACK_ENDPOINT */.VW)),
        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(config_resolver_dist_es/* DEFAULT_USE_FIPS_ENDPOINT */.Hj)),
    };
};

// EXTERNAL MODULE: ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js + 3 modules
var region_config_resolver_dist_es = __webpack_require__(6928);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
;// ./node_modules/@aws-sdk/client-connect/dist-es/auth/httpAuthExtensionConfiguration.js
const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

;// ./node_modules/@aws-sdk/client-connect/dist-es/runtimeExtensions.js




const asPartial = (t) => t;
const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = {
        ...asPartial((0,region_config_resolver_dist_es/* getAwsRegionExtensionConfiguration */.Rq)(runtimeConfig)),
        ...asPartial((0,smithy_client_dist_es/* getDefaultExtensionConfiguration */.xA)(runtimeConfig)),
        ...asPartial((0,protocol_http_dist_es/* getHttpHandlerExtensionConfiguration */.eS)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0,region_config_resolver_dist_es/* resolveAwsRegionExtensionConfiguration */.$3)(extensionConfiguration),
        ...(0,smithy_client_dist_es/* resolveDefaultRuntimeConfig */.uv)(extensionConfiguration),
        ...(0,protocol_http_dist_es/* resolveHttpHandlerRuntimeConfig */.jt)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),
    };
};

;// ./node_modules/@aws-sdk/client-connect/dist-es/ConnectClient.js















class ConnectClient extends smithy_client_dist_es/* Client */.Kj {
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig_browser_getRuntimeConfig(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0,middleware_user_agent_dist_es/* resolveUserAgentConfig */.Dc)(_config_1);
        const _config_3 = (0,middleware_retry_dist_es/* resolveRetryConfig */.$z)(_config_2);
        const _config_4 = (0,config_resolver_dist_es/* resolveRegionConfig */.TD)(_config_3);
        const _config_5 = (0,dist_es/* resolveHostHeaderConfig */.OV)(_config_4);
        const _config_6 = (0,middleware_endpoint_dist_es/* resolveEndpointConfig */.Co)(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0,middleware_user_agent_dist_es/* getUserAgentPlugin */.sM)(this.config));
        this.middlewareStack.use((0,middleware_retry_dist_es/* getRetryPlugin */.ey)(this.config));
        this.middlewareStack.use((0,middleware_content_length_dist_es/* getContentLengthPlugin */.vK)(this.config));
        this.middlewareStack.use((0,dist_es/* getHostHeaderPlugin */.TC)(this.config));
        this.middlewareStack.use((0,middleware_logger_dist_es/* getLoggerPlugin */.Y7)(this.config));
        this.middlewareStack.use((0,middleware_recursion_detection_dist_es/* getRecursionDetectionPlugin */.n4)(this.config));
        this.middlewareStack.use((0,core_dist_es/* getHttpAuthSchemeEndpointRuleSetPlugin */.wB)(this.config, {
            httpAuthSchemeParametersProvider: defaultConnectHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core_dist_es/* DefaultIdentityProviderConfig */.h$({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use((0,core_dist_es/* getHttpSigningPlugin */.lW)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js + 1 modules
var parseJsonBody = __webpack_require__(902);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var awsExpectUnion = __webpack_require__(4475);
// EXTERNAL MODULE: ./node_modules/uuid/dist/esm-browser/v4.js + 3 modules
var v4 = __webpack_require__(3829);
;// ./node_modules/@aws-sdk/client-connect/dist-es/models/ConnectServiceException.js


class ConnectServiceException extends smithy_client_dist_es/* ServiceException */.TJ {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, ConnectServiceException.prototype);
    }
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/models/models_0.js


class AccessDeniedException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
const ActionType = {
    ASSIGN_CONTACT_CATEGORY: "ASSIGN_CONTACT_CATEGORY",
    CREATE_CASE: "CREATE_CASE",
    CREATE_TASK: "CREATE_TASK",
    END_ASSOCIATED_TASKS: "END_ASSOCIATED_TASKS",
    GENERATE_EVENTBRIDGE_EVENT: "GENERATE_EVENTBRIDGE_EVENT",
    SEND_NOTIFICATION: "SEND_NOTIFICATION",
    SUBMIT_AUTO_EVALUATION: "SUBMIT_AUTO_EVALUATION",
    UPDATE_CASE: "UPDATE_CASE",
};
class InternalServiceException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceException.prototype);
        this.Message = opts.Message;
    }
}
class InvalidParameterException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceConflictException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
        this.Message = opts.Message;
    }
}
class ResourceNotFoundException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
class ThrottlingException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
const AgentAvailabilityTimer = {
    TIME_SINCE_LAST_ACTIVITY: "TIME_SINCE_LAST_ACTIVITY",
    TIME_SINCE_LAST_INBOUND: "TIME_SINCE_LAST_INBOUND",
};
const ContactState = {
    CONNECTED: "CONNECTED",
    CONNECTED_ONHOLD: "CONNECTED_ONHOLD",
    CONNECTING: "CONNECTING",
    ENDED: "ENDED",
    ERROR: "ERROR",
    INCOMING: "INCOMING",
    MISSED: "MISSED",
    PENDING: "PENDING",
    REJECTED: "REJECTED",
};
const Channel = {
    CHAT: "CHAT",
    TASK: "TASK",
    VOICE: "VOICE",
};
const ContactInitiationMethod = {
    API: "API",
    CALLBACK: "CALLBACK",
    DISCONNECT: "DISCONNECT",
    EXTERNAL_OUTBOUND: "EXTERNAL_OUTBOUND",
    INBOUND: "INBOUND",
    MONITOR: "MONITOR",
    OUTBOUND: "OUTBOUND",
    QUEUE_TRANSFER: "QUEUE_TRANSFER",
    TRANSFER: "TRANSFER",
};
const VideoCapability = {
    SEND: "SEND",
};
const AgentStatusState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const AgentStatusType = {
    CUSTOM: "CUSTOM",
    OFFLINE: "OFFLINE",
    ROUTABLE: "ROUTABLE",
};
const StringComparisonType = {
    CONTAINS: "CONTAINS",
    EXACT: "EXACT",
    STARTS_WITH: "STARTS_WITH",
};
const MonitorCapability = {
    BARGE: "BARGE",
    SILENT_MONITOR: "SILENT_MONITOR",
};
const AttachedFileInvalidRequestExceptionReason = {
    INVALID_FILE_NAME: "INVALID_FILE_NAME",
    INVALID_FILE_SIZE: "INVALID_FILE_SIZE",
    INVALID_FILE_TYPE: "INVALID_FILE_TYPE",
};
var InvalidRequestExceptionReason;
(function (InvalidRequestExceptionReason) {
    InvalidRequestExceptionReason.visit = (value, visitor) => {
        if (value.AttachedFileInvalidRequestExceptionReason !== undefined)
            return visitor.AttachedFileInvalidRequestExceptionReason(value.AttachedFileInvalidRequestExceptionReason);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(InvalidRequestExceptionReason || (InvalidRequestExceptionReason = {}));
class InvalidRequestException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
    }
}
class ServiceQuotaExceededException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
class LimitExceededException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
const VocabularyLanguageCode = {
    AR_AE: "ar-AE",
    CA_ES: "ca-ES",
    DA_DK: "da-DK",
    DE_CH: "de-CH",
    DE_DE: "de-DE",
    EN_AB: "en-AB",
    EN_AU: "en-AU",
    EN_GB: "en-GB",
    EN_IE: "en-IE",
    EN_IN: "en-IN",
    EN_NZ: "en-NZ",
    EN_US: "en-US",
    EN_WL: "en-WL",
    EN_ZA: "en-ZA",
    ES_ES: "es-ES",
    ES_US: "es-US",
    FI_FI: "fi-FI",
    FR_CA: "fr-CA",
    FR_FR: "fr-FR",
    HI_IN: "hi-IN",
    ID_ID: "id-ID",
    IT_IT: "it-IT",
    JA_JP: "ja-JP",
    KO_KR: "ko-KR",
    MS_MY: "ms-MY",
    NL_NL: "nl-NL",
    NO_NO: "no-NO",
    PL_PL: "pl-PL",
    PT_BR: "pt-BR",
    PT_PT: "pt-PT",
    SV_SE: "sv-SE",
    TL_PH: "tl-PH",
    ZH_CN: "zh-CN",
};
const FlowAssociationResourceType = {
    SMS_PHONE_NUMBER: "SMS_PHONE_NUMBER",
};
const InstanceStorageResourceType = {
    AGENT_EVENTS: "AGENT_EVENTS",
    ATTACHMENTS: "ATTACHMENTS",
    CALL_RECORDINGS: "CALL_RECORDINGS",
    CHAT_TRANSCRIPTS: "CHAT_TRANSCRIPTS",
    CONTACT_EVALUATIONS: "CONTACT_EVALUATIONS",
    CONTACT_TRACE_RECORDS: "CONTACT_TRACE_RECORDS",
    MEDIA_STREAMS: "MEDIA_STREAMS",
    REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_CHAT_SEGMENTS",
    REAL_TIME_CONTACT_ANALYSIS_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_SEGMENTS",
    REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS: "REAL_TIME_CONTACT_ANALYSIS_VOICE_SEGMENTS",
    SCHEDULED_REPORTS: "SCHEDULED_REPORTS",
    SCREEN_RECORDINGS: "SCREEN_RECORDINGS",
};
const EncryptionType = {
    KMS: "KMS",
};
const StorageType = {
    KINESIS_FIREHOSE: "KINESIS_FIREHOSE",
    KINESIS_STREAM: "KINESIS_STREAM",
    KINESIS_VIDEO_STREAM: "KINESIS_VIDEO_STREAM",
    S3: "S3",
};
var CreatedByInfo;
(function (CreatedByInfo) {
    CreatedByInfo.visit = (value, visitor) => {
        if (value.ConnectUserArn !== undefined)
            return visitor.ConnectUserArn(value.ConnectUserArn);
        if (value.AWSIdentityArn !== undefined)
            return visitor.AWSIdentityArn(value.AWSIdentityArn);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(CreatedByInfo || (CreatedByInfo = {}));
const FileStatusType = {
    APPROVED: "APPROVED",
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    REJECTED: "REJECTED",
};
const FileUseCaseType = {
    ATTACHMENT: "ATTACHMENT",
};
const ListFlowAssociationResourceType = {
    VOICE_PHONE_NUMBER: "VOICE_PHONE_NUMBER",
};
const EndpointType = {
    CONNECT_PHONENUMBER_ARN: "CONNECT_PHONENUMBER_ARN",
    CONTACT_FLOW: "CONTACT_FLOW",
    TELEPHONE_NUMBER: "TELEPHONE_NUMBER",
    VOIP: "VOIP",
};
const FailureReasonCode = {
    IDEMPOTENCY_EXCEPTION: "IDEMPOTENCY_EXCEPTION",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_ATTRIBUTE_KEY: "INVALID_ATTRIBUTE_KEY",
    INVALID_CUSTOMER_ENDPOINT: "INVALID_CUSTOMER_ENDPOINT",
    INVALID_QUEUE: "INVALID_QUEUE",
    INVALID_SYSTEM_ENDPOINT: "INVALID_SYSTEM_ENDPOINT",
    MISSING_CAMPAIGN: "MISSING_CAMPAIGN",
    MISSING_CUSTOMER_ENDPOINT: "MISSING_CUSTOMER_ENDPOINT",
    MISSING_QUEUE_ID_AND_SYSTEM_ENDPOINT: "MISSING_QUEUE_ID_AND_SYSTEM_ENDPOINT",
    REQUEST_THROTTLED: "REQUEST_THROTTLED",
};
class IdempotencyException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "IdempotencyException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotencyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotencyException.prototype);
        this.Message = opts.Message;
    }
}
class DuplicateResourceException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "DuplicateResourceException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateResourceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateResourceException.prototype);
        this.Message = opts.Message;
    }
}
const ContactFlowStatus = {
    PUBLISHED: "PUBLISHED",
    SAVED: "SAVED",
};
const ContactFlowType = {
    AGENT_HOLD: "AGENT_HOLD",
    AGENT_TRANSFER: "AGENT_TRANSFER",
    AGENT_WHISPER: "AGENT_WHISPER",
    CONTACT_FLOW: "CONTACT_FLOW",
    CUSTOMER_HOLD: "CUSTOMER_HOLD",
    CUSTOMER_QUEUE: "CUSTOMER_QUEUE",
    CUSTOMER_WHISPER: "CUSTOMER_WHISPER",
    OUTBOUND_WHISPER: "OUTBOUND_WHISPER",
    QUEUE_TRANSFER: "QUEUE_TRANSFER",
};
class InvalidContactFlowException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "InvalidContactFlowException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidContactFlowException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidContactFlowException.prototype);
        this.problems = opts.problems;
    }
}
class InvalidContactFlowModuleException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "InvalidContactFlowModuleException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidContactFlowModuleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidContactFlowModuleException.prototype);
        this.Problems = opts.Problems;
    }
}
const EvaluationFormQuestionType = {
    NUMERIC: "NUMERIC",
    SINGLESELECT: "SINGLESELECT",
    TEXT: "TEXT",
};
const NumericQuestionPropertyAutomationLabel = {
    AGENT_INTERACTION_DURATION: "AGENT_INTERACTION_DURATION",
    CONTACT_DURATION: "CONTACT_DURATION",
    CUSTOMER_HOLD_TIME: "CUSTOMER_HOLD_TIME",
    NON_TALK_TIME: "NON_TALK_TIME",
    NON_TALK_TIME_PERCENTAGE: "NON_TALK_TIME_PERCENTAGE",
    NUMBER_OF_INTERRUPTIONS: "NUMBER_OF_INTERRUPTIONS",
    OVERALL_AGENT_SENTIMENT_SCORE: "OVERALL_AGENT_SENTIMENT_SCORE",
    OVERALL_CUSTOMER_SENTIMENT_SCORE: "OVERALL_CUSTOMER_SENTIMENT_SCORE",
};
var EvaluationFormNumericQuestionAutomation;
(function (EvaluationFormNumericQuestionAutomation) {
    EvaluationFormNumericQuestionAutomation.visit = (value, visitor) => {
        if (value.PropertyValue !== undefined)
            return visitor.PropertyValue(value.PropertyValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationFormNumericQuestionAutomation || (EvaluationFormNumericQuestionAutomation = {}));
const SingleSelectQuestionRuleCategoryAutomationCondition = {
    NOT_PRESENT: "NOT_PRESENT",
    PRESENT: "PRESENT",
};
var EvaluationFormSingleSelectQuestionAutomationOption;
(function (EvaluationFormSingleSelectQuestionAutomationOption) {
    EvaluationFormSingleSelectQuestionAutomationOption.visit = (value, visitor) => {
        if (value.RuleCategory !== undefined)
            return visitor.RuleCategory(value.RuleCategory);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationFormSingleSelectQuestionAutomationOption || (EvaluationFormSingleSelectQuestionAutomationOption = {}));
const EvaluationFormSingleSelectQuestionDisplayMode = {
    DROPDOWN: "DROPDOWN",
    RADIO: "RADIO",
};
var EvaluationFormQuestionTypeProperties;
(function (EvaluationFormQuestionTypeProperties) {
    EvaluationFormQuestionTypeProperties.visit = (value, visitor) => {
        if (value.Numeric !== undefined)
            return visitor.Numeric(value.Numeric);
        if (value.SingleSelect !== undefined)
            return visitor.SingleSelect(value.SingleSelect);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationFormQuestionTypeProperties || (EvaluationFormQuestionTypeProperties = {}));
const EvaluationFormScoringMode = {
    QUESTION_ONLY: "QUESTION_ONLY",
    SECTION_ONLY: "SECTION_ONLY",
};
const EvaluationFormScoringStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const HoursOfOperationDays = {
    FRIDAY: "FRIDAY",
    MONDAY: "MONDAY",
    SATURDAY: "SATURDAY",
    SUNDAY: "SUNDAY",
    THURSDAY: "THURSDAY",
    TUESDAY: "TUESDAY",
    WEDNESDAY: "WEDNESDAY",
};
const DirectoryType = {
    CONNECT_MANAGED: "CONNECT_MANAGED",
    EXISTING_DIRECTORY: "EXISTING_DIRECTORY",
    SAML: "SAML",
};
const IntegrationType = {
    APPLICATION: "APPLICATION",
    CASES_DOMAIN: "CASES_DOMAIN",
    EVENT: "EVENT",
    FILE_SCANNER: "FILE_SCANNER",
    PINPOINT_APP: "PINPOINT_APP",
    VOICE_ID: "VOICE_ID",
    WISDOM_ASSISTANT: "WISDOM_ASSISTANT",
    WISDOM_KNOWLEDGE_BASE: "WISDOM_KNOWLEDGE_BASE",
    WISDOM_QUICK_RESPONSES: "WISDOM_QUICK_RESPONSES",
};
const SourceType = {
    CASES: "CASES",
    SALESFORCE: "SALESFORCE",
    ZENDESK: "ZENDESK",
};
const ParticipantRole = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
    CUSTOM_BOT: "CUSTOM_BOT",
    SUPERVISOR: "SUPERVISOR",
    SYSTEM: "SYSTEM",
};
const RehydrationType = {
    ENTIRE_PAST_SESSION: "ENTIRE_PAST_SESSION",
    FROM_SEGMENT: "FROM_SEGMENT",
};
var PredefinedAttributeValues;
(function (PredefinedAttributeValues) {
    PredefinedAttributeValues.visit = (value, visitor) => {
        if (value.StringList !== undefined)
            return visitor.StringList(value.StringList);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PredefinedAttributeValues || (PredefinedAttributeValues = {}));
const QuickConnectType = {
    PHONE_NUMBER: "PHONE_NUMBER",
    QUEUE: "QUEUE",
    USER: "USER",
};
const BehaviorType = {
    ROUTE_ANY_CHANNEL: "ROUTE_ANY_CHANNEL",
    ROUTE_CURRENT_CHANNEL_ONLY: "ROUTE_CURRENT_CHANNEL_ONLY",
};
const NotificationContentType = {
    PLAIN_TEXT: "PLAIN_TEXT",
};
const NotificationDeliveryType = {
    EMAIL: "EMAIL",
};
const ReferenceType = {
    ATTACHMENT: "ATTACHMENT",
    DATE: "DATE",
    EMAIL: "EMAIL",
    NUMBER: "NUMBER",
    STRING: "STRING",
    URL: "URL",
};
const RulePublishStatus = {
    DRAFT: "DRAFT",
    PUBLISHED: "PUBLISHED",
};
const EventSourceName = {
    OnCaseCreate: "OnCaseCreate",
    OnCaseUpdate: "OnCaseUpdate",
    OnContactEvaluationSubmit: "OnContactEvaluationSubmit",
    OnMetricDataUpdate: "OnMetricDataUpdate",
    OnPostCallAnalysisAvailable: "OnPostCallAnalysisAvailable",
    OnPostChatAnalysisAvailable: "OnPostChatAnalysisAvailable",
    OnRealTimeCallAnalysisAvailable: "OnRealTimeCallAnalysisAvailable",
    OnRealTimeChatAnalysisAvailable: "OnRealTimeChatAnalysisAvailable",
    OnSalesforceCaseCreate: "OnSalesforceCaseCreate",
    OnZendeskTicketCreate: "OnZendeskTicketCreate",
    OnZendeskTicketStatusUpdate: "OnZendeskTicketStatusUpdate",
};
const TaskTemplateFieldType = {
    BOOLEAN: "BOOLEAN",
    DATE_TIME: "DATE_TIME",
    DESCRIPTION: "DESCRIPTION",
    EMAIL: "EMAIL",
    NAME: "NAME",
    NUMBER: "NUMBER",
    QUICK_CONNECT: "QUICK_CONNECT",
    SCHEDULED_TIME: "SCHEDULED_TIME",
    SINGLE_SELECT: "SINGLE_SELECT",
    TEXT: "TEXT",
    TEXT_AREA: "TEXT_AREA",
    URL: "URL",
};
const TaskTemplateStatus = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
const PropertyValidationExceptionReason = {
    INVALID_FORMAT: "INVALID_FORMAT",
    NOT_SUPPORTED: "NOT_SUPPORTED",
    REFERENCED_RESOURCE_NOT_FOUND: "REFERENCED_RESOURCE_NOT_FOUND",
    REQUIRED_PROPERTY_MISSING: "REQUIRED_PROPERTY_MISSING",
    RESOURCE_NAME_ALREADY_EXISTS: "RESOURCE_NAME_ALREADY_EXISTS",
    UNIQUE_CONSTRAINT_VIOLATED: "UNIQUE_CONSTRAINT_VIOLATED",
};
class PropertyValidationException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "PropertyValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "PropertyValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PropertyValidationException.prototype);
        this.Message = opts.Message;
        this.PropertyList = opts.PropertyList;
    }
}
class ResourceNotReadyException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotReadyException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotReadyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotReadyException.prototype);
        this.Message = opts.Message;
    }
}
const UseCaseType = {
    CONNECT_CAMPAIGNS: "CONNECT_CAMPAIGNS",
    RULES_EVALUATION: "RULES_EVALUATION",
};
const PhoneType = {
    DESK_PHONE: "DESK_PHONE",
    SOFT_PHONE: "SOFT_PHONE",
};
const ViewStatus = {
    PUBLISHED: "PUBLISHED",
    SAVED: "SAVED",
};
const ViewType = {
    AWS_MANAGED: "AWS_MANAGED",
    CUSTOMER_MANAGED: "CUSTOMER_MANAGED",
};
const ResourceType = {
    CONTACT: "CONTACT",
    CONTACT_FLOW: "CONTACT_FLOW",
    HIERARCHY_GROUP: "HIERARCHY_GROUP",
    HIERARCHY_LEVEL: "HIERARCHY_LEVEL",
    INSTANCE: "INSTANCE",
    PARTICIPANT: "PARTICIPANT",
    PHONE_NUMBER: "PHONE_NUMBER",
    USER: "USER",
};
class ResourceInUseException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
        this.ResourceType = opts.ResourceType;
        this.ResourceId = opts.ResourceId;
    }
}
class TooManyRequestsException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
const VocabularyState = {
    ACTIVE: "ACTIVE",
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
const AnsweringMachineDetectionStatus = {
    AMD_ERROR: "AMD_ERROR",
    AMD_NOT_APPLICABLE: "AMD_NOT_APPLICABLE",
    AMD_UNANSWERED: "AMD_UNANSWERED",
    AMD_UNRESOLVED: "AMD_UNRESOLVED",
    ANSWERED: "ANSWERED",
    ERROR: "ERROR",
    FAX_MACHINE_DETECTED: "FAX_MACHINE_DETECTED",
    HUMAN_ANSWERED: "HUMAN_ANSWERED",
    SIT_TONE_BUSY: "SIT_TONE_BUSY",
    SIT_TONE_DETECTED: "SIT_TONE_DETECTED",
    SIT_TONE_INVALID_NUMBER: "SIT_TONE_INVALID_NUMBER",
    UNDETECTED: "UNDETECTED",
    VOICEMAIL_BEEP: "VOICEMAIL_BEEP",
    VOICEMAIL_NO_BEEP: "VOICEMAIL_NO_BEEP",
};
const CreateInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAlias && { InstanceAlias: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const UserIdentityInfoFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FirstName && { FirstName: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.LastName && { LastName: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Email && { Email: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.SecondaryEmail && { SecondaryEmail: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const CreateUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Password && { Password: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoFilterSensitiveLog(obj.IdentityInfo) }),
});
const ViewInputContentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Actions && { Actions: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const CreateViewRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: ViewInputContentFilterSensitiveLog(obj.Content) }),
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ViewContentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InputSchema && { InputSchema: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Actions && { Actions: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ViewFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Content && { Content: ViewContentFilterSensitiveLog(obj.Content) }),
});
const CreateViewResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.View && { View: ViewFilterSensitiveLog(obj.View) }),
});
const CreateViewVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.View && { View: ViewFilterSensitiveLog(obj.View) }),
});

;// ./node_modules/@aws-sdk/client-connect/dist-es/models/models_1.js



const RoutingCriteriaStepStatus = {
    ACTIVE: "ACTIVE",
    EXPIRED: "EXPIRED",
    INACTIVE: "INACTIVE",
    JOINED: "JOINED",
};
var EvaluationAnswerData;
(function (EvaluationAnswerData) {
    EvaluationAnswerData.visit = (value, visitor) => {
        if (value.StringValue !== undefined)
            return visitor.StringValue(value.StringValue);
        if (value.NumericValue !== undefined)
            return visitor.NumericValue(value.NumericValue);
        if (value.NotApplicable !== undefined)
            return visitor.NotApplicable(value.NotApplicable);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationAnswerData || (EvaluationAnswerData = {}));
const EvaluationStatus = {
    DRAFT: "DRAFT",
    SUBMITTED: "SUBMITTED",
};
class ContactFlowNotPublishedException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ContactFlowNotPublishedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ContactFlowNotPublishedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ContactFlowNotPublishedException.prototype);
        this.Message = opts.Message;
    }
}
const ContactFlowState = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
};
const ContactFlowModuleState = {
    ACTIVE: "ACTIVE",
    ARCHIVED: "ARCHIVED",
};
const ContactFlowModuleStatus = {
    PUBLISHED: "PUBLISHED",
    SAVED: "SAVED",
};
const EvaluationFormVersionStatus = {
    ACTIVE: "ACTIVE",
    DRAFT: "DRAFT",
};
const InstanceStatus = {
    ACTIVE: "ACTIVE",
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
};
const InstanceReplicationStatus = {
    INSTANCE_REPLICATION_COMPLETE: "INSTANCE_REPLICATION_COMPLETE",
    INSTANCE_REPLICATION_DELETION_FAILED: "INSTANCE_REPLICATION_DELETION_FAILED",
    INSTANCE_REPLICATION_FAILED: "INSTANCE_REPLICATION_FAILED",
    INSTANCE_REPLICATION_IN_PROGRESS: "INSTANCE_REPLICATION_IN_PROGRESS",
    INSTANCE_REPLICA_DELETING: "INSTANCE_REPLICA_DELETING",
    RESOURCE_REPLICATION_NOT_STARTED: "RESOURCE_REPLICATION_NOT_STARTED",
};
const InstanceAttributeType = {
    AUTO_RESOLVE_BEST_VOICES: "AUTO_RESOLVE_BEST_VOICES",
    CONTACTFLOW_LOGS: "CONTACTFLOW_LOGS",
    CONTACT_LENS: "CONTACT_LENS",
    EARLY_MEDIA: "EARLY_MEDIA",
    ENHANCED_CHAT_MONITORING: "ENHANCED_CHAT_MONITORING",
    ENHANCED_CONTACT_MONITORING: "ENHANCED_CONTACT_MONITORING",
    HIGH_VOLUME_OUTBOUND: "HIGH_VOLUME_OUTBOUND",
    INBOUND_CALLS: "INBOUND_CALLS",
    MULTI_PARTY_CONFERENCE: "MULTI_PARTY_CONFERENCE",
    OUTBOUND_CALLS: "OUTBOUND_CALLS",
    USE_CUSTOM_TTS_VOICES: "USE_CUSTOM_TTS_VOICES",
};
const PhoneNumberCountryCode = {
    AD: "AD",
    AE: "AE",
    AF: "AF",
    AG: "AG",
    AI: "AI",
    AL: "AL",
    AM: "AM",
    AN: "AN",
    AO: "AO",
    AQ: "AQ",
    AR: "AR",
    AS: "AS",
    AT: "AT",
    AU: "AU",
    AW: "AW",
    AZ: "AZ",
    BA: "BA",
    BB: "BB",
    BD: "BD",
    BE: "BE",
    BF: "BF",
    BG: "BG",
    BH: "BH",
    BI: "BI",
    BJ: "BJ",
    BL: "BL",
    BM: "BM",
    BN: "BN",
    BO: "BO",
    BR: "BR",
    BS: "BS",
    BT: "BT",
    BW: "BW",
    BY: "BY",
    BZ: "BZ",
    CA: "CA",
    CC: "CC",
    CD: "CD",
    CF: "CF",
    CG: "CG",
    CH: "CH",
    CI: "CI",
    CK: "CK",
    CL: "CL",
    CM: "CM",
    CN: "CN",
    CO: "CO",
    CR: "CR",
    CU: "CU",
    CV: "CV",
    CW: "CW",
    CX: "CX",
    CY: "CY",
    CZ: "CZ",
    DE: "DE",
    DJ: "DJ",
    DK: "DK",
    DM: "DM",
    DO: "DO",
    DZ: "DZ",
    EC: "EC",
    EE: "EE",
    EG: "EG",
    EH: "EH",
    ER: "ER",
    ES: "ES",
    ET: "ET",
    FI: "FI",
    FJ: "FJ",
    FK: "FK",
    FM: "FM",
    FO: "FO",
    FR: "FR",
    GA: "GA",
    GB: "GB",
    GD: "GD",
    GE: "GE",
    GG: "GG",
    GH: "GH",
    GI: "GI",
    GL: "GL",
    GM: "GM",
    GN: "GN",
    GQ: "GQ",
    GR: "GR",
    GT: "GT",
    GU: "GU",
    GW: "GW",
    GY: "GY",
    HK: "HK",
    HN: "HN",
    HR: "HR",
    HT: "HT",
    HU: "HU",
    ID: "ID",
    IE: "IE",
    IL: "IL",
    IM: "IM",
    IN: "IN",
    IO: "IO",
    IQ: "IQ",
    IR: "IR",
    IS: "IS",
    IT: "IT",
    JE: "JE",
    JM: "JM",
    JO: "JO",
    JP: "JP",
    KE: "KE",
    KG: "KG",
    KH: "KH",
    KI: "KI",
    KM: "KM",
    KN: "KN",
    KP: "KP",
    KR: "KR",
    KW: "KW",
    KY: "KY",
    KZ: "KZ",
    LA: "LA",
    LB: "LB",
    LC: "LC",
    LI: "LI",
    LK: "LK",
    LR: "LR",
    LS: "LS",
    LT: "LT",
    LU: "LU",
    LV: "LV",
    LY: "LY",
    MA: "MA",
    MC: "MC",
    MD: "MD",
    ME: "ME",
    MF: "MF",
    MG: "MG",
    MH: "MH",
    MK: "MK",
    ML: "ML",
    MM: "MM",
    MN: "MN",
    MO: "MO",
    MP: "MP",
    MR: "MR",
    MS: "MS",
    MT: "MT",
    MU: "MU",
    MV: "MV",
    MW: "MW",
    MX: "MX",
    MY: "MY",
    MZ: "MZ",
    NA: "NA",
    NC: "NC",
    NE: "NE",
    NG: "NG",
    NI: "NI",
    NL: "NL",
    NO: "NO",
    NP: "NP",
    NR: "NR",
    NU: "NU",
    NZ: "NZ",
    OM: "OM",
    PA: "PA",
    PE: "PE",
    PF: "PF",
    PG: "PG",
    PH: "PH",
    PK: "PK",
    PL: "PL",
    PM: "PM",
    PN: "PN",
    PR: "PR",
    PT: "PT",
    PW: "PW",
    PY: "PY",
    QA: "QA",
    RE: "RE",
    RO: "RO",
    RS: "RS",
    RU: "RU",
    RW: "RW",
    SA: "SA",
    SB: "SB",
    SC: "SC",
    SD: "SD",
    SE: "SE",
    SG: "SG",
    SH: "SH",
    SI: "SI",
    SJ: "SJ",
    SK: "SK",
    SL: "SL",
    SM: "SM",
    SN: "SN",
    SO: "SO",
    SR: "SR",
    ST: "ST",
    SV: "SV",
    SX: "SX",
    SY: "SY",
    SZ: "SZ",
    TC: "TC",
    TD: "TD",
    TG: "TG",
    TH: "TH",
    TJ: "TJ",
    TK: "TK",
    TL: "TL",
    TM: "TM",
    TN: "TN",
    TO: "TO",
    TR: "TR",
    TT: "TT",
    TV: "TV",
    TW: "TW",
    TZ: "TZ",
    UA: "UA",
    UG: "UG",
    US: "US",
    UY: "UY",
    UZ: "UZ",
    VA: "VA",
    VC: "VC",
    VE: "VE",
    VG: "VG",
    VI: "VI",
    VN: "VN",
    VU: "VU",
    WF: "WF",
    WS: "WS",
    YE: "YE",
    YT: "YT",
    ZA: "ZA",
    ZM: "ZM",
    ZW: "ZW",
};
const PhoneNumberWorkflowStatus = {
    Claimed: "CLAIMED",
    Failed: "FAILED",
    InProgress: "IN_PROGRESS",
};
const PhoneNumberType = {
    DID: "DID",
    SHARED: "SHARED",
    SHORT_CODE: "SHORT_CODE",
    THIRD_PARTY_DID: "THIRD_PARTY_DID",
    THIRD_PARTY_TF: "THIRD_PARTY_TF",
    TOLL_FREE: "TOLL_FREE",
    UIFN: "UIFN",
};
const QueueStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TrafficDistributionGroupStatus = {
    ACTIVE: "ACTIVE",
    CREATION_FAILED: "CREATION_FAILED",
    CREATION_IN_PROGRESS: "CREATION_IN_PROGRESS",
    DELETION_FAILED: "DELETION_FAILED",
    PENDING_DELETION: "PENDING_DELETION",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
const CurrentMetricName = {
    AGENTS_AFTER_CONTACT_WORK: "AGENTS_AFTER_CONTACT_WORK",
    AGENTS_AVAILABLE: "AGENTS_AVAILABLE",
    AGENTS_ERROR: "AGENTS_ERROR",
    AGENTS_NON_PRODUCTIVE: "AGENTS_NON_PRODUCTIVE",
    AGENTS_ONLINE: "AGENTS_ONLINE",
    AGENTS_ON_CALL: "AGENTS_ON_CALL",
    AGENTS_ON_CONTACT: "AGENTS_ON_CONTACT",
    AGENTS_STAFFED: "AGENTS_STAFFED",
    CONTACTS_IN_QUEUE: "CONTACTS_IN_QUEUE",
    CONTACTS_SCHEDULED: "CONTACTS_SCHEDULED",
    OLDEST_CONTACT_AGE: "OLDEST_CONTACT_AGE",
    SLOTS_ACTIVE: "SLOTS_ACTIVE",
    SLOTS_AVAILABLE: "SLOTS_AVAILABLE",
};
const Unit = {
    COUNT: "COUNT",
    PERCENT: "PERCENT",
    SECONDS: "SECONDS",
};
const Grouping = {
    CHANNEL: "CHANNEL",
    QUEUE: "QUEUE",
    ROUTING_PROFILE: "ROUTING_PROFILE",
    ROUTING_STEP_EXPRESSION: "ROUTING_STEP_EXPRESSION",
};
const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
class UserNotFoundException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "UserNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "UserNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UserNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const HistoricalMetricName = {
    ABANDON_TIME: "ABANDON_TIME",
    AFTER_CONTACT_WORK_TIME: "AFTER_CONTACT_WORK_TIME",
    API_CONTACTS_HANDLED: "API_CONTACTS_HANDLED",
    CALLBACK_CONTACTS_HANDLED: "CALLBACK_CONTACTS_HANDLED",
    CONTACTS_ABANDONED: "CONTACTS_ABANDONED",
    CONTACTS_AGENT_HUNG_UP_FIRST: "CONTACTS_AGENT_HUNG_UP_FIRST",
    CONTACTS_CONSULTED: "CONTACTS_CONSULTED",
    CONTACTS_HANDLED: "CONTACTS_HANDLED",
    CONTACTS_HANDLED_INCOMING: "CONTACTS_HANDLED_INCOMING",
    CONTACTS_HANDLED_OUTBOUND: "CONTACTS_HANDLED_OUTBOUND",
    CONTACTS_HOLD_ABANDONS: "CONTACTS_HOLD_ABANDONS",
    CONTACTS_MISSED: "CONTACTS_MISSED",
    CONTACTS_QUEUED: "CONTACTS_QUEUED",
    CONTACTS_TRANSFERRED_IN: "CONTACTS_TRANSFERRED_IN",
    CONTACTS_TRANSFERRED_IN_FROM_QUEUE: "CONTACTS_TRANSFERRED_IN_FROM_QUEUE",
    CONTACTS_TRANSFERRED_OUT: "CONTACTS_TRANSFERRED_OUT",
    CONTACTS_TRANSFERRED_OUT_FROM_QUEUE: "CONTACTS_TRANSFERRED_OUT_FROM_QUEUE",
    HANDLE_TIME: "HANDLE_TIME",
    HOLD_TIME: "HOLD_TIME",
    INTERACTION_AND_HOLD_TIME: "INTERACTION_AND_HOLD_TIME",
    INTERACTION_TIME: "INTERACTION_TIME",
    OCCUPANCY: "OCCUPANCY",
    QUEUED_TIME: "QUEUED_TIME",
    QUEUE_ANSWER_TIME: "QUEUE_ANSWER_TIME",
    SERVICE_LEVEL: "SERVICE_LEVEL",
};
const Statistic = {
    AVG: "AVG",
    MAX: "MAX",
    SUM: "SUM",
};
const Comparison = {
    LT: "LT",
};
const IntervalPeriod = {
    DAY: "DAY",
    FIFTEEN_MIN: "FIFTEEN_MIN",
    HOUR: "HOUR",
    THIRTY_MIN: "THIRTY_MIN",
    TOTAL: "TOTAL",
    WEEK: "WEEK",
};
const LexVersion = {
    V1: "V1",
    V2: "V2",
};
const ReferenceStatus = {
    APPROVED: "APPROVED",
    REJECTED: "REJECTED",
};
var ReferenceSummary;
(function (ReferenceSummary) {
    ReferenceSummary.visit = (value, visitor) => {
        if (value.Url !== undefined)
            return visitor.Url(value.Url);
        if (value.Attachment !== undefined)
            return visitor.Attachment(value.Attachment);
        if (value.String !== undefined)
            return visitor.String(value.String);
        if (value.Number !== undefined)
            return visitor.Number(value.Number);
        if (value.Date !== undefined)
            return visitor.Date(value.Date);
        if (value.Email !== undefined)
            return visitor.Email(value.Email);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ReferenceSummary || (ReferenceSummary = {}));
const QueueType = {
    AGENT: "AGENT",
    STANDARD: "STANDARD",
};
const RealTimeContactAnalysisOutputType = {
    Raw: "Raw",
    Redacted: "Redacted",
};
const RealTimeContactAnalysisSegmentType = {
    Attachments: "Attachments",
    Categories: "Categories",
    Event: "Event",
    Issues: "Issues",
    PostContactSummary: "PostContactSummary",
    Transcript: "Transcript",
};
const RealTimeContactAnalysisSupportedChannel = {
    CHAT: "CHAT",
    VOICE: "VOICE",
};
const ArtifactStatus = {
    APPROVED: "APPROVED",
    IN_PROGRESS: "IN_PROGRESS",
    REJECTED: "REJECTED",
};
var RealTimeContactAnalysisTimeData;
(function (RealTimeContactAnalysisTimeData) {
    RealTimeContactAnalysisTimeData.visit = (value, visitor) => {
        if (value.AbsoluteTime !== undefined)
            return visitor.AbsoluteTime(value.AbsoluteTime);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RealTimeContactAnalysisTimeData || (RealTimeContactAnalysisTimeData = {}));
const RealTimeContactAnalysisPostContactSummaryFailureCode = {
    FAILED_SAFETY_GUIDELINES: "FAILED_SAFETY_GUIDELINES",
    INSUFFICIENT_CONVERSATION_CONTENT: "INSUFFICIENT_CONVERSATION_CONTENT",
    INTERNAL_ERROR: "INTERNAL_ERROR",
    INVALID_ANALYSIS_CONFIGURATION: "INVALID_ANALYSIS_CONFIGURATION",
    QUOTA_EXCEEDED: "QUOTA_EXCEEDED",
};
const RealTimeContactAnalysisPostContactSummaryStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
};
const RealTimeContactAnalysisSentimentLabel = {
    NEGATIVE: "NEGATIVE",
    NEUTRAL: "NEUTRAL",
    POSITIVE: "POSITIVE",
};
var RealtimeContactAnalysisSegment;
(function (RealtimeContactAnalysisSegment) {
    RealtimeContactAnalysisSegment.visit = (value, visitor) => {
        if (value.Transcript !== undefined)
            return visitor.Transcript(value.Transcript);
        if (value.Categories !== undefined)
            return visitor.Categories(value.Categories);
        if (value.Issues !== undefined)
            return visitor.Issues(value.Issues);
        if (value.Event !== undefined)
            return visitor.Event(value.Event);
        if (value.Attachments !== undefined)
            return visitor.Attachments(value.Attachments);
        if (value.PostContactSummary !== undefined)
            return visitor.PostContactSummary(value.PostContactSummary);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RealtimeContactAnalysisSegment || (RealtimeContactAnalysisSegment = {}));
const RealTimeContactAnalysisStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
};
class OutputTypeNotFoundException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "OutputTypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "OutputTypeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OutputTypeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const InstanceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAlias && { InstanceAlias: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const DescribeInstanceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Instance && { Instance: InstanceFilterSensitiveLog(obj.Instance) }),
});
const UserFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoFilterSensitiveLog(obj.IdentityInfo) }),
});
const DescribeUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.User && { User: UserFilterSensitiveLog(obj.User) }),
});
const DescribeViewResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.View && { View: ViewFilterSensitiveLog(obj.View) }),
});
const CredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.RefreshToken && { RefreshToken: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Credentials && { Credentials: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const InstanceSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceAlias && { InstanceAlias: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ListInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.InstanceSummaryList && {
        InstanceSummaryList: obj.InstanceSummaryList.map((item) => InstanceSummaryFilterSensitiveLog(item)),
    }),
});

;// ./node_modules/@aws-sdk/client-connect/dist-es/models/models_2.js



class ConflictException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
const SearchContactsMatchType = {
    MATCH_ALL: "MATCH_ALL",
    MATCH_ANY: "MATCH_ANY",
};
const SortableFieldName = {
    CHANNEL: "CHANNEL",
    CONNECTED_TO_AGENT_TIMESTAMP: "CONNECTED_TO_AGENT_TIMESTAMP",
    DISCONNECT_TIMESTAMP: "DISCONNECT_TIMESTAMP",
    INITIATION_METHOD: "INITIATION_METHOD",
    INITIATION_TIMESTAMP: "INITIATION_TIMESTAMP",
    SCHEDULED_TIMESTAMP: "SCHEDULED_TIMESTAMP",
};
const SearchContactsTimeRangeType = {
    CONNECTED_TO_AGENT_TIMESTAMP: "CONNECTED_TO_AGENT_TIMESTAMP",
    DISCONNECT_TIMESTAMP: "DISCONNECT_TIMESTAMP",
    INITIATION_TIMESTAMP: "INITIATION_TIMESTAMP",
    SCHEDULED_TIMESTAMP: "SCHEDULED_TIMESTAMP",
};
const SearchableQueueType = {
    STANDARD: "STANDARD",
};
class MaximumResultReturnedException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "MaximumResultReturnedException",
            $fault: "client",
            ...opts,
        });
        this.name = "MaximumResultReturnedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MaximumResultReturnedException.prototype);
        this.Message = opts.Message;
    }
}
const HierarchyGroupMatchType = {
    EXACT: "EXACT",
    WITH_CHILD_GROUPS: "WITH_CHILD_GROUPS",
};
const NumberComparisonType = {
    EQUAL: "EQUAL",
    GREATER: "GREATER",
    GREATER_OR_EQUAL: "GREATER_OR_EQUAL",
    LESSER: "LESSER",
    LESSER_OR_EQUAL: "LESSER_OR_EQUAL",
    NOT_EQUAL: "NOT_EQUAL",
    RANGE: "RANGE",
};
const TargetListType = {
    PROFICIENCIES: "PROFICIENCIES",
};
const ChatEventType = {
    DISCONNECT: "DISCONNECT",
    EVENT: "EVENT",
    MESSAGE: "MESSAGE",
};
const VoiceRecordingTrack = {
    ALL: "ALL",
    FROM_AGENT: "FROM_AGENT",
    TO_AGENT: "TO_AGENT",
};
class DestinationNotAllowedException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "DestinationNotAllowedException",
            $fault: "client",
            ...opts,
        });
        this.name = "DestinationNotAllowedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DestinationNotAllowedException.prototype);
        this.Message = opts.Message;
    }
}
class OutboundContactNotPermittedException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "OutboundContactNotPermittedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OutboundContactNotPermittedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OutboundContactNotPermittedException.prototype);
        this.Message = opts.Message;
    }
}
const TrafficType = {
    CAMPAIGN: "CAMPAIGN",
    GENERAL: "GENERAL",
};
const MeetingFeatureStatus = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
class ContactNotFoundException extends ConnectServiceException {
    constructor(opts) {
        super({
            name: "ContactNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ContactNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ContactNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
const TimerEligibleParticipantRoles = {
    AGENT: "AGENT",
    CUSTOMER: "CUSTOMER",
};
const ParticipantTimerType = {
    DISCONNECT_NONCUSTOMER: "DISCONNECT_NONCUSTOMER",
    IDLE: "IDLE",
};
const ParticipantTimerAction = {
    Unset: "Unset",
};
var ParticipantTimerValue;
(function (ParticipantTimerValue) {
    ParticipantTimerValue.visit = (value, visitor) => {
        if (value.ParticipantTimerAction !== undefined)
            return visitor.ParticipantTimerAction(value.ParticipantTimerAction);
        if (value.ParticipantTimerDurationInMinutes !== undefined)
            return visitor.ParticipantTimerDurationInMinutes(value.ParticipantTimerDurationInMinutes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ParticipantTimerValue || (ParticipantTimerValue = {}));
var UpdateParticipantRoleConfigChannelInfo;
(function (UpdateParticipantRoleConfigChannelInfo) {
    UpdateParticipantRoleConfigChannelInfo.visit = (value, visitor) => {
        if (value.Chat !== undefined)
            return visitor.Chat(value.Chat);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(UpdateParticipantRoleConfigChannelInfo || (UpdateParticipantRoleConfigChannelInfo = {}));
var EvaluationFormItem;
(function (EvaluationFormItem) {
    EvaluationFormItem.visit = (value, visitor) => {
        if (value.Section !== undefined)
            return visitor.Section(value.Section);
        if (value.Question !== undefined)
            return visitor.Question(value.Question);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(EvaluationFormItem || (EvaluationFormItem = {}));
const ViewSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ListViewsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ViewsSummaryList && {
        ViewsSummaryList: obj.ViewsSummaryList.map((item) => ViewSummaryFilterSensitiveLog(item)),
    }),
});
const ViewVersionSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ListViewVersionsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ViewVersionSummaryList && {
        ViewVersionSummaryList: obj.ViewVersionSummaryList.map((item) => ViewVersionSummaryFilterSensitiveLog(item)),
    }),
});
const ReplicateInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ReplicaAlias && { ReplicaAlias: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const TranscriptCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SearchText && { SearchText: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const TranscriptFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Criteria && { Criteria: obj.Criteria.map((item) => TranscriptCriteriaFilterSensitiveLog(item)) }),
});
const ContactAnalysisFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Transcript && { Transcript: TranscriptFilterSensitiveLog(obj.Transcript) }),
});
const SearchableContactAttributesCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Key && { Key: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Values && { Values: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const SearchableContactAttributesFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Criteria && {
        Criteria: obj.Criteria.map((item) => SearchableContactAttributesCriteriaFilterSensitiveLog(item)),
    }),
});
const SearchCriteriaFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ContactAnalysis && { ContactAnalysis: ContactAnalysisFilterSensitiveLog(obj.ContactAnalysis) }),
    ...(obj.SearchableContactAttributes && {
        SearchableContactAttributes: SearchableContactAttributesFilterSensitiveLog(obj.SearchableContactAttributes),
    }),
});
const SearchContactsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SearchCriteria && { SearchCriteria: SearchCriteriaFilterSensitiveLog(obj.SearchCriteria) }),
});
const UserIdentityInfoLiteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.FirstName && { FirstName: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.LastName && { LastName: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const UserSearchSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoLiteFilterSensitiveLog(obj.IdentityInfo) }),
});
const SearchUsersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserSearchSummaryFilterSensitiveLog(item)) }),
});
const StartOutboundVoiceContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Description && { Description: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const StartTaskContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Description && { Description: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const StartWebRTCContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Description && { Description: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const AttendeeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.JoinToken && { JoinToken: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ConnectionDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Attendee && { Attendee: AttendeeFilterSensitiveLog(obj.Attendee) }),
});
const StartWebRTCContactResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConnectionData && { ConnectionData: ConnectionDataFilterSensitiveLog(obj.ConnectionData) }),
});
const UpdateContactRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Description && { Description: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const UpdateUserIdentityInfoRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.IdentityInfo && { IdentityInfo: UserIdentityInfoFilterSensitiveLog(obj.IdentityInfo) }),
});
const UpdateViewContentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: ViewInputContentFilterSensitiveLog(obj.Content) }),
});
const UpdateViewContentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.View && { View: ViewFilterSensitiveLog(obj.View) }),
});
const UpdateViewMetadataRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ContactFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Name && { Name: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.Description && { Description: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const DescribeContactResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Contact && { Contact: ContactFilterSensitiveLog(obj.Contact) }),
});

;// ./node_modules/@aws-sdk/client-connect/dist-es/protocols/Aws_restJson1.js








const se_ActivateEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/activate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        EvaluationFormVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateAnalyticsDataSetCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DataSetId: [],
        TargetAccountId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateApprovedOriginCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/approved-origin");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Origin: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateBotCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        LexBot: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        LexV2Bot: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateDefaultVocabularyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/default-vocabulary/{InstanceId}/{LanguageCode}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("LanguageCode", () => input.LanguageCode, "{LanguageCode}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        VocabularyId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flow-associations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        FlowId: [],
        ResourceId: [],
        ResourceType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateInstanceStorageConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/storage-config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ResourceType: [],
        StorageConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateLambdaFunctionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/lambda-function");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        FunctionArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateLexBotCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/lex-bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        LexBot: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociatePhoneNumberContactFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}/contact-flow");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactFlowId: [],
        InstanceId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateQueueQuickConnectsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/associate-quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QuickConnectIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateRoutingProfileQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/associate-queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QueueConfigs: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_AssociateSecurityKeyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/security-key");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Key: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateTrafficDistributionGroupUserCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        UserId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_AssociateUserProficienciesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/associate-proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        UserProficiencies: (_) => se_UserProficiencyList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_BatchAssociateAnalyticsDataSetCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DataSetIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TargetAccountId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_BatchDisassociateAnalyticsDataSetCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DataSetIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TargetAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_BatchGetAttachedFileMetadataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attached-files/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_aRA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        FileIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_BatchGetFlowAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/flow-associations-batch/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ResourceIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ResourceType: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_BatchPutContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/batch/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactDataRequestList: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_ClaimPhoneNumberCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/claim");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        InstanceId: [],
        PhoneNumber: [],
        PhoneNumberDescription: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CompleteAttachedFileUploadCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_aRA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_CreateAgentStatusCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent-status/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        DisplayOrder: [],
        Name: [],
        State: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateContactFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Content: [],
        Description: [],
        Name: [],
        Status: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Type: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateContactFlowModuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Content: [],
        Description: [],
        Name: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Description: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        ScoringStrategy: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Title: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateHoursOfOperationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Config: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Name: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TimeZone: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateInstanceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [],
        DirectoryId: [],
        IdentityManagementType: [],
        InboundCallsEnabled: [],
        InstanceAlias: [],
        OutboundCallsEnabled: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateIntegrationAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/integration-associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        IntegrationArn: [],
        IntegrationType: [],
        SourceApplicationName: [],
        SourceApplicationUrl: [],
        SourceType: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateParticipantCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/create-participant");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactId: [],
        InstanceId: [],
        ParticipantDetails: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreatePersistentContactAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/persistent-contact-association/{InstanceId}/{InitialContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("InitialContactId", () => input.InitialContactId, "{InitialContactId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [],
        RehydrationType: [],
        SourceContactId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreatePredefinedAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/predefined-attributes/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Name: [],
        Values: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreatePromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
        S3Uri: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateQueueCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        HoursOfOperationId: [],
        MaxContacts: [],
        Name: [],
        OutboundCallerConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        QuickConnectIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateQuickConnectCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
        QuickConnectConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateRoutingProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AgentAvailabilityTimer: [],
        DefaultOutboundQueueId: [],
        Description: [],
        MediaConcurrencies: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Name: [],
        QueueConfigs: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateRuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Actions: (_) => se_RuleActions(_, context),
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Function: [],
        Name: [],
        PublishStatus: [],
        TriggerEventSource: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateSecurityProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/security-profiles/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AllowedAccessControlHierarchyGroupId: [],
        AllowedAccessControlTags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Applications: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        HierarchyRestrictedResources: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Permissions: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SecurityProfileName: [],
        TagRestrictedResources: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateTaskTemplateCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/task/template");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Constraints: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ContactFlowId: [],
        Defaults: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Fields: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Name: [],
        Status: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateTrafficDistributionGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution-group");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Description: [],
        InstanceId: [],
        Name: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateUseCaseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        UseCaseType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateUserCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DirectoryUserId: [],
        HierarchyGroupId: [],
        IdentityInfo: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Password: [],
        PhoneConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RoutingProfileId: [],
        SecurityProfileIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Username: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateUserHierarchyGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-groups/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Name: [],
        ParentGroupId: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateViewCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [],
        Content: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Name: [],
        Status: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateViewVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        VersionDescription: [],
        ViewContentSha256: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_CreateVocabularyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vocabulary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        Content: [],
        LanguageCode: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        VocabularyName: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeactivateEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/deactivate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        EvaluationFormVersion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteAttachedFileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_aRA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteContactEvaluationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteContactFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteContactFlowModuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_v]: [() => input.EvaluationFormVersion !== void 0, () => input[_EFV].toString()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DeleteHoursOfOperationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteInstanceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteIntegrationAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeletePredefinedAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeletePromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteQueueCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteQuickConnectCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteRoutingProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteRuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteSecurityProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteTaskTemplateCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteTrafficDistributionGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteUseCaseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases/{UseCaseId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    b.p("UseCaseId", () => input.UseCaseId, "{UseCaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteUserCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteUserHierarchyGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteViewCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteViewVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}/versions/{ViewVersion}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    b.p("ViewVersion", () => input.ViewVersion.toString(), "{ViewVersion}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteVocabularyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/vocabulary-remove/{InstanceId}/{VocabularyId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("VocabularyId", () => input.VocabularyId, "{VocabularyId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DescribeAgentStatusCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/agent-status/{InstanceId}/{AgentStatusId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AgentStatusId", () => input.AgentStatusId, "{AgentStatusId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeAuthenticationProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/authentication-profiles/{InstanceId}/{AuthenticationProfileId}");
    b.p("AuthenticationProfileId", () => input.AuthenticationProfileId, "{AuthenticationProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contacts/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeContactEvaluationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeContactFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeContactFlowModuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_v]: [() => input.EvaluationFormVersion !== void 0, () => input[_EFV].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_DescribeHoursOfOperationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeInstanceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeInstanceAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/attribute/{AttributeType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeInstanceStorageConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_rT]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_DescribePhoneNumberCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribePredefinedAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribePromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeQueueCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeQuickConnectCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeRoutingProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeRuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeSecurityProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeTrafficDistributionGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeUserCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeUserHierarchyGroupCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeUserHierarchyStructureCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/user-hierarchy-structure/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeViewCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DescribeVocabularyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/vocabulary/{InstanceId}/{VocabularyId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("VocabularyId", () => input.VocabularyId, "{VocabularyId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_DisassociateAnalyticsDataSetCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DataSetId: [],
        TargetAccountId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateApprovedOriginCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/approved-origin");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_o]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_O], `Origin`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociateBotCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        LexBot: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        LexV2Bot: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DisassociateInstanceStorageConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_rT]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_RT], `ResourceType`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociateLambdaFunctionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lambda-function");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_fA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_FA], `FunctionArn`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociateLexBotCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lex-bot");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_bN]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_BN], `BotName`)],
        [_lR]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_LR], `LexRegion`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociatePhoneNumberContactFlowCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}/contact-flow");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_iI]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_II], `InstanceId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociateQueueQuickConnectsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/disassociate-quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QuickConnectIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateRoutingProfileQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/disassociate-queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QueueReferences: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DisassociateSecurityKeyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/security-key/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DisassociateTrafficDistributionGroupUserCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_UI]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_UI], `UserId`)],
        [_II]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_II], `InstanceId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_DisassociateUserProficienciesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/disassociate-proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        UserProficiencies: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DismissUserContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/contact");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetAttachedFileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/attached-files/{InstanceId}/{FileId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("FileId", () => input.FileId, "{FileId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_uEIS]: [() => input.UrlExpiryInSeconds !== void 0, () => input[_UEIS].toString()],
        [_aRA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetContactAttributesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact/attributes/{InstanceId}/{InitialContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("InitialContactId", () => input.InitialContactId, "{InitialContactId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetCurrentMetricDataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/current/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        CurrentMetrics: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Filters: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Groupings: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        MaxResults: [],
        NextToken: [],
        SortCriteria: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetCurrentUserDataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/userdata/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Filters: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetFederationTokenCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/user/federate/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetFlowAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ResourceId", () => input.ResourceId, "{ResourceId}", false);
    b.p("ResourceType", () => input.ResourceType, "{ResourceType}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetMetricDataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/historical/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        EndTime: (_) => _.getTime() / 1000,
        Filters: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Groupings: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        HistoricalMetrics: (_) => se_HistoricalMetrics(_, context),
        MaxResults: [],
        NextToken: [],
        StartTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetMetricDataV2Command = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/metrics/data");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        EndTime: (_) => _.getTime() / 1000,
        Filters: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Groupings: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Interval: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        MaxResults: [],
        Metrics: (_) => se_MetricsV2(_, context),
        NextToken: [],
        ResourceArn: [],
        StartTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_GetPromptFileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/prompts/{InstanceId}/{PromptId}/file");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetTaskTemplateCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_sV]: [, input[_SV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetTrafficDistributionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ImportPhoneNumberCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/import");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        InstanceId: [],
        PhoneNumberDescription: [],
        SourcePhoneNumberArn: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListAgentStatusesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/agent-status/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_AST]: [() => input.AgentStatusTypes !== void 0, () => input[_AST] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAnalyticsDataAssociationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/analytics-data/instance/{InstanceId}/association");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_DSI]: [, input[_DSI]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListApprovedOriginsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/approved-origins");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAuthenticationProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/authentication-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListBotsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/bots");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_lV]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_LV], `LexVersion`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContactEvaluationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-evaluations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_cI]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_CI], `ContactId`)],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContactFlowModulesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flow-modules-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_s]: [, input[_CFMS]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContactFlowsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact-flows-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_cFT]: [() => input.ContactFlowTypes !== void 0, () => input[_CFT] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContactReferencesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact/references/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_rTe]: [(0,smithy_client_dist_es/* expectNonNull */.Y0)(input.ReferenceTypes, `ReferenceTypes`) != null, () => input[_RTe] || []],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListDefaultVocabulariesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/default-vocabulary-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        LanguageCode: [],
        MaxResults: [],
        NextToken: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListEvaluationFormsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListEvaluationFormVersionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListFlowAssociationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/flow-associations-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_RT]: [, input[_RT]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListHoursOfOperationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/hours-of-operations-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListInstanceAttributesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/attributes");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListInstancesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance");
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListInstanceStorageConfigsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/storage-configs");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_rT]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_RT], `ResourceType`)],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListIntegrationAssociationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_iT]: [, input[_IT]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_iA]: [, input[_IA]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListLambdaFunctionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lambda-functions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListLexBotsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/lex-bots");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListPhoneNumbersCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/phone-numbers-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_pNT]: [() => input.PhoneNumberTypes !== void 0, () => input[_PNT] || []],
        [_pNCC]: [() => input.PhoneNumberCountryCodes !== void 0, () => input[_PNCC] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListPhoneNumbersV2Command = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/list");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        PhoneNumberCountryCodes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        PhoneNumberPrefix: [],
        PhoneNumberTypes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListPredefinedAttributesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/predefined-attributes/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListPromptsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/prompts-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQueueQuickConnectsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/queues/{InstanceId}/{QueueId}/quick-connects");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/queues-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_qT]: [() => input.QueueTypes !== void 0, () => input[_QT] || []],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQuickConnectsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/quick-connects/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_QCT]: [() => input.QuickConnectTypes !== void 0, () => input[_QCT] || []],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListRealtimeContactAnalysisSegmentsV2Command = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/list-real-time-analysis-segments-v2/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        MaxResults: [],
        NextToken: [],
        OutputType: [],
        SegmentTypes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ListRoutingProfileQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListRoutingProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/routing-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListRulesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/rules/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_pS]: [, input[_PS]],
        [_eSN]: [, input[_ESN]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSecurityKeysCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/security-keys");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSecurityProfileApplicationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/security-profiles-applications/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSecurityProfilePermissionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/security-profiles-permissions/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListSecurityProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/security-profiles-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListTaskTemplatesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/task/template");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_st]: [, input[_S]],
        [_n]: [, input[_N]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficDistributionGroupsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution-groups");
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_iI]: [, input[_II]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTrafficDistributionGroupUsersCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/traffic-distribution-group/{TrafficDistributionGroupId}/user");
    b.p("TrafficDistributionGroupId", () => input.TrafficDistributionGroupId, "{TrafficDistributionGroupId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListUseCasesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("IntegrationAssociationId", () => input.IntegrationAssociationId, "{IntegrationAssociationId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListUserHierarchyGroupsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/user-hierarchy-groups-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListUserProficienciesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/users/{InstanceId}/{UserId}/proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListUsersCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/users-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListViewsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_t]: [, input[_T]],
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListViewVersionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/views/{InstanceId}/{ViewId}/versions");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_MonitorContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/monitor");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AllowedMonitorCapabilities: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactId: [],
        InstanceId: [],
        UserId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_PauseContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/pause");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_PutUserStatusCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/status");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AgentStatusId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_ReleasePhoneNumberCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_cT]: [, input[_CT] ?? (0,v4/* default */.A)()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_ReplicateInstanceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/replicate");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ReplicaAlias: [],
        ReplicaRegion: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ResumeContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/resume");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_ResumeContactRecordingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/resume-recording");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchAgentStatusesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-agent-statuses");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_AgentStatusSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchAvailablePhoneNumbersCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/search-available");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        PhoneNumberCountryCode: [],
        PhoneNumberPrefix: [],
        PhoneNumberType: [],
        TargetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchContactFlowModulesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contact-flow-modules");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_ContactFlowModuleSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchContactFlowsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contact-flows");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_ContactFlowSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchContactsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-contacts");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Sort: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TimeRange: (_) => se_SearchContactsTimeRange(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchHoursOfOperationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-hours-of-operations");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_HoursOfOperationSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchPredefinedAttributesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-predefined-attributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_PredefinedAttributeSearchCriteria(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchPromptsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-prompts");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_PromptSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-queues");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_QueueSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchQuickConnectsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-quick-connects");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_QuickConnectSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchResourceTagsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-resource-tags");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        ResourceTypes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SearchCriteria: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchRoutingProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-routing-profiles");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_RoutingProfileSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchSecurityProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-security-profiles");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_SecurityProfileSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchUserHierarchyGroupsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-user-hierarchy-groups");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_UserHierarchyGroupSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchUsersCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/search-users");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        InstanceId: [],
        MaxResults: [],
        NextToken: [],
        SearchCriteria: (_) => se_UserSearchCriteria(_, context),
        SearchFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SearchVocabulariesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vocabulary-summary/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        LanguageCode: [],
        MaxResults: [],
        NameStartsWith: [],
        NextToken: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SendChatIntegrationEventCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/chat-integration-event");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DestinationId: [],
        Event: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        NewSessionDetails: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SourceId: [],
        Subtype: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartAttachedFileUploadCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/attached-files/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_aRA]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_ARA], `AssociatedResourceArn`)],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        CreatedBy: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        FileName: [],
        FileSizeInBytes: [],
        FileUseCaseType: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        UrlExpiryInSeconds: [],
    }));
    b.m("PUT").h(headers).q(query).b(body);
    return b.build();
};
const se_StartChatContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/chat");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ChatDurationInMinutes: [],
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        InitialMessage: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        InstanceId: [],
        ParticipantDetails: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        PersistentChat: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SupportedMessagingContentTypes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartContactEvaluationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactId: [],
        EvaluationFormId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartContactRecordingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/start-recording");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InitialContactId: [],
        InstanceId: [],
        VoiceRecordingConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartContactStreamingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/start-streaming");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ChatStreamingConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartOutboundChatContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/outbound-chat");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ChatDurationInMinutes: [],
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        DestinationEndpoint: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        InitialSystemMessage: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        InstanceId: [],
        ParticipantDetails: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RelatedContactId: [],
        SegmentAttributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SourceEndpoint: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SupportedMessagingContentTypes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartOutboundVoiceContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/outbound-voice");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AnswerMachineDetectionConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        CampaignId: [],
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        Description: [],
        DestinationPhoneNumber: [],
        InstanceId: [],
        Name: [],
        QueueId: [],
        References: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RelatedContactId: [],
        SourcePhoneNumber: [],
        TrafficType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartTaskContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/task");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        Description: [],
        InstanceId: [],
        Name: [],
        PreviousContactId: [],
        QuickConnectId: [],
        References: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RelatedContactId: [],
        ScheduledTime: (_) => _.getTime() / 1000,
        TaskTemplateId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StartWebRTCContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/webrtc");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AllowedCapabilities: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        Description: [],
        InstanceId: [],
        ParticipantDetails: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        References: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        RelatedContactId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_StopContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        DisconnectReason: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StopContactRecordingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop-recording");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StopContactStreamingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/stop-streaming");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InstanceId: [],
        StreamingId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SubmitContactEvaluationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}/submit");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Answers: (_) => se_EvaluationAnswersInputMap(_, context),
        Notes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_SuspendContactRecordingCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/suspend-recording");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/tags");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InstanceId: [],
        Tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TransferContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/transfer");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        ContactFlowId: [],
        ContactId: [],
        InstanceId: [],
        QueueId: [],
        UserId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/contact/tags/{InstanceId}/{ContactId}");
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_TK]: [(0,smithy_client_dist_es/* expectNonNull */.Y0)(input.TagKeys, `TagKeys`) != null, () => input[_TK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_tK]: [(0,smithy_client_dist_es/* expectNonNull */.Y0)(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateAgentStatusCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/agent-status/{InstanceId}/{AgentStatusId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AgentStatusId", () => input.AgentStatusId, "{AgentStatusId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        DisplayOrder: [],
        Name: [],
        ResetOrderNumber: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateAuthenticationProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/authentication-profiles/{InstanceId}/{AuthenticationProfileId}");
    b.p("AuthenticationProfileId", () => input.AuthenticationProfileId, "{AuthenticationProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AllowedIps: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        BlockedIps: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Name: [],
        PeriodicSessionDuration: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contacts/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
        References: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactAttributesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/attributes");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        InitialContactId: [],
        InstanceId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactEvaluationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-evaluations/{InstanceId}/{EvaluationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationId", () => input.EvaluationId, "{EvaluationId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Answers: (_) => se_EvaluationAnswersInputMap(_, context),
        Notes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactFlowContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/content");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Content: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactFlowMetadataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactFlowState: [],
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactFlowModuleContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/content");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Content: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactFlowModuleMetadataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowModuleId", () => input.ContactFlowModuleId, "{ContactFlowModuleId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
        State: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactFlowNameCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact-flows/{InstanceId}/{ContactFlowId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactFlowId", () => input.ContactFlowId, "{ContactFlowId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactRoutingDataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contacts/{InstanceId}/{ContactId}/routing-data");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QueuePriority: [],
        QueueTimeAdjustmentSeconds: [],
        RoutingCriteria: (_) => se_RoutingCriteriaInput(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContactScheduleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/schedule");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ContactId: [],
        InstanceId: [],
        ScheduledTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateEvaluationFormCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-forms/{InstanceId}/{EvaluationFormId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("EvaluationFormId", () => input.EvaluationFormId, "{EvaluationFormId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        CreateNewVersion: [],
        Description: [],
        EvaluationFormVersion: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        ScoringStrategy: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Title: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdateHoursOfOperationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/hours-of-operations/{InstanceId}/{HoursOfOperationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("HoursOfOperationId", () => input.HoursOfOperationId, "{HoursOfOperationId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Config: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Name: [],
        TimeZone: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateInstanceAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/attribute/{AttributeType}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AttributeType", () => input.AttributeType, "{AttributeType}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Value: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateInstanceStorageConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/storage-config/{AssociationId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("AssociationId", () => input.AssociationId, "{AssociationId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_rT]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_RT], `ResourceType`)],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        StorageConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateParticipantRoleConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/contact/participant-role-config/{InstanceId}/{ContactId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ContactId", () => input.ContactId, "{ContactId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ChannelConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdatePhoneNumberCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        InstanceId: [],
        TargetArn: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdatePhoneNumberMetadataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/phone-number/{PhoneNumberId}/metadata");
    b.p("PhoneNumberId", () => input.PhoneNumberId, "{PhoneNumberId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        ClientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        PhoneNumberDescription: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdatePredefinedAttributeCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/predefined-attributes/{InstanceId}/{Name}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Values: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdatePromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/prompts/{InstanceId}/{PromptId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("PromptId", () => input.PromptId, "{PromptId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
        S3Uri: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueHoursOfOperationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/hours-of-operation");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        HoursOfOperationId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueMaxContactsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/max-contacts");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        MaxContacts: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueNameCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueOutboundCallerConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/outbound-caller-config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        OutboundCallerConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQueueStatusCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/queues/{InstanceId}/{QueueId}/status");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QueueId", () => input.QueueId, "{QueueId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQuickConnectConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}/config");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QuickConnectConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQuickConnectNameCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/quick-connects/{InstanceId}/{QuickConnectId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("QuickConnectId", () => input.QuickConnectId, "{QuickConnectId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRoutingProfileAgentAvailabilityTimerCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/agent-availability-timer");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AgentAvailabilityTimer: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRoutingProfileConcurrencyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/concurrency");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        MediaConcurrencies: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRoutingProfileDefaultOutboundQueueCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/default-outbound-queue");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        DefaultOutboundQueueId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRoutingProfileNameCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/name");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRoutingProfileQueuesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/routing-profiles/{InstanceId}/{RoutingProfileId}/queues");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("RoutingProfileId", () => input.RoutingProfileId, "{RoutingProfileId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        QueueConfigs: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateRuleCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/rules/{InstanceId}/{RuleId}");
    b.p("RuleId", () => input.RuleId, "{RuleId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Actions: (_) => se_RuleActions(_, context),
        Function: [],
        Name: [],
        PublishStatus: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdateSecurityProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/security-profiles/{InstanceId}/{SecurityProfileId}");
    b.p("SecurityProfileId", () => input.SecurityProfileId, "{SecurityProfileId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AllowedAccessControlHierarchyGroupId: [],
        AllowedAccessControlTags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Applications: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        HierarchyRestrictedResources: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Permissions: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TagRestrictedResources: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateTaskTemplateCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/instance/{InstanceId}/task/template/{TaskTemplateId}");
    b.p("TaskTemplateId", () => input.TaskTemplateId, "{TaskTemplateId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Constraints: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        ContactFlowId: [],
        Defaults: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Description: [],
        Fields: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Name: [],
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateTrafficDistributionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/traffic-distribution/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        AgentConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        SignInConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        TelephonyConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_UpdateUserHierarchyCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/hierarchy");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        HierarchyGroupId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserHierarchyGroupNameCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}/name");
    b.p("HierarchyGroupId", () => input.HierarchyGroupId, "{HierarchyGroupId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserHierarchyStructureCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/user-hierarchy-structure/{InstanceId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        HierarchyStructure: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserIdentityInfoCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/identity-info");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        IdentityInfo: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserPhoneConfigCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/phone-config");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        PhoneConfig: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserProficienciesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/proficiencies");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("UserId", () => input.UserId, "{UserId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        UserProficiencies: (_) => se_UserProficiencyList(_, context),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserRoutingProfileCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/routing-profile");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        RoutingProfileId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateUserSecurityProfilesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/users/{InstanceId}/{UserId}/security-profiles");
    b.p("UserId", () => input.UserId, "{UserId}", false);
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        SecurityProfileIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateViewContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Content: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        Status: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateViewMetadataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/views/{InstanceId}/{ViewId}/metadata");
    b.p("InstanceId", () => input.InstanceId, "{InstanceId}", false);
    b.p("ViewId", () => input.ViewId, "{ViewId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        Description: [],
        Name: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_ActivateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        DataSetId: smithy_client_dist_es/* expectString */.lK,
        ResourceShareArn: smithy_client_dist_es/* expectString */.lK,
        ResourceShareId: smithy_client_dist_es/* expectString */.lK,
        TargetAccountId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateApprovedOriginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateDefaultVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AssociationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateLambdaFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateLexBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociatePhoneNumberContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateSecurityKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AssociationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_AssociateTrafficDistributionGroupUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_AssociateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_BatchAssociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Created: smithy_client_dist_es/* _json */.Ss,
        Errors: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_BatchDisassociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Deleted: smithy_client_dist_es/* _json */.Ss,
        Errors: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_BatchGetAttachedFileMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Errors: smithy_client_dist_es/* _json */.Ss,
        Files: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_BatchGetFlowAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        FlowAssociationSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_BatchPutContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        FailedRequestList: smithy_client_dist_es/* _json */.Ss,
        SuccessfulRequestList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ClaimPhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PhoneNumberArn: smithy_client_dist_es/* expectString */.lK,
        PhoneNumberId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CompleteAttachedFileUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_CreateAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AgentStatusARN: smithy_client_dist_es/* expectString */.lK,
        AgentStatusId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactFlowArn: smithy_client_dist_es/* expectString */.lK,
        ContactFlowId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HoursOfOperationArn: smithy_client_dist_es/* expectString */.lK,
        HoursOfOperationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateIntegrationAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        IntegrationAssociationArn: smithy_client_dist_es/* expectString */.lK,
        IntegrationAssociationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateParticipantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ParticipantCredentials: smithy_client_dist_es/* _json */.Ss,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreatePersistentContactAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContinuedFromContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreatePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_CreatePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PromptARN: smithy_client_dist_es/* expectString */.lK,
        PromptId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        QueueArn: smithy_client_dist_es/* expectString */.lK,
        QueueId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        QuickConnectARN: smithy_client_dist_es/* expectString */.lK,
        QuickConnectId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        RoutingProfileArn: smithy_client_dist_es/* expectString */.lK,
        RoutingProfileId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        RuleArn: smithy_client_dist_es/* expectString */.lK,
        RuleId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        SecurityProfileArn: smithy_client_dist_es/* expectString */.lK,
        SecurityProfileId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateUseCaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        UseCaseArn: smithy_client_dist_es/* expectString */.lK,
        UseCaseId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        UserArn: smithy_client_dist_es/* expectString */.lK,
        UserId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HierarchyGroupArn: smithy_client_dist_es/* expectString */.lK,
        HierarchyGroupId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateViewVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        State: smithy_client_dist_es/* expectString */.lK,
        VocabularyArn: smithy_client_dist_es/* expectString */.lK,
        VocabularyId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeactivateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteAttachedFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteIntegrationAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeletePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeletePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteUseCaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteViewVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        State: smithy_client_dist_es/* expectString */.lK,
        VocabularyArn: smithy_client_dist_es/* expectString */.lK,
        VocabularyId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AgentStatus: (_) => de_AgentStatus(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AuthenticationProfile: (_) => de_AuthenticationProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Contact: (_) => de_Contact(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Evaluation: (_) => de_Evaluation(_, context),
        EvaluationForm: (_) => de_EvaluationFormContent(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactFlow: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeContactFlowModuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactFlowModule: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationForm: (_) => de_EvaluationForm(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HoursOfOperation: (_) => de_HoursOfOperation(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Instance: (_) => de_Instance(_, context),
        ReplicationConfiguration: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Attribute: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        StorageConfig: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ClaimedPhoneNumberSummary: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PredefinedAttribute: (_) => de_PredefinedAttribute(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Prompt: (_) => de_Prompt(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Queue: (_) => de_Queue(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeQuickConnectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        QuickConnect: (_) => de_QuickConnect(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        RoutingProfile: (_) => de_RoutingProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Rule: (_) => de_Rule(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        SecurityProfile: (_) => de_SecurityProfile(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeTrafficDistributionGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        TrafficDistributionGroup: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        User: (_) => de_User(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeUserHierarchyGroupCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HierarchyGroup: (_) => de_HierarchyGroup(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeUserHierarchyStructureCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HierarchyStructure: (_) => de_HierarchyStructure(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeViewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DescribeVocabularyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Vocabulary: (_) => de_Vocabulary(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DisassociateAnalyticsDataSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateApprovedOriginCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateLambdaFunctionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateLexBotCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociatePhoneNumberContactFlowCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateSecurityKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateTrafficDistributionGroupUserCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DisassociateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DismissUserContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_GetAttachedFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AssociatedResourceArn: smithy_client_dist_es/* expectString */.lK,
        CreatedBy: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        CreationTime: smithy_client_dist_es/* expectString */.lK,
        DownloadUrlMetadata: smithy_client_dist_es/* _json */.Ss,
        FileArn: smithy_client_dist_es/* expectString */.lK,
        FileId: smithy_client_dist_es/* expectString */.lK,
        FileName: smithy_client_dist_es/* expectString */.lK,
        FileSizeInBytes: smithy_client_dist_es/* expectLong */.Yy,
        FileStatus: smithy_client_dist_es/* expectString */.lK,
        FileUseCaseType: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetContactAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Attributes: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetCurrentMetricDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        DataSnapshotTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        MetricResults: (_) => de_CurrentMetricResults(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetCurrentUserDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UserDataList: (_) => de_UserDataList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetFederationTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Credentials: (_) => de_Credentials(_, context),
        SignInUrl: smithy_client_dist_es/* expectString */.lK,
        UserArn: smithy_client_dist_es/* expectString */.lK,
        UserId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetFlowAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        FlowId: smithy_client_dist_es/* expectString */.lK,
        ResourceId: smithy_client_dist_es/* expectString */.lK,
        ResourceType: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetMetricDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        MetricResults: (_) => de_HistoricalMetricResults(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetMetricDataV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        MetricResults: (_) => de_MetricResultsV2(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetPromptFileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        PromptPresignedUrl: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Constraints: smithy_client_dist_es/* _json */.Ss,
        ContactFlowId: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Defaults: smithy_client_dist_es/* _json */.Ss,
        Description: smithy_client_dist_es/* expectString */.lK,
        Fields: smithy_client_dist_es/* _json */.Ss,
        Id: smithy_client_dist_es/* expectString */.lK,
        InstanceId: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Status: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetTrafficDistributionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AgentConfig: smithy_client_dist_es/* _json */.Ss,
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        SignInConfig: smithy_client_dist_es/* _json */.Ss,
        TelephonyConfig: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ImportPhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PhoneNumberArn: smithy_client_dist_es/* expectString */.lK,
        PhoneNumberId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAgentStatusesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AgentStatusSummaryList: (_) => de_AgentStatusSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAnalyticsDataAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Results: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListApprovedOriginsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Origins: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAuthenticationProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AuthenticationProfileSummaryList: (_) => de_AuthenticationProfileSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListBotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LexBots: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContactEvaluationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationSummaryList: (_) => de_EvaluationSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContactFlowModulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactFlowModulesSummaryList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContactFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactFlowSummaryList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContactReferencesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        ReferenceSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListDefaultVocabulariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        DefaultVocabularyList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListEvaluationFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormSummaryList: (_) => de_EvaluationFormSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListEvaluationFormVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormVersionSummaryList: (_) => de_EvaluationFormVersionSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListFlowAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        FlowAssociationSummaryList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListHoursOfOperationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        HoursOfOperationSummaryList: (_) => de_HoursOfOperationSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListInstanceAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Attributes: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListInstancesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        InstanceSummaryList: (_) => de_InstanceSummaryList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListInstanceStorageConfigsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        StorageConfigs: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListIntegrationAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        IntegrationAssociationSummaryList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListLambdaFunctionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LambdaFunctions: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListLexBotsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LexBots: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListPhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        PhoneNumberSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListPhoneNumbersV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ListPhoneNumbersSummaryList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListPredefinedAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        PredefinedAttributeSummaryList: (_) => de_PredefinedAttributeSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        PromptSummaryList: (_) => de_PromptSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListQueueQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        NextToken: smithy_client_dist_es/* expectString */.lK,
        QuickConnectSummaryList: (_) => de_QuickConnectSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        QueueSummaryList: (_) => de_QueueSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        QuickConnectSummaryList: (_) => de_QuickConnectSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListRealtimeContactAnalysisSegmentsV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Channel: smithy_client_dist_es/* expectString */.lK,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Segments: (_) => de_RealtimeContactAnalysisSegments(_, context),
        Status: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        NextToken: smithy_client_dist_es/* expectString */.lK,
        RoutingProfileQueueConfigSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListRoutingProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        RoutingProfileSummaryList: (_) => de_RoutingProfileSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListRulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        RuleSummaryList: (_) => de_RuleSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSecurityKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        SecurityKeys: (_) => de_SecurityKeysList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSecurityProfileApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Applications: smithy_client_dist_es/* _json */.Ss,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSecurityProfilePermissionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Permissions: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        SecurityProfileSummaryList: (_) => de_SecurityProfileSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        tags: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTaskTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        TaskTemplates: (_) => de_TaskTemplateList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTrafficDistributionGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        TrafficDistributionGroupSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTrafficDistributionGroupUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        TrafficDistributionGroupUserSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListUseCasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UseCaseSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListUserHierarchyGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UserHierarchyGroupSummaryList: (_) => de_HierarchyGroupSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UserProficiencyList: (_) => de_UserProficiencyList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UserSummaryList: (_) => de_UserSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListViewsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        ViewsSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListViewVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        ViewVersionSummaryList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_MonitorContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactArn: smithy_client_dist_es/* expectString */.lK,
        ContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PauseContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_PutUserStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_ReleasePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_ReplicateInstanceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ResumeContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_ResumeContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_SearchAgentStatusesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AgentStatuses: (_) => de_AgentStatusList(_, context),
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchAvailablePhoneNumbersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        AvailableNumbersList: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchContactFlowModulesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        ContactFlowModules: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchContactFlowsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        ContactFlows: smithy_client_dist_es/* _json */.Ss,
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Contacts: (_) => de_Contacts(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
        TotalCount: smithy_client_dist_es/* expectLong */.Yy,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchHoursOfOperationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        HoursOfOperations: (_) => de_HoursOfOperationList(_, context),
        NextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchPredefinedAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        PredefinedAttributes: (_) => de_PredefinedAttributeSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Prompts: (_) => de_PromptList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Queues: (_) => de_QueueSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchQuickConnectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        QuickConnects: (_) => de_QuickConnectSearchSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchResourceTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchRoutingProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        RoutingProfiles: (_) => de_RoutingProfileList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        SecurityProfiles: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchUserHierarchyGroupsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        UserHierarchyGroups: (_) => de_UserHierarchyGroupList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchUsersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ApproximateTotalCount: smithy_client_dist_es/* expectLong */.Yy,
        NextToken: smithy_client_dist_es/* expectString */.lK,
        Users: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchVocabulariesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        NextToken: smithy_client_dist_es/* expectString */.lK,
        VocabularySummaryList: (_) => de_VocabularySummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SendChatIntegrationEventCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        InitialContactId: smithy_client_dist_es/* expectString */.lK,
        NewChatCreated: smithy_client_dist_es/* expectBoolean */.ak,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartAttachedFileUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        CreatedBy: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        CreationTime: smithy_client_dist_es/* expectString */.lK,
        FileArn: smithy_client_dist_es/* expectString */.lK,
        FileId: smithy_client_dist_es/* expectString */.lK,
        FileStatus: smithy_client_dist_es/* expectString */.lK,
        UploadUrlMetadata: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartChatContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactId: smithy_client_dist_es/* expectString */.lK,
        ContinuedFromContactId: smithy_client_dist_es/* expectString */.lK,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
        ParticipantToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_StartContactStreamingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        StreamingId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartOutboundChatContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartOutboundVoiceContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartTaskContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartWebRTCContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ConnectionData: smithy_client_dist_es/* _json */.Ss,
        ContactId: smithy_client_dist_es/* expectString */.lK,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
        ParticipantToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StopContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_StopContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_StopContactStreamingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_SubmitContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SuspendContactRecordingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_TagContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_TransferContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        ContactArn: smithy_client_dist_es/* expectString */.lK,
        ContactId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UntagContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateAgentStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateAuthenticationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactEvaluationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateContactFlowContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactFlowMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactFlowModuleContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactFlowModuleMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactFlowNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactRoutingDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateContactScheduleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateEvaluationFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateInstanceStorageConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateParticipantRoleConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdatePhoneNumberCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PhoneNumberArn: smithy_client_dist_es/* expectString */.lK,
        PhoneNumberId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdatePhoneNumberMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdatePredefinedAttributeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdatePromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        PromptARN: smithy_client_dist_es/* expectString */.lK,
        PromptId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateQueueHoursOfOperationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQueueMaxContactsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQueueNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQueueOutboundCallerConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQueueStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQuickConnectConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateQuickConnectNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRoutingProfileAgentAvailabilityTimerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRoutingProfileConcurrencyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRoutingProfileDefaultOutboundQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRoutingProfileNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRoutingProfileQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateRuleCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateSecurityProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateTaskTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Constraints: smithy_client_dist_es/* _json */.Ss,
        ContactFlowId: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Defaults: smithy_client_dist_es/* _json */.Ss,
        Description: smithy_client_dist_es/* expectString */.lK,
        Fields: smithy_client_dist_es/* _json */.Ss,
        Id: smithy_client_dist_es/* expectString */.lK,
        InstanceId: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Status: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateTrafficDistributionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserHierarchyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserHierarchyGroupNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserHierarchyStructureCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserIdentityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserPhoneConfigCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserProficienciesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserRoutingProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateUserSecurityProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateViewContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        View: (_) => de_View(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateViewMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0,parseJsonBody/* parseJsonErrorBody */.CG)(output.body, context),
    };
    const errorCode = (0,parseJsonBody/* loadRestJsonErrorCode */.cJ)(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServiceException":
        case "com.amazonaws.connect#InternalServiceException":
            throw await de_InternalServiceExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.connect#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.connect#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.connect#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.connect#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.connect#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.connect#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.connect#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.connect#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "IdempotencyException":
        case "com.amazonaws.connect#IdempotencyException":
            throw await de_IdempotencyExceptionRes(parsedOutput, context);
        case "DuplicateResourceException":
        case "com.amazonaws.connect#DuplicateResourceException":
            throw await de_DuplicateResourceExceptionRes(parsedOutput, context);
        case "InvalidContactFlowException":
        case "com.amazonaws.connect#InvalidContactFlowException":
            throw await de_InvalidContactFlowExceptionRes(parsedOutput, context);
        case "InvalidContactFlowModuleException":
        case "com.amazonaws.connect#InvalidContactFlowModuleException":
            throw await de_InvalidContactFlowModuleExceptionRes(parsedOutput, context);
        case "PropertyValidationException":
        case "com.amazonaws.connect#PropertyValidationException":
            throw await de_PropertyValidationExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.connect#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.connect#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.connect#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        case "ContactFlowNotPublishedException":
        case "com.amazonaws.connect#ContactFlowNotPublishedException":
            throw await de_ContactFlowNotPublishedExceptionRes(parsedOutput, context);
        case "UserNotFoundException":
        case "com.amazonaws.connect#UserNotFoundException":
            throw await de_UserNotFoundExceptionRes(parsedOutput, context);
        case "OutputTypeNotFoundException":
        case "com.amazonaws.connect#OutputTypeNotFoundException":
            throw await de_OutputTypeNotFoundExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.connect#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "MaximumResultReturnedException":
        case "com.amazonaws.connect#MaximumResultReturnedException":
            throw await de_MaximumResultReturnedExceptionRes(parsedOutput, context);
        case "DestinationNotAllowedException":
        case "com.amazonaws.connect#DestinationNotAllowedException":
            throw await de_DestinationNotAllowedExceptionRes(parsedOutput, context);
        case "OutboundContactNotPermittedException":
        case "com.amazonaws.connect#OutboundContactNotPermittedException":
            throw await de_OutboundContactNotPermittedExceptionRes(parsedOutput, context);
        case "ContactNotFoundException":
        case "com.amazonaws.connect#ContactNotFoundException":
            throw await de_ContactNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0,smithy_client_dist_es/* withBaseException */.jr)(ConnectServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ContactFlowNotPublishedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ContactFlowNotPublishedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ContactNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ContactNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_DestinationNotAllowedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new DestinationNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_DuplicateResourceExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new DuplicateResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_IdempotencyExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new IdempotencyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_InternalServiceExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new InternalServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_InvalidContactFlowExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        problems: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    const exception = new InvalidContactFlowException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_InvalidContactFlowModuleExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Problems: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    const exception = new InvalidContactFlowModuleException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
        Reason: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
    });
    Object.assign(contents, doc);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_MaximumResultReturnedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new MaximumResultReturnedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_OutboundContactNotPermittedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new OutboundContactNotPermittedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_OutputTypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new OutputTypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_PropertyValidationExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
        PropertyList: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    const exception = new PropertyValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
        ResourceId: smithy_client_dist_es/* expectString */.lK,
        ResourceType: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_UserNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        Message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new UserNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const se_AgentStatusSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AgentStatusSearchCriteria(entry, context);
    });
};
const se_AgentStatusSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_AgentStatusSearchConditionList(_, context),
        OrConditions: (_) => se_AgentStatusSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_AttributeCondition = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        ComparisonOperator: [],
        MatchCriteria: smithy_client_dist_es/* _json */.Ss,
        Name: [],
        ProficiencyLevel: smithy_client_dist_es/* serializeFloat */.VA,
        Value: [],
    });
};
const se_ContactFlowModuleSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContactFlowModuleSearchCriteria(entry, context);
    });
};
const se_ContactFlowModuleSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_ContactFlowModuleSearchConditionList(_, context),
        OrConditions: (_) => se_ContactFlowModuleSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_ContactFlowSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ContactFlowSearchCriteria(entry, context);
    });
};
const se_ContactFlowSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_ContactFlowSearchConditionList(_, context),
        OrConditions: (_) => se_ContactFlowSearchConditionList(_, context),
        StateCondition: [],
        StatusCondition: [],
        StringCondition: smithy_client_dist_es/* _json */.Ss,
        TypeCondition: [],
    });
};
const se_CreateCaseActionDefinition = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Fields: (_) => se_FieldValues(_, context),
        TemplateId: [],
    });
};
const se_EvaluationAnswerData = (input, context) => {
    return EvaluationAnswerData.visit(input, {
        NotApplicable: (value) => ({ NotApplicable: value }),
        NumericValue: (value) => ({ NumericValue: (0,smithy_client_dist_es/* serializeFloat */.VA)(value) }),
        StringValue: (value) => ({ StringValue: value }),
        _: (name, value) => ({ name: value }),
    });
};
const se_EvaluationAnswerInput = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Value: (_) => se_EvaluationAnswerData(_, context),
    });
};
const se_EvaluationAnswersInputMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_EvaluationAnswerInput(value, context);
        return acc;
    }, {});
};
const se_EvaluationFormItem = (input, context) => {
    return EvaluationFormItem.visit(input, {
        Question: (value) => ({ Question: se_EvaluationFormQuestion(value, context) }),
        Section: (value) => ({ Section: se_EvaluationFormSection(value, context) }),
        _: (name, value) => ({ name: value }),
    });
};
const se_EvaluationFormItemsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_EvaluationFormItem(entry, context);
    });
};
const se_EvaluationFormQuestion = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Instructions: [],
        NotApplicableEnabled: [],
        QuestionType: [],
        QuestionTypeProperties: smithy_client_dist_es/* _json */.Ss,
        RefId: [],
        Title: [],
        Weight: smithy_client_dist_es/* serializeFloat */.VA,
    });
};
const se_EvaluationFormSection = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Instructions: [],
        Items: (_) => se_EvaluationFormItemsList(_, context),
        RefId: [],
        Title: [],
        Weight: smithy_client_dist_es/* serializeFloat */.VA,
    });
};
const se_Expression = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndExpression: (_) => se_Expressions(_, context),
        AttributeCondition: (_) => se_AttributeCondition(_, context),
        OrExpression: (_) => se_Expressions(_, context),
    });
};
const se_Expressions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Expression(entry, context);
    });
};
const se_FieldValue = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Id: [],
        Value: (_) => se_FieldValueUnion(_, context),
    });
};
const se_FieldValues = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FieldValue(entry, context);
    });
};
const se_FieldValueUnion = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        BooleanValue: [],
        DoubleValue: smithy_client_dist_es/* serializeFloat */.VA,
        EmptyValue: smithy_client_dist_es/* _json */.Ss,
        StringValue: [],
    });
};
const se_HistoricalMetric = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Name: [],
        Statistic: [],
        Threshold: (_) => se_Threshold(_, context),
        Unit: [],
    });
};
const se_HistoricalMetrics = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HistoricalMetric(entry, context);
    });
};
const se_HoursOfOperationSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HoursOfOperationSearchCriteria(entry, context);
    });
};
const se_HoursOfOperationSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_HoursOfOperationSearchConditionList(_, context),
        OrConditions: (_) => se_HoursOfOperationSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_MetricsV2 = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MetricV2(entry, context);
    });
};
const se_MetricV2 = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        MetricFilters: smithy_client_dist_es/* _json */.Ss,
        Name: [],
        Threshold: (_) => se_ThresholdCollections(_, context),
    });
};
const se_PredefinedAttributeSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PredefinedAttributeSearchCriteria(entry, context);
    });
};
const se_PredefinedAttributeSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_PredefinedAttributeSearchConditionList(_, context),
        OrConditions: (_) => se_PredefinedAttributeSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_PromptSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PromptSearchCriteria(entry, context);
    });
};
const se_PromptSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_PromptSearchConditionList(_, context),
        OrConditions: (_) => se_PromptSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_QueueSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_QueueSearchCriteria(entry, context);
    });
};
const se_QueueSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_QueueSearchConditionList(_, context),
        OrConditions: (_) => se_QueueSearchConditionList(_, context),
        QueueTypeCondition: [],
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_QuickConnectSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_QuickConnectSearchCriteria(entry, context);
    });
};
const se_QuickConnectSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_QuickConnectSearchConditionList(_, context),
        OrConditions: (_) => se_QuickConnectSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_RoutingCriteriaInput = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Steps: (_) => se_RoutingCriteriaInputSteps(_, context),
    });
};
const se_RoutingCriteriaInputStep = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Expiry: smithy_client_dist_es/* _json */.Ss,
        Expression: (_) => se_Expression(_, context),
    });
};
const se_RoutingCriteriaInputSteps = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RoutingCriteriaInputStep(entry, context);
    });
};
const se_RoutingProfileSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RoutingProfileSearchCriteria(entry, context);
    });
};
const se_RoutingProfileSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_RoutingProfileSearchConditionList(_, context),
        OrConditions: (_) => se_RoutingProfileSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_RuleAction = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        ActionType: [],
        AssignContactCategoryAction: smithy_client_dist_es/* _json */.Ss,
        CreateCaseAction: (_) => se_CreateCaseActionDefinition(_, context),
        EndAssociatedTasksAction: smithy_client_dist_es/* _json */.Ss,
        EventBridgeAction: smithy_client_dist_es/* _json */.Ss,
        SendNotificationAction: smithy_client_dist_es/* _json */.Ss,
        SubmitAutoEvaluationAction: smithy_client_dist_es/* _json */.Ss,
        TaskAction: smithy_client_dist_es/* _json */.Ss,
        UpdateCaseAction: (_) => se_UpdateCaseActionDefinition(_, context),
    });
};
const se_RuleActions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RuleAction(entry, context);
    });
};
const se_SearchContactsTimeRange = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        EndTime: (_) => _.getTime() / 1000,
        StartTime: (_) => _.getTime() / 1000,
        Type: [],
    });
};
const se_SecurityProfileSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SecurityProfileSearchCriteria(entry, context);
    });
};
const se_SecurityProfileSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_SecurityProfileSearchConditionList(_, context),
        OrConditions: (_) => se_SecurityProfileSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_Threshold = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Comparison: [],
        ThresholdValue: smithy_client_dist_es/* serializeFloat */.VA,
    });
};
const se_ThresholdCollections = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ThresholdV2(entry, context);
    });
};
const se_ThresholdV2 = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Comparison: [],
        ThresholdValue: smithy_client_dist_es/* serializeFloat */.VA,
    });
};
const se_UpdateCaseActionDefinition = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        Fields: (_) => se_FieldValues(_, context),
    });
};
const se_UserHierarchyGroupSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserHierarchyGroupSearchCriteria(entry, context);
    });
};
const se_UserHierarchyGroupSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_UserHierarchyGroupSearchConditionList(_, context),
        OrConditions: (_) => se_UserHierarchyGroupSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const se_UserProficiency = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AttributeName: [],
        AttributeValue: [],
        Level: smithy_client_dist_es/* serializeFloat */.VA,
    });
};
const se_UserProficiencyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserProficiency(entry, context);
    });
};
const se_UserSearchConditionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_UserSearchCriteria(entry, context);
    });
};
const se_UserSearchCriteria = (input, context) => {
    return (0,smithy_client_dist_es/* take */.s)(input, {
        AndConditions: (_) => se_UserSearchConditionList(_, context),
        HierarchyGroupCondition: smithy_client_dist_es/* _json */.Ss,
        ListCondition: smithy_client_dist_es/* _json */.Ss,
        OrConditions: (_) => se_UserSearchConditionList(_, context),
        StringCondition: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_AgentContactReference = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentContactState: smithy_client_dist_es/* expectString */.lK,
        Channel: smithy_client_dist_es/* expectString */.lK,
        ConnectedToAgentTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        ContactId: smithy_client_dist_es/* expectString */.lK,
        InitiationMethod: smithy_client_dist_es/* expectString */.lK,
        Queue: smithy_client_dist_es/* _json */.Ss,
        StateStartTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_AgentContactReferenceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentContactReference(entry, context);
    });
    return retVal;
};
const de_AgentInfo = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentPauseDurationInSeconds: smithy_client_dist_es/* expectInt32 */.ET,
        Capabilities: smithy_client_dist_es/* _json */.Ss,
        ConnectedToAgentTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        DeviceInfo: smithy_client_dist_es/* _json */.Ss,
        HierarchyGroups: smithy_client_dist_es/* _json */.Ss,
        Id: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AgentQualityMetrics = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Audio: (_) => de_AudioQualityMetricsInfo(_, context),
    });
};
const de_AgentStatus = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentStatusARN: smithy_client_dist_es/* expectString */.lK,
        AgentStatusId: smithy_client_dist_es/* expectString */.lK,
        Description: smithy_client_dist_es/* expectString */.lK,
        DisplayOrder: smithy_client_dist_es/* expectInt32 */.ET,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        State: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
        Type: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AgentStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentStatus(entry, context);
    });
    return retVal;
};
const de_AgentStatusReference = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        StatusArn: smithy_client_dist_es/* expectString */.lK,
        StatusName: smithy_client_dist_es/* expectString */.lK,
        StatusStartTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_AgentStatusSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Type: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AgentStatusSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentStatusSummary(entry, context);
    });
    return retVal;
};
const de_AttributeCondition = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ComparisonOperator: smithy_client_dist_es/* expectString */.lK,
        MatchCriteria: smithy_client_dist_es/* _json */.Ss,
        Name: smithy_client_dist_es/* expectString */.lK,
        ProficiencyLevel: smithy_client_dist_es/* limitedParseFloat32 */.Zx,
        Value: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AudioQualityMetricsInfo = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        PotentialQualityIssues: smithy_client_dist_es/* _json */.Ss,
        QualityScore: smithy_client_dist_es/* limitedParseFloat32 */.Zx,
    });
};
const de_AuthenticationProfile = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AllowedIps: smithy_client_dist_es/* _json */.Ss,
        Arn: smithy_client_dist_es/* expectString */.lK,
        BlockedIps: smithy_client_dist_es/* _json */.Ss,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Description: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        IsDefault: smithy_client_dist_es/* expectBoolean */.ak,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        MaxSessionDuration: smithy_client_dist_es/* expectInt32 */.ET,
        Name: smithy_client_dist_es/* expectString */.lK,
        PeriodicSessionDuration: smithy_client_dist_es/* expectInt32 */.ET,
    });
};
const de_AuthenticationProfileSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        IsDefault: smithy_client_dist_es/* expectBoolean */.ak,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AuthenticationProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthenticationProfileSummary(entry, context);
    });
    return retVal;
};
const de_Contact = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentInfo: (_) => de_AgentInfo(_, context),
        AnsweringMachineDetectionStatus: smithy_client_dist_es/* expectString */.lK,
        Arn: smithy_client_dist_es/* expectString */.lK,
        Campaign: smithy_client_dist_es/* _json */.Ss,
        Channel: smithy_client_dist_es/* expectString */.lK,
        ConnectedToSystemTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Customer: smithy_client_dist_es/* _json */.Ss,
        CustomerVoiceActivity: (_) => de_CustomerVoiceActivity(_, context),
        Description: smithy_client_dist_es/* expectString */.lK,
        DisconnectDetails: smithy_client_dist_es/* _json */.Ss,
        DisconnectTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
        InitialContactId: smithy_client_dist_es/* expectString */.lK,
        InitiationMethod: smithy_client_dist_es/* expectString */.lK,
        InitiationTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LastPausedTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LastResumedTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LastUpdateTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        PreviousContactId: smithy_client_dist_es/* expectString */.lK,
        QualityMetrics: (_) => de_QualityMetrics(_, context),
        QueueInfo: (_) => de_QueueInfo(_, context),
        QueuePriority: smithy_client_dist_es/* expectLong */.Yy,
        QueueTimeAdjustmentSeconds: smithy_client_dist_es/* expectInt32 */.ET,
        RelatedContactId: smithy_client_dist_es/* expectString */.lK,
        RoutingCriteria: (_) => de_RoutingCriteria(_, context),
        ScheduledTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        SegmentAttributes: smithy_client_dist_es/* _json */.Ss,
        Tags: smithy_client_dist_es/* _json */.Ss,
        TotalPauseCount: smithy_client_dist_es/* expectInt32 */.ET,
        TotalPauseDurationInSeconds: smithy_client_dist_es/* expectInt32 */.ET,
        WisdomInfo: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_Contacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContactSearchSummary(entry, context);
    });
    return retVal;
};
const de_ContactSearchSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentInfo: (_) => de_ContactSearchSummaryAgentInfo(_, context),
        Arn: smithy_client_dist_es/* expectString */.lK,
        Channel: smithy_client_dist_es/* expectString */.lK,
        DisconnectTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
        InitialContactId: smithy_client_dist_es/* expectString */.lK,
        InitiationMethod: smithy_client_dist_es/* expectString */.lK,
        InitiationTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        PreviousContactId: smithy_client_dist_es/* expectString */.lK,
        QueueInfo: (_) => de_ContactSearchSummaryQueueInfo(_, context),
        ScheduledTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_ContactSearchSummaryAgentInfo = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ConnectedToAgentTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_ContactSearchSummaryQueueInfo = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        EnqueueTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_CreateCaseActionDefinition = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Fields: (_) => de_FieldValues(_, context),
        TemplateId: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_Credentials = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AccessToken: smithy_client_dist_es/* expectString */.lK,
        AccessTokenExpiration: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        RefreshToken: smithy_client_dist_es/* expectString */.lK,
        RefreshTokenExpiration: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_CurrentMetricData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Metric: smithy_client_dist_es/* _json */.Ss,
        Value: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_CurrentMetricDataCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CurrentMetricData(entry, context);
    });
    return retVal;
};
const de_CurrentMetricResult = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Collections: (_) => de_CurrentMetricDataCollections(_, context),
        Dimensions: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_CurrentMetricResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CurrentMetricResult(entry, context);
    });
    return retVal;
};
const de_CustomerQualityMetrics = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Audio: (_) => de_AudioQualityMetricsInfo(_, context),
    });
};
const de_CustomerVoiceActivity = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        GreetingEndTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        GreetingStartTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_Evaluation = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Answers: (_) => de_EvaluationAnswersOutputMap(_, context),
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        EvaluationArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationId: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Metadata: (_) => de_EvaluationMetadata(_, context),
        Notes: smithy_client_dist_es/* _json */.Ss,
        Scores: (_) => de_EvaluationScoresMap(_, context),
        Status: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_EvaluationAnswerData = (output, context) => {
    if ((0,smithy_client_dist_es/* expectBoolean */.ak)(output.NotApplicable) !== undefined) {
        return { NotApplicable: (0,smithy_client_dist_es/* expectBoolean */.ak)(output.NotApplicable) };
    }
    if ((0,smithy_client_dist_es/* limitedParseDouble */.JW)(output.NumericValue) !== undefined) {
        return { NumericValue: (0,smithy_client_dist_es/* limitedParseDouble */.JW)(output.NumericValue) };
    }
    if ((0,smithy_client_dist_es/* expectString */.lK)(output.StringValue) !== undefined) {
        return { StringValue: (0,smithy_client_dist_es/* expectString */.lK)(output.StringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_EvaluationAnswerOutput = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        SystemSuggestedValue: (_) => de_EvaluationAnswerData((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
        Value: (_) => de_EvaluationAnswerData((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
    });
};
const de_EvaluationAnswersOutputMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_EvaluationAnswerOutput(value, context);
        return acc;
    }, {});
};
const de_EvaluationForm = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        CreatedBy: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Description: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        LastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Locked: smithy_client_dist_es/* expectBoolean */.ak,
        ScoringStrategy: smithy_client_dist_es/* _json */.Ss,
        Status: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
        Title: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_EvaluationFormContent = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Description: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        ScoringStrategy: smithy_client_dist_es/* _json */.Ss,
        Title: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_EvaluationFormItem = (output, context) => {
    if (output.Question != null) {
        return {
            Question: de_EvaluationFormQuestion(output.Question, context),
        };
    }
    if (output.Section != null) {
        return {
            Section: de_EvaluationFormSection(output.Section, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_EvaluationFormItemsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormItem((0,awsExpectUnion/* awsExpectUnion */.M)(entry), context);
    });
    return retVal;
};
const de_EvaluationFormQuestion = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Instructions: smithy_client_dist_es/* expectString */.lK,
        NotApplicableEnabled: smithy_client_dist_es/* expectBoolean */.ak,
        QuestionType: smithy_client_dist_es/* expectString */.lK,
        QuestionTypeProperties: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        RefId: smithy_client_dist_es/* expectString */.lK,
        Title: smithy_client_dist_es/* expectString */.lK,
        Weight: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_EvaluationFormSection = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Instructions: smithy_client_dist_es/* expectString */.lK,
        Items: (_) => de_EvaluationFormItemsList(_, context),
        RefId: smithy_client_dist_es/* expectString */.lK,
        Title: smithy_client_dist_es/* expectString */.lK,
        Weight: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_EvaluationFormSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ActiveVersion: smithy_client_dist_es/* expectInt32 */.ET,
        CreatedBy: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        LastActivatedBy: smithy_client_dist_es/* expectString */.lK,
        LastActivatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LatestVersion: smithy_client_dist_es/* expectInt32 */.ET,
        Title: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_EvaluationFormSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationFormVersionSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        CreatedBy: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        EvaluationFormArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormVersion: smithy_client_dist_es/* expectInt32 */.ET,
        LastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Locked: smithy_client_dist_es/* expectBoolean */.ak,
        Status: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_EvaluationFormVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationFormVersionSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationMetadata = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ContactAgentId: smithy_client_dist_es/* expectString */.lK,
        ContactId: smithy_client_dist_es/* expectString */.lK,
        EvaluatorArn: smithy_client_dist_es/* expectString */.lK,
        Score: (_) => de_EvaluationScore(_, context),
    });
};
const de_EvaluationScore = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AutomaticFail: smithy_client_dist_es/* expectBoolean */.ak,
        NotApplicable: smithy_client_dist_es/* expectBoolean */.ak,
        Percentage: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_EvaluationScoresMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_EvaluationScore(value, context);
        return acc;
    }, {});
};
const de_EvaluationSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        EvaluationArn: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormId: smithy_client_dist_es/* expectString */.lK,
        EvaluationFormTitle: smithy_client_dist_es/* expectString */.lK,
        EvaluationId: smithy_client_dist_es/* expectString */.lK,
        EvaluatorArn: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Score: (_) => de_EvaluationScore(_, context),
        Status: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_EvaluationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationSummary(entry, context);
    });
    return retVal;
};
const de_Expiry = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        DurationInSeconds: smithy_client_dist_es/* expectInt32 */.ET,
        ExpiryTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_Expression = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AndExpression: (_) => de_Expressions(_, context),
        AttributeCondition: (_) => de_AttributeCondition(_, context),
        OrExpression: (_) => de_Expressions(_, context),
    });
};
const de_Expressions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Expression(entry, context);
    });
    return retVal;
};
const de_FieldValue = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Id: smithy_client_dist_es/* expectString */.lK,
        Value: (_) => de_FieldValueUnion(_, context),
    });
};
const de_FieldValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FieldValue(entry, context);
    });
    return retVal;
};
const de_FieldValueUnion = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        BooleanValue: smithy_client_dist_es/* expectBoolean */.ak,
        DoubleValue: smithy_client_dist_es/* limitedParseDouble */.JW,
        EmptyValue: smithy_client_dist_es/* _json */.Ss,
        StringValue: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HierarchyGroup = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        HierarchyPath: (_) => de_HierarchyPath(_, context),
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        LevelId: smithy_client_dist_es/* expectString */.lK,
        Name: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_HierarchyGroupSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HierarchyGroupSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HierarchyGroupSummary(entry, context);
    });
    return retVal;
};
const de_HierarchyLevel = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HierarchyPath = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        LevelFive: (_) => de_HierarchyGroupSummary(_, context),
        LevelFour: (_) => de_HierarchyGroupSummary(_, context),
        LevelOne: (_) => de_HierarchyGroupSummary(_, context),
        LevelThree: (_) => de_HierarchyGroupSummary(_, context),
        LevelTwo: (_) => de_HierarchyGroupSummary(_, context),
    });
};
const de_HierarchyStructure = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        LevelFive: (_) => de_HierarchyLevel(_, context),
        LevelFour: (_) => de_HierarchyLevel(_, context),
        LevelOne: (_) => de_HierarchyLevel(_, context),
        LevelThree: (_) => de_HierarchyLevel(_, context),
        LevelTwo: (_) => de_HierarchyLevel(_, context),
    });
};
const de_HistoricalMetric = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Name: smithy_client_dist_es/* expectString */.lK,
        Statistic: smithy_client_dist_es/* expectString */.lK,
        Threshold: (_) => de_Threshold(_, context),
        Unit: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HistoricalMetricData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Metric: (_) => de_HistoricalMetric(_, context),
        Value: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_HistoricalMetricDataCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoricalMetricData(entry, context);
    });
    return retVal;
};
const de_HistoricalMetricResult = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Collections: (_) => de_HistoricalMetricDataCollections(_, context),
        Dimensions: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_HistoricalMetricResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoricalMetricResult(entry, context);
    });
    return retVal;
};
const de_HoursOfOperation = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Config: smithy_client_dist_es/* _json */.Ss,
        Description: smithy_client_dist_es/* expectString */.lK,
        HoursOfOperationArn: smithy_client_dist_es/* expectString */.lK,
        HoursOfOperationId: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
        TimeZone: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HoursOfOperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HoursOfOperation(entry, context);
    });
    return retVal;
};
const de_HoursOfOperationSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_HoursOfOperationSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HoursOfOperationSummary(entry, context);
    });
    return retVal;
};
const de_Instance = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
        IdentityManagementType: smithy_client_dist_es/* expectString */.lK,
        InboundCallsEnabled: smithy_client_dist_es/* expectBoolean */.ak,
        InstanceAccessUrl: smithy_client_dist_es/* expectString */.lK,
        InstanceAlias: smithy_client_dist_es/* expectString */.lK,
        InstanceStatus: smithy_client_dist_es/* expectString */.lK,
        OutboundCallsEnabled: smithy_client_dist_es/* expectBoolean */.ak,
        ServiceRole: smithy_client_dist_es/* expectString */.lK,
        StatusReason: smithy_client_dist_es/* _json */.Ss,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_InstanceSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
        IdentityManagementType: smithy_client_dist_es/* expectString */.lK,
        InboundCallsEnabled: smithy_client_dist_es/* expectBoolean */.ak,
        InstanceAccessUrl: smithy_client_dist_es/* expectString */.lK,
        InstanceAlias: smithy_client_dist_es/* expectString */.lK,
        InstanceStatus: smithy_client_dist_es/* expectString */.lK,
        OutboundCallsEnabled: smithy_client_dist_es/* expectBoolean */.ak,
        ServiceRole: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_InstanceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceSummary(entry, context);
    });
    return retVal;
};
const de_MetricDataCollectionsV2 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDataV2(entry, context);
    });
    return retVal;
};
const de_MetricDataV2 = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Metric: (_) => de_MetricV2(_, context),
        Value: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_MetricInterval = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        EndTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Interval: smithy_client_dist_es/* expectString */.lK,
        StartTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_MetricResultsV2 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricResultV2(entry, context);
    });
    return retVal;
};
const de_MetricResultV2 = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Collections: (_) => de_MetricDataCollectionsV2(_, context),
        Dimensions: smithy_client_dist_es/* _json */.Ss,
        MetricInterval: (_) => de_MetricInterval(_, context),
    });
};
const de_MetricV2 = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        MetricFilters: smithy_client_dist_es/* _json */.Ss,
        Name: smithy_client_dist_es/* expectString */.lK,
        Threshold: (_) => de_ThresholdCollections(_, context),
    });
};
const de_PredefinedAttribute = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Values: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
    });
};
const de_PredefinedAttributeSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredefinedAttribute(entry, context);
    });
    return retVal;
};
const de_PredefinedAttributeSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_PredefinedAttributeSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PredefinedAttributeSummary(entry, context);
    });
    return retVal;
};
const de_Prompt = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Description: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        PromptARN: smithy_client_dist_es/* expectString */.lK,
        PromptId: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_PromptList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Prompt(entry, context);
    });
    return retVal;
};
const de_PromptSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_PromptSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PromptSummary(entry, context);
    });
    return retVal;
};
const de_QualityMetrics = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Agent: (_) => de_AgentQualityMetrics(_, context),
        Customer: (_) => de_CustomerQualityMetrics(_, context),
    });
};
const de_Queue = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Description: smithy_client_dist_es/* expectString */.lK,
        HoursOfOperationId: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        MaxContacts: smithy_client_dist_es/* expectInt32 */.ET,
        Name: smithy_client_dist_es/* expectString */.lK,
        OutboundCallerConfig: smithy_client_dist_es/* _json */.Ss,
        QueueArn: smithy_client_dist_es/* expectString */.lK,
        QueueId: smithy_client_dist_es/* expectString */.lK,
        Status: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QueueInfo = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        EnqueueTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Id: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_QueueSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry, context);
    });
    return retVal;
};
const de_QueueSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        QueueType: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_QueueSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueueSummary(entry, context);
    });
    return retVal;
};
const de_QuickConnect = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Description: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        QuickConnectARN: smithy_client_dist_es/* expectString */.lK,
        QuickConnectConfig: smithy_client_dist_es/* _json */.Ss,
        QuickConnectId: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QuickConnectSearchSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickConnect(entry, context);
    });
    return retVal;
};
const de_QuickConnectSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        QuickConnectType: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_QuickConnectSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickConnectSummary(entry, context);
    });
    return retVal;
};
const de_RealtimeContactAnalysisSegment = (output, context) => {
    if (output.Attachments != null) {
        return {
            Attachments: de_RealTimeContactAnalysisSegmentAttachments(output.Attachments, context),
        };
    }
    if (output.Categories != null) {
        return {
            Categories: (0,smithy_client_dist_es/* _json */.Ss)(output.Categories),
        };
    }
    if (output.Event != null) {
        return {
            Event: de_RealTimeContactAnalysisSegmentEvent(output.Event, context),
        };
    }
    if (output.Issues != null) {
        return {
            Issues: (0,smithy_client_dist_es/* _json */.Ss)(output.Issues),
        };
    }
    if (output.PostContactSummary != null) {
        return {
            PostContactSummary: (0,smithy_client_dist_es/* _json */.Ss)(output.PostContactSummary),
        };
    }
    if (output.Transcript != null) {
        return {
            Transcript: de_RealTimeContactAnalysisSegmentTranscript(output.Transcript, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_RealTimeContactAnalysisSegmentAttachments = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Attachments: smithy_client_dist_es/* _json */.Ss,
        DisplayName: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
        ParticipantRole: smithy_client_dist_es/* expectString */.lK,
        Time: (_) => de_RealTimeContactAnalysisTimeData((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
    });
};
const de_RealTimeContactAnalysisSegmentEvent = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        DisplayName: smithy_client_dist_es/* expectString */.lK,
        EventType: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
        ParticipantRole: smithy_client_dist_es/* expectString */.lK,
        Time: (_) => de_RealTimeContactAnalysisTimeData((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
    });
};
const de_RealtimeContactAnalysisSegments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RealtimeContactAnalysisSegment((0,awsExpectUnion/* awsExpectUnion */.M)(entry), context);
    });
    return retVal;
};
const de_RealTimeContactAnalysisSegmentTranscript = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Content: smithy_client_dist_es/* expectString */.lK,
        ContentType: smithy_client_dist_es/* expectString */.lK,
        DisplayName: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        ParticipantId: smithy_client_dist_es/* expectString */.lK,
        ParticipantRole: smithy_client_dist_es/* expectString */.lK,
        Redaction: smithy_client_dist_es/* _json */.Ss,
        Sentiment: smithy_client_dist_es/* expectString */.lK,
        Time: (_) => de_RealTimeContactAnalysisTimeData((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
    });
};
const de_RealTimeContactAnalysisTimeData = (output, context) => {
    if (output.AbsoluteTime != null) {
        return {
            AbsoluteTime: (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseRfc3339DateTimeWithOffset */.t_)(output.AbsoluteTime)),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_RoutingCriteria = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ActivationTimestamp: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Index: smithy_client_dist_es/* expectInt32 */.ET,
        Steps: (_) => de_Steps(_, context),
    });
};
const de_RoutingProfile = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AgentAvailabilityTimer: smithy_client_dist_es/* expectString */.lK,
        AssociatedQueueIds: smithy_client_dist_es/* _json */.Ss,
        DefaultOutboundQueueId: smithy_client_dist_es/* expectString */.lK,
        Description: smithy_client_dist_es/* expectString */.lK,
        InstanceId: smithy_client_dist_es/* expectString */.lK,
        IsDefault: smithy_client_dist_es/* expectBoolean */.ak,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        MediaConcurrencies: smithy_client_dist_es/* _json */.Ss,
        Name: smithy_client_dist_es/* expectString */.lK,
        NumberOfAssociatedQueues: smithy_client_dist_es/* expectLong */.Yy,
        NumberOfAssociatedUsers: smithy_client_dist_es/* expectLong */.Yy,
        RoutingProfileArn: smithy_client_dist_es/* expectString */.lK,
        RoutingProfileId: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_RoutingProfileList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoutingProfile(entry, context);
    });
    return retVal;
};
const de_RoutingProfileSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_RoutingProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RoutingProfileSummary(entry, context);
    });
    return retVal;
};
const de_Rule = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Actions: (_) => de_RuleActions(_, context),
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Function: smithy_client_dist_es/* expectString */.lK,
        LastUpdatedBy: smithy_client_dist_es/* expectString */.lK,
        LastUpdatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        PublishStatus: smithy_client_dist_es/* expectString */.lK,
        RuleArn: smithy_client_dist_es/* expectString */.lK,
        RuleId: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
        TriggerEventSource: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_RuleAction = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ActionType: smithy_client_dist_es/* expectString */.lK,
        AssignContactCategoryAction: smithy_client_dist_es/* _json */.Ss,
        CreateCaseAction: (_) => de_CreateCaseActionDefinition(_, context),
        EndAssociatedTasksAction: smithy_client_dist_es/* _json */.Ss,
        EventBridgeAction: smithy_client_dist_es/* _json */.Ss,
        SendNotificationAction: smithy_client_dist_es/* _json */.Ss,
        SubmitAutoEvaluationAction: smithy_client_dist_es/* _json */.Ss,
        TaskAction: smithy_client_dist_es/* _json */.Ss,
        UpdateCaseAction: (_) => de_UpdateCaseActionDefinition(_, context),
    });
};
const de_RuleActions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleAction(entry, context);
    });
    return retVal;
};
const de_RuleSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ActionSummaries: smithy_client_dist_es/* _json */.Ss,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        EventSourceName: smithy_client_dist_es/* expectString */.lK,
        LastUpdatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        PublishStatus: smithy_client_dist_es/* expectString */.lK,
        RuleArn: smithy_client_dist_es/* expectString */.lK,
        RuleId: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_RuleSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleSummary(entry, context);
    });
    return retVal;
};
const de_SecurityKey = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AssociationId: smithy_client_dist_es/* expectString */.lK,
        CreationTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Key: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_SecurityKeysList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityKey(entry, context);
    });
    return retVal;
};
const de_SecurityProfile = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AllowedAccessControlHierarchyGroupId: smithy_client_dist_es/* expectString */.lK,
        AllowedAccessControlTags: smithy_client_dist_es/* _json */.Ss,
        Arn: smithy_client_dist_es/* expectString */.lK,
        Description: smithy_client_dist_es/* expectString */.lK,
        HierarchyRestrictedResources: smithy_client_dist_es/* _json */.Ss,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        OrganizationResourceId: smithy_client_dist_es/* expectString */.lK,
        SecurityProfileName: smithy_client_dist_es/* expectString */.lK,
        TagRestrictedResources: smithy_client_dist_es/* _json */.Ss,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_SecurityProfileSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_SecurityProfileSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityProfileSummary(entry, context);
    });
    return retVal;
};
const de_Step = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Expiry: (_) => de_Expiry(_, context),
        Expression: (_) => de_Expression(_, context),
        Status: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_Steps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Step(entry, context);
    });
    return retVal;
};
const de_TaskTemplateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TaskTemplateMetadata(entry, context);
    });
    return retVal;
};
const de_TaskTemplateMetadata = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Description: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Status: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_Threshold = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Comparison: smithy_client_dist_es/* expectString */.lK,
        ThresholdValue: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_ThresholdCollections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThresholdV2(entry, context);
    });
    return retVal;
};
const de_ThresholdV2 = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Comparison: smithy_client_dist_es/* expectString */.lK,
        ThresholdValue: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_UpdateCaseActionDefinition = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Fields: (_) => de_FieldValues(_, context),
    });
};
const de_User = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        DirectoryUserId: smithy_client_dist_es/* expectString */.lK,
        HierarchyGroupId: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        IdentityInfo: smithy_client_dist_es/* _json */.Ss,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        PhoneConfig: smithy_client_dist_es/* _json */.Ss,
        RoutingProfileId: smithy_client_dist_es/* expectString */.lK,
        SecurityProfileIds: smithy_client_dist_es/* _json */.Ss,
        Tags: smithy_client_dist_es/* _json */.Ss,
        Username: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_UserData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        ActiveSlotsByChannel: smithy_client_dist_es/* _json */.Ss,
        AvailableSlotsByChannel: smithy_client_dist_es/* _json */.Ss,
        Contacts: (_) => de_AgentContactReferenceList(_, context),
        HierarchyPath: smithy_client_dist_es/* _json */.Ss,
        MaxSlotsByChannel: smithy_client_dist_es/* _json */.Ss,
        NextStatus: smithy_client_dist_es/* expectString */.lK,
        RoutingProfile: smithy_client_dist_es/* _json */.Ss,
        Status: (_) => de_AgentStatusReference(_, context),
        User: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_UserDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserData(entry, context);
    });
    return retVal;
};
const de_UserHierarchyGroupList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HierarchyGroup(entry, context);
    });
    return retVal;
};
const de_UserProficiency = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        AttributeName: smithy_client_dist_es/* expectString */.lK,
        AttributeValue: smithy_client_dist_es/* expectString */.lK,
        Level: smithy_client_dist_es/* limitedParseFloat32 */.Zx,
    });
};
const de_UserProficiencyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserProficiency(entry, context);
    });
    return retVal;
};
const de_UserSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedRegion: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Username: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_UserSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserSummary(entry, context);
    });
    return retVal;
};
const de_View = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Content: smithy_client_dist_es/* _json */.Ss,
        CreatedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Description: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        Status: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
        Type: smithy_client_dist_es/* expectString */.lK,
        Version: smithy_client_dist_es/* expectInt32 */.ET,
        VersionDescription: smithy_client_dist_es/* expectString */.lK,
        ViewContentSha256: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_Vocabulary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        Content: smithy_client_dist_es/* expectString */.lK,
        FailureReason: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LanguageCode: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        State: smithy_client_dist_es/* expectString */.lK,
        Tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_VocabularySummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        Arn: smithy_client_dist_es/* expectString */.lK,
        FailureReason: smithy_client_dist_es/* expectString */.lK,
        Id: smithy_client_dist_es/* expectString */.lK,
        LanguageCode: smithy_client_dist_es/* expectString */.lK,
        LastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        Name: smithy_client_dist_es/* expectString */.lK,
        State: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_VocabularySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VocabularySummary(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _ARA = "AssociatedResourceArn";
const _AST = "AgentStatusTypes";
const _BN = "BotName";
const _CFMS = "ContactFlowModuleState";
const _CFT = "ContactFlowTypes";
const _CI = "ContactId";
const _CT = "ClientToken";
const _DSI = "DataSetId";
const _EFV = "EvaluationFormVersion";
const _ESN = "EventSourceName";
const _FA = "FunctionArn";
const _IA = "IntegrationArn";
const _II = "InstanceId";
const _IT = "IntegrationType";
const _LR = "LexRegion";
const _LV = "LexVersion";
const _MR = "MaxResults";
const _N = "Name";
const _NT = "NextToken";
const _O = "Origin";
const _PNCC = "PhoneNumberCountryCodes";
const _PNT = "PhoneNumberTypes";
const _PS = "PublishStatus";
const _QCT = "QuickConnectTypes";
const _QT = "QueueTypes";
const _RT = "ResourceType";
const _RTe = "ReferenceTypes";
const _S = "Status";
const _SV = "SnapshotVersion";
const _T = "Type";
const _TK = "TagKeys";
const _UEIS = "UrlExpiryInSeconds";
const _UI = "UserId";
const _aRA = "associatedResourceArn";
const _bN = "botName";
const _cFT = "contactFlowTypes";
const _cI = "contactId";
const _cT = "clientToken";
const _eSN = "eventSourceName";
const _fA = "functionArn";
const _iA = "integrationArn";
const _iI = "instanceId";
const _iT = "integrationType";
const _lR = "lexRegion";
const _lV = "lexVersion";
const _mR = "maxResults";
const _n = "name";
const _nT = "nextToken";
const _o = "origin";
const _pNCC = "phoneNumberCountryCodes";
const _pNT = "phoneNumberTypes";
const _pS = "publishStatus";
const _qT = "queueTypes";
const _rT = "resourceType";
const _rTe = "referenceTypes";
const _s = "state";
const _sV = "snapshotVersion";
const _st = "status";
const _t = "type";
const _tK = "tagKeys";
const _uEIS = "urlExpiryInSeconds";
const _v = "version";

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ActivateEvaluationFormCommand.js






class ActivateEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ActivateEvaluationForm", {})
    .n("ConnectClient", "ActivateEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_ActivateEvaluationFormCommand)
    .de(de_ActivateEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateAnalyticsDataSetCommand.js






class AssociateAnalyticsDataSetCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateAnalyticsDataSet", {})
    .n("ConnectClient", "AssociateAnalyticsDataSetCommand")
    .f(void 0, void 0)
    .ser(se_AssociateAnalyticsDataSetCommand)
    .de(de_AssociateAnalyticsDataSetCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateApprovedOriginCommand.js






class AssociateApprovedOriginCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateApprovedOrigin", {})
    .n("ConnectClient", "AssociateApprovedOriginCommand")
    .f(void 0, void 0)
    .ser(se_AssociateApprovedOriginCommand)
    .de(de_AssociateApprovedOriginCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateBotCommand.js






class AssociateBotCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateBot", {})
    .n("ConnectClient", "AssociateBotCommand")
    .f(void 0, void 0)
    .ser(se_AssociateBotCommand)
    .de(de_AssociateBotCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateDefaultVocabularyCommand.js






class AssociateDefaultVocabularyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateDefaultVocabulary", {})
    .n("ConnectClient", "AssociateDefaultVocabularyCommand")
    .f(void 0, void 0)
    .ser(se_AssociateDefaultVocabularyCommand)
    .de(de_AssociateDefaultVocabularyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateFlowCommand.js






class AssociateFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateFlow", {})
    .n("ConnectClient", "AssociateFlowCommand")
    .f(void 0, void 0)
    .ser(se_AssociateFlowCommand)
    .de(de_AssociateFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateInstanceStorageConfigCommand.js






class AssociateInstanceStorageConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateInstanceStorageConfig", {})
    .n("ConnectClient", "AssociateInstanceStorageConfigCommand")
    .f(void 0, void 0)
    .ser(se_AssociateInstanceStorageConfigCommand)
    .de(de_AssociateInstanceStorageConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateLambdaFunctionCommand.js






class AssociateLambdaFunctionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateLambdaFunction", {})
    .n("ConnectClient", "AssociateLambdaFunctionCommand")
    .f(void 0, void 0)
    .ser(se_AssociateLambdaFunctionCommand)
    .de(de_AssociateLambdaFunctionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateLexBotCommand.js






class AssociateLexBotCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateLexBot", {})
    .n("ConnectClient", "AssociateLexBotCommand")
    .f(void 0, void 0)
    .ser(se_AssociateLexBotCommand)
    .de(de_AssociateLexBotCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociatePhoneNumberContactFlowCommand.js






class AssociatePhoneNumberContactFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociatePhoneNumberContactFlow", {})
    .n("ConnectClient", "AssociatePhoneNumberContactFlowCommand")
    .f(void 0, void 0)
    .ser(se_AssociatePhoneNumberContactFlowCommand)
    .de(de_AssociatePhoneNumberContactFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateQueueQuickConnectsCommand.js






class AssociateQueueQuickConnectsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateQueueQuickConnects", {})
    .n("ConnectClient", "AssociateQueueQuickConnectsCommand")
    .f(void 0, void 0)
    .ser(se_AssociateQueueQuickConnectsCommand)
    .de(de_AssociateQueueQuickConnectsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateRoutingProfileQueuesCommand.js






class AssociateRoutingProfileQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateRoutingProfileQueues", {})
    .n("ConnectClient", "AssociateRoutingProfileQueuesCommand")
    .f(void 0, void 0)
    .ser(se_AssociateRoutingProfileQueuesCommand)
    .de(de_AssociateRoutingProfileQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateSecurityKeyCommand.js






class AssociateSecurityKeyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateSecurityKey", {})
    .n("ConnectClient", "AssociateSecurityKeyCommand")
    .f(void 0, void 0)
    .ser(se_AssociateSecurityKeyCommand)
    .de(de_AssociateSecurityKeyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateTrafficDistributionGroupUserCommand.js






class AssociateTrafficDistributionGroupUserCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateTrafficDistributionGroupUser", {})
    .n("ConnectClient", "AssociateTrafficDistributionGroupUserCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTrafficDistributionGroupUserCommand)
    .de(de_AssociateTrafficDistributionGroupUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/AssociateUserProficienciesCommand.js






class AssociateUserProficienciesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "AssociateUserProficiencies", {})
    .n("ConnectClient", "AssociateUserProficienciesCommand")
    .f(void 0, void 0)
    .ser(se_AssociateUserProficienciesCommand)
    .de(de_AssociateUserProficienciesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/BatchAssociateAnalyticsDataSetCommand.js






class BatchAssociateAnalyticsDataSetCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "BatchAssociateAnalyticsDataSet", {})
    .n("ConnectClient", "BatchAssociateAnalyticsDataSetCommand")
    .f(void 0, void 0)
    .ser(se_BatchAssociateAnalyticsDataSetCommand)
    .de(de_BatchAssociateAnalyticsDataSetCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/BatchDisassociateAnalyticsDataSetCommand.js






class BatchDisassociateAnalyticsDataSetCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "BatchDisassociateAnalyticsDataSet", {})
    .n("ConnectClient", "BatchDisassociateAnalyticsDataSetCommand")
    .f(void 0, void 0)
    .ser(se_BatchDisassociateAnalyticsDataSetCommand)
    .de(de_BatchDisassociateAnalyticsDataSetCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/BatchGetAttachedFileMetadataCommand.js






class BatchGetAttachedFileMetadataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "BatchGetAttachedFileMetadata", {})
    .n("ConnectClient", "BatchGetAttachedFileMetadataCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetAttachedFileMetadataCommand)
    .de(de_BatchGetAttachedFileMetadataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/BatchGetFlowAssociationCommand.js






class BatchGetFlowAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "BatchGetFlowAssociation", {})
    .n("ConnectClient", "BatchGetFlowAssociationCommand")
    .f(void 0, void 0)
    .ser(se_BatchGetFlowAssociationCommand)
    .de(de_BatchGetFlowAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/BatchPutContactCommand.js






class BatchPutContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "BatchPutContact", {})
    .n("ConnectClient", "BatchPutContactCommand")
    .f(void 0, void 0)
    .ser(se_BatchPutContactCommand)
    .de(de_BatchPutContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ClaimPhoneNumberCommand.js






class ClaimPhoneNumberCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ClaimPhoneNumber", {})
    .n("ConnectClient", "ClaimPhoneNumberCommand")
    .f(void 0, void 0)
    .ser(se_ClaimPhoneNumberCommand)
    .de(de_ClaimPhoneNumberCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CompleteAttachedFileUploadCommand.js






class CompleteAttachedFileUploadCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CompleteAttachedFileUpload", {})
    .n("ConnectClient", "CompleteAttachedFileUploadCommand")
    .f(void 0, void 0)
    .ser(se_CompleteAttachedFileUploadCommand)
    .de(de_CompleteAttachedFileUploadCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateAgentStatusCommand.js






class CreateAgentStatusCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateAgentStatus", {})
    .n("ConnectClient", "CreateAgentStatusCommand")
    .f(void 0, void 0)
    .ser(se_CreateAgentStatusCommand)
    .de(de_CreateAgentStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateContactFlowCommand.js






class CreateContactFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateContactFlow", {})
    .n("ConnectClient", "CreateContactFlowCommand")
    .f(void 0, void 0)
    .ser(se_CreateContactFlowCommand)
    .de(de_CreateContactFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateContactFlowModuleCommand.js






class CreateContactFlowModuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateContactFlowModule", {})
    .n("ConnectClient", "CreateContactFlowModuleCommand")
    .f(void 0, void 0)
    .ser(se_CreateContactFlowModuleCommand)
    .de(de_CreateContactFlowModuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateEvaluationFormCommand.js






class CreateEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateEvaluationForm", {})
    .n("ConnectClient", "CreateEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_CreateEvaluationFormCommand)
    .de(de_CreateEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateHoursOfOperationCommand.js






class CreateHoursOfOperationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateHoursOfOperation", {})
    .n("ConnectClient", "CreateHoursOfOperationCommand")
    .f(void 0, void 0)
    .ser(se_CreateHoursOfOperationCommand)
    .de(de_CreateHoursOfOperationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateInstanceCommand.js







class CreateInstanceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateInstance", {})
    .n("ConnectClient", "CreateInstanceCommand")
    .f(CreateInstanceRequestFilterSensitiveLog, void 0)
    .ser(se_CreateInstanceCommand)
    .de(de_CreateInstanceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateIntegrationAssociationCommand.js






class CreateIntegrationAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateIntegrationAssociation", {})
    .n("ConnectClient", "CreateIntegrationAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateIntegrationAssociationCommand)
    .de(de_CreateIntegrationAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateParticipantCommand.js






class CreateParticipantCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateParticipant", {})
    .n("ConnectClient", "CreateParticipantCommand")
    .f(void 0, void 0)
    .ser(se_CreateParticipantCommand)
    .de(de_CreateParticipantCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreatePersistentContactAssociationCommand.js






class CreatePersistentContactAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreatePersistentContactAssociation", {})
    .n("ConnectClient", "CreatePersistentContactAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreatePersistentContactAssociationCommand)
    .de(de_CreatePersistentContactAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreatePredefinedAttributeCommand.js






class CreatePredefinedAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreatePredefinedAttribute", {})
    .n("ConnectClient", "CreatePredefinedAttributeCommand")
    .f(void 0, void 0)
    .ser(se_CreatePredefinedAttributeCommand)
    .de(de_CreatePredefinedAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreatePromptCommand.js






class CreatePromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreatePrompt", {})
    .n("ConnectClient", "CreatePromptCommand")
    .f(void 0, void 0)
    .ser(se_CreatePromptCommand)
    .de(de_CreatePromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateQueueCommand.js






class CreateQueueCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateQueue", {})
    .n("ConnectClient", "CreateQueueCommand")
    .f(void 0, void 0)
    .ser(se_CreateQueueCommand)
    .de(de_CreateQueueCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateQuickConnectCommand.js






class CreateQuickConnectCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateQuickConnect", {})
    .n("ConnectClient", "CreateQuickConnectCommand")
    .f(void 0, void 0)
    .ser(se_CreateQuickConnectCommand)
    .de(de_CreateQuickConnectCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateRoutingProfileCommand.js






class CreateRoutingProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateRoutingProfile", {})
    .n("ConnectClient", "CreateRoutingProfileCommand")
    .f(void 0, void 0)
    .ser(se_CreateRoutingProfileCommand)
    .de(de_CreateRoutingProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateRuleCommand.js






class CreateRuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateRule", {})
    .n("ConnectClient", "CreateRuleCommand")
    .f(void 0, void 0)
    .ser(se_CreateRuleCommand)
    .de(de_CreateRuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateSecurityProfileCommand.js






class CreateSecurityProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateSecurityProfile", {})
    .n("ConnectClient", "CreateSecurityProfileCommand")
    .f(void 0, void 0)
    .ser(se_CreateSecurityProfileCommand)
    .de(de_CreateSecurityProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateTaskTemplateCommand.js






class CreateTaskTemplateCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateTaskTemplate", {})
    .n("ConnectClient", "CreateTaskTemplateCommand")
    .f(void 0, void 0)
    .ser(se_CreateTaskTemplateCommand)
    .de(de_CreateTaskTemplateCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateTrafficDistributionGroupCommand.js






class CreateTrafficDistributionGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateTrafficDistributionGroup", {})
    .n("ConnectClient", "CreateTrafficDistributionGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficDistributionGroupCommand)
    .de(de_CreateTrafficDistributionGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateUseCaseCommand.js






class CreateUseCaseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateUseCase", {})
    .n("ConnectClient", "CreateUseCaseCommand")
    .f(void 0, void 0)
    .ser(se_CreateUseCaseCommand)
    .de(de_CreateUseCaseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateUserCommand.js







class CreateUserCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateUser", {})
    .n("ConnectClient", "CreateUserCommand")
    .f(CreateUserRequestFilterSensitiveLog, void 0)
    .ser(se_CreateUserCommand)
    .de(de_CreateUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateUserHierarchyGroupCommand.js






class CreateUserHierarchyGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateUserHierarchyGroup", {})
    .n("ConnectClient", "CreateUserHierarchyGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserHierarchyGroupCommand)
    .de(de_CreateUserHierarchyGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateViewCommand.js







class CreateViewCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateView", {})
    .n("ConnectClient", "CreateViewCommand")
    .f(CreateViewRequestFilterSensitiveLog, CreateViewResponseFilterSensitiveLog)
    .ser(se_CreateViewCommand)
    .de(de_CreateViewCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateViewVersionCommand.js







class CreateViewVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateViewVersion", {})
    .n("ConnectClient", "CreateViewVersionCommand")
    .f(void 0, CreateViewVersionResponseFilterSensitiveLog)
    .ser(se_CreateViewVersionCommand)
    .de(de_CreateViewVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/CreateVocabularyCommand.js






class CreateVocabularyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "CreateVocabulary", {})
    .n("ConnectClient", "CreateVocabularyCommand")
    .f(void 0, void 0)
    .ser(se_CreateVocabularyCommand)
    .de(de_CreateVocabularyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeactivateEvaluationFormCommand.js






class DeactivateEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeactivateEvaluationForm", {})
    .n("ConnectClient", "DeactivateEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_DeactivateEvaluationFormCommand)
    .de(de_DeactivateEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteAttachedFileCommand.js






class DeleteAttachedFileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteAttachedFile", {})
    .n("ConnectClient", "DeleteAttachedFileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAttachedFileCommand)
    .de(de_DeleteAttachedFileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteContactEvaluationCommand.js






class DeleteContactEvaluationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteContactEvaluation", {})
    .n("ConnectClient", "DeleteContactEvaluationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContactEvaluationCommand)
    .de(de_DeleteContactEvaluationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteContactFlowCommand.js






class DeleteContactFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteContactFlow", {})
    .n("ConnectClient", "DeleteContactFlowCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContactFlowCommand)
    .de(de_DeleteContactFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteContactFlowModuleCommand.js






class DeleteContactFlowModuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteContactFlowModule", {})
    .n("ConnectClient", "DeleteContactFlowModuleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContactFlowModuleCommand)
    .de(de_DeleteContactFlowModuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteEvaluationFormCommand.js






class DeleteEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteEvaluationForm", {})
    .n("ConnectClient", "DeleteEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEvaluationFormCommand)
    .de(de_DeleteEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteHoursOfOperationCommand.js






class DeleteHoursOfOperationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteHoursOfOperation", {})
    .n("ConnectClient", "DeleteHoursOfOperationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHoursOfOperationCommand)
    .de(de_DeleteHoursOfOperationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteInstanceCommand.js






class DeleteInstanceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteInstance", {})
    .n("ConnectClient", "DeleteInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInstanceCommand)
    .de(de_DeleteInstanceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteIntegrationAssociationCommand.js






class DeleteIntegrationAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteIntegrationAssociation", {})
    .n("ConnectClient", "DeleteIntegrationAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIntegrationAssociationCommand)
    .de(de_DeleteIntegrationAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeletePredefinedAttributeCommand.js






class DeletePredefinedAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeletePredefinedAttribute", {})
    .n("ConnectClient", "DeletePredefinedAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DeletePredefinedAttributeCommand)
    .de(de_DeletePredefinedAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeletePromptCommand.js






class DeletePromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeletePrompt", {})
    .n("ConnectClient", "DeletePromptCommand")
    .f(void 0, void 0)
    .ser(se_DeletePromptCommand)
    .de(de_DeletePromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteQueueCommand.js






class DeleteQueueCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteQueue", {})
    .n("ConnectClient", "DeleteQueueCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQueueCommand)
    .de(de_DeleteQueueCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteQuickConnectCommand.js






class DeleteQuickConnectCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteQuickConnect", {})
    .n("ConnectClient", "DeleteQuickConnectCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQuickConnectCommand)
    .de(de_DeleteQuickConnectCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteRoutingProfileCommand.js






class DeleteRoutingProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteRoutingProfile", {})
    .n("ConnectClient", "DeleteRoutingProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRoutingProfileCommand)
    .de(de_DeleteRoutingProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteRuleCommand.js






class DeleteRuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteRule", {})
    .n("ConnectClient", "DeleteRuleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRuleCommand)
    .de(de_DeleteRuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteSecurityProfileCommand.js






class DeleteSecurityProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteSecurityProfile", {})
    .n("ConnectClient", "DeleteSecurityProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSecurityProfileCommand)
    .de(de_DeleteSecurityProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteTaskTemplateCommand.js






class DeleteTaskTemplateCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteTaskTemplate", {})
    .n("ConnectClient", "DeleteTaskTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTaskTemplateCommand)
    .de(de_DeleteTaskTemplateCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteTrafficDistributionGroupCommand.js






class DeleteTrafficDistributionGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteTrafficDistributionGroup", {})
    .n("ConnectClient", "DeleteTrafficDistributionGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficDistributionGroupCommand)
    .de(de_DeleteTrafficDistributionGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteUseCaseCommand.js






class DeleteUseCaseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteUseCase", {})
    .n("ConnectClient", "DeleteUseCaseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUseCaseCommand)
    .de(de_DeleteUseCaseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteUserCommand.js






class DeleteUserCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteUser", {})
    .n("ConnectClient", "DeleteUserCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserCommand)
    .de(de_DeleteUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteUserHierarchyGroupCommand.js






class DeleteUserHierarchyGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteUserHierarchyGroup", {})
    .n("ConnectClient", "DeleteUserHierarchyGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserHierarchyGroupCommand)
    .de(de_DeleteUserHierarchyGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteViewCommand.js






class DeleteViewCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteView", {})
    .n("ConnectClient", "DeleteViewCommand")
    .f(void 0, void 0)
    .ser(se_DeleteViewCommand)
    .de(de_DeleteViewCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteViewVersionCommand.js






class DeleteViewVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteViewVersion", {})
    .n("ConnectClient", "DeleteViewVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteViewVersionCommand)
    .de(de_DeleteViewVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DeleteVocabularyCommand.js






class DeleteVocabularyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DeleteVocabulary", {})
    .n("ConnectClient", "DeleteVocabularyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVocabularyCommand)
    .de(de_DeleteVocabularyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeAgentStatusCommand.js






class DescribeAgentStatusCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeAgentStatus", {})
    .n("ConnectClient", "DescribeAgentStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAgentStatusCommand)
    .de(de_DescribeAgentStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeAuthenticationProfileCommand.js






class DescribeAuthenticationProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeAuthenticationProfile", {})
    .n("ConnectClient", "DescribeAuthenticationProfileCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAuthenticationProfileCommand)
    .de(de_DescribeAuthenticationProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeContactCommand.js







class DescribeContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeContact", {})
    .n("ConnectClient", "DescribeContactCommand")
    .f(void 0, DescribeContactResponseFilterSensitiveLog)
    .ser(se_DescribeContactCommand)
    .de(de_DescribeContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeContactEvaluationCommand.js






class DescribeContactEvaluationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeContactEvaluation", {})
    .n("ConnectClient", "DescribeContactEvaluationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeContactEvaluationCommand)
    .de(de_DescribeContactEvaluationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeContactFlowCommand.js






class DescribeContactFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeContactFlow", {})
    .n("ConnectClient", "DescribeContactFlowCommand")
    .f(void 0, void 0)
    .ser(se_DescribeContactFlowCommand)
    .de(de_DescribeContactFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeContactFlowModuleCommand.js






class DescribeContactFlowModuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeContactFlowModule", {})
    .n("ConnectClient", "DescribeContactFlowModuleCommand")
    .f(void 0, void 0)
    .ser(se_DescribeContactFlowModuleCommand)
    .de(de_DescribeContactFlowModuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeEvaluationFormCommand.js






class DescribeEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeEvaluationForm", {})
    .n("ConnectClient", "DescribeEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEvaluationFormCommand)
    .de(de_DescribeEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeHoursOfOperationCommand.js






class DescribeHoursOfOperationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeHoursOfOperation", {})
    .n("ConnectClient", "DescribeHoursOfOperationCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHoursOfOperationCommand)
    .de(de_DescribeHoursOfOperationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeInstanceAttributeCommand.js






class DescribeInstanceAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeInstanceAttribute", {})
    .n("ConnectClient", "DescribeInstanceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceAttributeCommand)
    .de(de_DescribeInstanceAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeInstanceCommand.js







class DescribeInstanceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeInstance", {})
    .n("ConnectClient", "DescribeInstanceCommand")
    .f(void 0, DescribeInstanceResponseFilterSensitiveLog)
    .ser(se_DescribeInstanceCommand)
    .de(de_DescribeInstanceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeInstanceStorageConfigCommand.js






class DescribeInstanceStorageConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeInstanceStorageConfig", {})
    .n("ConnectClient", "DescribeInstanceStorageConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceStorageConfigCommand)
    .de(de_DescribeInstanceStorageConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribePhoneNumberCommand.js






class DescribePhoneNumberCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribePhoneNumber", {})
    .n("ConnectClient", "DescribePhoneNumberCommand")
    .f(void 0, void 0)
    .ser(se_DescribePhoneNumberCommand)
    .de(de_DescribePhoneNumberCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribePredefinedAttributeCommand.js






class DescribePredefinedAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribePredefinedAttribute", {})
    .n("ConnectClient", "DescribePredefinedAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribePredefinedAttributeCommand)
    .de(de_DescribePredefinedAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribePromptCommand.js






class DescribePromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribePrompt", {})
    .n("ConnectClient", "DescribePromptCommand")
    .f(void 0, void 0)
    .ser(se_DescribePromptCommand)
    .de(de_DescribePromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeQueueCommand.js






class DescribeQueueCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeQueue", {})
    .n("ConnectClient", "DescribeQueueCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQueueCommand)
    .de(de_DescribeQueueCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeQuickConnectCommand.js






class DescribeQuickConnectCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeQuickConnect", {})
    .n("ConnectClient", "DescribeQuickConnectCommand")
    .f(void 0, void 0)
    .ser(se_DescribeQuickConnectCommand)
    .de(de_DescribeQuickConnectCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeRoutingProfileCommand.js






class DescribeRoutingProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeRoutingProfile", {})
    .n("ConnectClient", "DescribeRoutingProfileCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRoutingProfileCommand)
    .de(de_DescribeRoutingProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeRuleCommand.js






class DescribeRuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeRule", {})
    .n("ConnectClient", "DescribeRuleCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRuleCommand)
    .de(de_DescribeRuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeSecurityProfileCommand.js






class DescribeSecurityProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeSecurityProfile", {})
    .n("ConnectClient", "DescribeSecurityProfileCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSecurityProfileCommand)
    .de(de_DescribeSecurityProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeTrafficDistributionGroupCommand.js






class DescribeTrafficDistributionGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeTrafficDistributionGroup", {})
    .n("ConnectClient", "DescribeTrafficDistributionGroupCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrafficDistributionGroupCommand)
    .de(de_DescribeTrafficDistributionGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeUserCommand.js







class DescribeUserCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeUser", {})
    .n("ConnectClient", "DescribeUserCommand")
    .f(void 0, DescribeUserResponseFilterSensitiveLog)
    .ser(se_DescribeUserCommand)
    .de(de_DescribeUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeUserHierarchyGroupCommand.js






class DescribeUserHierarchyGroupCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeUserHierarchyGroup", {})
    .n("ConnectClient", "DescribeUserHierarchyGroupCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserHierarchyGroupCommand)
    .de(de_DescribeUserHierarchyGroupCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeUserHierarchyStructureCommand.js






class DescribeUserHierarchyStructureCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeUserHierarchyStructure", {})
    .n("ConnectClient", "DescribeUserHierarchyStructureCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserHierarchyStructureCommand)
    .de(de_DescribeUserHierarchyStructureCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeViewCommand.js







class DescribeViewCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeView", {})
    .n("ConnectClient", "DescribeViewCommand")
    .f(void 0, DescribeViewResponseFilterSensitiveLog)
    .ser(se_DescribeViewCommand)
    .de(de_DescribeViewCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DescribeVocabularyCommand.js






class DescribeVocabularyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DescribeVocabulary", {})
    .n("ConnectClient", "DescribeVocabularyCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVocabularyCommand)
    .de(de_DescribeVocabularyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateAnalyticsDataSetCommand.js






class DisassociateAnalyticsDataSetCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateAnalyticsDataSet", {})
    .n("ConnectClient", "DisassociateAnalyticsDataSetCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateAnalyticsDataSetCommand)
    .de(de_DisassociateAnalyticsDataSetCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateApprovedOriginCommand.js






class DisassociateApprovedOriginCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateApprovedOrigin", {})
    .n("ConnectClient", "DisassociateApprovedOriginCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateApprovedOriginCommand)
    .de(de_DisassociateApprovedOriginCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateBotCommand.js






class DisassociateBotCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateBot", {})
    .n("ConnectClient", "DisassociateBotCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateBotCommand)
    .de(de_DisassociateBotCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateFlowCommand.js






class DisassociateFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateFlow", {})
    .n("ConnectClient", "DisassociateFlowCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateFlowCommand)
    .de(de_DisassociateFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateInstanceStorageConfigCommand.js






class DisassociateInstanceStorageConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateInstanceStorageConfig", {})
    .n("ConnectClient", "DisassociateInstanceStorageConfigCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateInstanceStorageConfigCommand)
    .de(de_DisassociateInstanceStorageConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateLambdaFunctionCommand.js






class DisassociateLambdaFunctionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateLambdaFunction", {})
    .n("ConnectClient", "DisassociateLambdaFunctionCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateLambdaFunctionCommand)
    .de(de_DisassociateLambdaFunctionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateLexBotCommand.js






class DisassociateLexBotCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateLexBot", {})
    .n("ConnectClient", "DisassociateLexBotCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateLexBotCommand)
    .de(de_DisassociateLexBotCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociatePhoneNumberContactFlowCommand.js






class DisassociatePhoneNumberContactFlowCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociatePhoneNumberContactFlow", {})
    .n("ConnectClient", "DisassociatePhoneNumberContactFlowCommand")
    .f(void 0, void 0)
    .ser(se_DisassociatePhoneNumberContactFlowCommand)
    .de(de_DisassociatePhoneNumberContactFlowCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateQueueQuickConnectsCommand.js






class DisassociateQueueQuickConnectsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateQueueQuickConnects", {})
    .n("ConnectClient", "DisassociateQueueQuickConnectsCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateQueueQuickConnectsCommand)
    .de(de_DisassociateQueueQuickConnectsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateRoutingProfileQueuesCommand.js






class DisassociateRoutingProfileQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateRoutingProfileQueues", {})
    .n("ConnectClient", "DisassociateRoutingProfileQueuesCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateRoutingProfileQueuesCommand)
    .de(de_DisassociateRoutingProfileQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateSecurityKeyCommand.js






class DisassociateSecurityKeyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateSecurityKey", {})
    .n("ConnectClient", "DisassociateSecurityKeyCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateSecurityKeyCommand)
    .de(de_DisassociateSecurityKeyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateTrafficDistributionGroupUserCommand.js






class DisassociateTrafficDistributionGroupUserCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateTrafficDistributionGroupUser", {})
    .n("ConnectClient", "DisassociateTrafficDistributionGroupUserCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTrafficDistributionGroupUserCommand)
    .de(de_DisassociateTrafficDistributionGroupUserCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DisassociateUserProficienciesCommand.js






class DisassociateUserProficienciesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DisassociateUserProficiencies", {})
    .n("ConnectClient", "DisassociateUserProficienciesCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateUserProficienciesCommand)
    .de(de_DisassociateUserProficienciesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/DismissUserContactCommand.js






class DismissUserContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "DismissUserContact", {})
    .n("ConnectClient", "DismissUserContactCommand")
    .f(void 0, void 0)
    .ser(se_DismissUserContactCommand)
    .de(de_DismissUserContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetAttachedFileCommand.js






class GetAttachedFileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetAttachedFile", {})
    .n("ConnectClient", "GetAttachedFileCommand")
    .f(void 0, void 0)
    .ser(se_GetAttachedFileCommand)
    .de(de_GetAttachedFileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetContactAttributesCommand.js






class GetContactAttributesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetContactAttributes", {})
    .n("ConnectClient", "GetContactAttributesCommand")
    .f(void 0, void 0)
    .ser(se_GetContactAttributesCommand)
    .de(de_GetContactAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetCurrentMetricDataCommand.js






class GetCurrentMetricDataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetCurrentMetricData", {})
    .n("ConnectClient", "GetCurrentMetricDataCommand")
    .f(void 0, void 0)
    .ser(se_GetCurrentMetricDataCommand)
    .de(de_GetCurrentMetricDataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetCurrentUserDataCommand.js






class GetCurrentUserDataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetCurrentUserData", {})
    .n("ConnectClient", "GetCurrentUserDataCommand")
    .f(void 0, void 0)
    .ser(se_GetCurrentUserDataCommand)
    .de(de_GetCurrentUserDataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetFederationTokenCommand.js







class GetFederationTokenCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetFederationToken", {})
    .n("ConnectClient", "GetFederationTokenCommand")
    .f(void 0, GetFederationTokenResponseFilterSensitiveLog)
    .ser(se_GetFederationTokenCommand)
    .de(de_GetFederationTokenCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetFlowAssociationCommand.js






class GetFlowAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetFlowAssociation", {})
    .n("ConnectClient", "GetFlowAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetFlowAssociationCommand)
    .de(de_GetFlowAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetMetricDataCommand.js






class GetMetricDataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetMetricData", {})
    .n("ConnectClient", "GetMetricDataCommand")
    .f(void 0, void 0)
    .ser(se_GetMetricDataCommand)
    .de(de_GetMetricDataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetMetricDataV2Command.js






class GetMetricDataV2Command extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetMetricDataV2", {})
    .n("ConnectClient", "GetMetricDataV2Command")
    .f(void 0, void 0)
    .ser(se_GetMetricDataV2Command)
    .de(de_GetMetricDataV2Command)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetPromptFileCommand.js






class GetPromptFileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetPromptFile", {})
    .n("ConnectClient", "GetPromptFileCommand")
    .f(void 0, void 0)
    .ser(se_GetPromptFileCommand)
    .de(de_GetPromptFileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetTaskTemplateCommand.js






class GetTaskTemplateCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetTaskTemplate", {})
    .n("ConnectClient", "GetTaskTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetTaskTemplateCommand)
    .de(de_GetTaskTemplateCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/GetTrafficDistributionCommand.js






class GetTrafficDistributionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "GetTrafficDistribution", {})
    .n("ConnectClient", "GetTrafficDistributionCommand")
    .f(void 0, void 0)
    .ser(se_GetTrafficDistributionCommand)
    .de(de_GetTrafficDistributionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ImportPhoneNumberCommand.js






class ImportPhoneNumberCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ImportPhoneNumber", {})
    .n("ConnectClient", "ImportPhoneNumberCommand")
    .f(void 0, void 0)
    .ser(se_ImportPhoneNumberCommand)
    .de(de_ImportPhoneNumberCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListAgentStatusesCommand.js






class ListAgentStatusesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListAgentStatuses", {})
    .n("ConnectClient", "ListAgentStatusesCommand")
    .f(void 0, void 0)
    .ser(se_ListAgentStatusesCommand)
    .de(de_ListAgentStatusesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListAnalyticsDataAssociationsCommand.js






class ListAnalyticsDataAssociationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListAnalyticsDataAssociations", {})
    .n("ConnectClient", "ListAnalyticsDataAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListAnalyticsDataAssociationsCommand)
    .de(de_ListAnalyticsDataAssociationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListApprovedOriginsCommand.js






class ListApprovedOriginsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListApprovedOrigins", {})
    .n("ConnectClient", "ListApprovedOriginsCommand")
    .f(void 0, void 0)
    .ser(se_ListApprovedOriginsCommand)
    .de(de_ListApprovedOriginsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListAuthenticationProfilesCommand.js






class ListAuthenticationProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListAuthenticationProfiles", {})
    .n("ConnectClient", "ListAuthenticationProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListAuthenticationProfilesCommand)
    .de(de_ListAuthenticationProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListBotsCommand.js






class ListBotsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListBots", {})
    .n("ConnectClient", "ListBotsCommand")
    .f(void 0, void 0)
    .ser(se_ListBotsCommand)
    .de(de_ListBotsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListContactEvaluationsCommand.js






class ListContactEvaluationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListContactEvaluations", {})
    .n("ConnectClient", "ListContactEvaluationsCommand")
    .f(void 0, void 0)
    .ser(se_ListContactEvaluationsCommand)
    .de(de_ListContactEvaluationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListContactFlowModulesCommand.js






class ListContactFlowModulesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListContactFlowModules", {})
    .n("ConnectClient", "ListContactFlowModulesCommand")
    .f(void 0, void 0)
    .ser(se_ListContactFlowModulesCommand)
    .de(de_ListContactFlowModulesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListContactFlowsCommand.js






class ListContactFlowsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListContactFlows", {})
    .n("ConnectClient", "ListContactFlowsCommand")
    .f(void 0, void 0)
    .ser(se_ListContactFlowsCommand)
    .de(de_ListContactFlowsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListContactReferencesCommand.js






class ListContactReferencesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListContactReferences", {})
    .n("ConnectClient", "ListContactReferencesCommand")
    .f(void 0, void 0)
    .ser(se_ListContactReferencesCommand)
    .de(de_ListContactReferencesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListDefaultVocabulariesCommand.js






class ListDefaultVocabulariesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListDefaultVocabularies", {})
    .n("ConnectClient", "ListDefaultVocabulariesCommand")
    .f(void 0, void 0)
    .ser(se_ListDefaultVocabulariesCommand)
    .de(de_ListDefaultVocabulariesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListEvaluationFormsCommand.js






class ListEvaluationFormsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListEvaluationForms", {})
    .n("ConnectClient", "ListEvaluationFormsCommand")
    .f(void 0, void 0)
    .ser(se_ListEvaluationFormsCommand)
    .de(de_ListEvaluationFormsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListEvaluationFormVersionsCommand.js






class ListEvaluationFormVersionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListEvaluationFormVersions", {})
    .n("ConnectClient", "ListEvaluationFormVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListEvaluationFormVersionsCommand)
    .de(de_ListEvaluationFormVersionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListFlowAssociationsCommand.js






class ListFlowAssociationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListFlowAssociations", {})
    .n("ConnectClient", "ListFlowAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListFlowAssociationsCommand)
    .de(de_ListFlowAssociationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListHoursOfOperationsCommand.js






class ListHoursOfOperationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListHoursOfOperations", {})
    .n("ConnectClient", "ListHoursOfOperationsCommand")
    .f(void 0, void 0)
    .ser(se_ListHoursOfOperationsCommand)
    .de(de_ListHoursOfOperationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListInstanceAttributesCommand.js






class ListInstanceAttributesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListInstanceAttributes", {})
    .n("ConnectClient", "ListInstanceAttributesCommand")
    .f(void 0, void 0)
    .ser(se_ListInstanceAttributesCommand)
    .de(de_ListInstanceAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListInstancesCommand.js







class ListInstancesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListInstances", {})
    .n("ConnectClient", "ListInstancesCommand")
    .f(void 0, ListInstancesResponseFilterSensitiveLog)
    .ser(se_ListInstancesCommand)
    .de(de_ListInstancesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListInstanceStorageConfigsCommand.js






class ListInstanceStorageConfigsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListInstanceStorageConfigs", {})
    .n("ConnectClient", "ListInstanceStorageConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListInstanceStorageConfigsCommand)
    .de(de_ListInstanceStorageConfigsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListIntegrationAssociationsCommand.js






class ListIntegrationAssociationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListIntegrationAssociations", {})
    .n("ConnectClient", "ListIntegrationAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListIntegrationAssociationsCommand)
    .de(de_ListIntegrationAssociationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListLambdaFunctionsCommand.js






class ListLambdaFunctionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListLambdaFunctions", {})
    .n("ConnectClient", "ListLambdaFunctionsCommand")
    .f(void 0, void 0)
    .ser(se_ListLambdaFunctionsCommand)
    .de(de_ListLambdaFunctionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListLexBotsCommand.js






class ListLexBotsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListLexBots", {})
    .n("ConnectClient", "ListLexBotsCommand")
    .f(void 0, void 0)
    .ser(se_ListLexBotsCommand)
    .de(de_ListLexBotsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListPhoneNumbersCommand.js






class ListPhoneNumbersCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListPhoneNumbers", {})
    .n("ConnectClient", "ListPhoneNumbersCommand")
    .f(void 0, void 0)
    .ser(se_ListPhoneNumbersCommand)
    .de(de_ListPhoneNumbersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListPhoneNumbersV2Command.js






class ListPhoneNumbersV2Command extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListPhoneNumbersV2", {})
    .n("ConnectClient", "ListPhoneNumbersV2Command")
    .f(void 0, void 0)
    .ser(se_ListPhoneNumbersV2Command)
    .de(de_ListPhoneNumbersV2Command)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListPredefinedAttributesCommand.js






class ListPredefinedAttributesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListPredefinedAttributes", {})
    .n("ConnectClient", "ListPredefinedAttributesCommand")
    .f(void 0, void 0)
    .ser(se_ListPredefinedAttributesCommand)
    .de(de_ListPredefinedAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListPromptsCommand.js






class ListPromptsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListPrompts", {})
    .n("ConnectClient", "ListPromptsCommand")
    .f(void 0, void 0)
    .ser(se_ListPromptsCommand)
    .de(de_ListPromptsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListQueueQuickConnectsCommand.js






class ListQueueQuickConnectsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListQueueQuickConnects", {})
    .n("ConnectClient", "ListQueueQuickConnectsCommand")
    .f(void 0, void 0)
    .ser(se_ListQueueQuickConnectsCommand)
    .de(de_ListQueueQuickConnectsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListQueuesCommand.js






class ListQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListQueues", {})
    .n("ConnectClient", "ListQueuesCommand")
    .f(void 0, void 0)
    .ser(se_ListQueuesCommand)
    .de(de_ListQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListQuickConnectsCommand.js






class ListQuickConnectsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListQuickConnects", {})
    .n("ConnectClient", "ListQuickConnectsCommand")
    .f(void 0, void 0)
    .ser(se_ListQuickConnectsCommand)
    .de(de_ListQuickConnectsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListRealtimeContactAnalysisSegmentsV2Command.js






class ListRealtimeContactAnalysisSegmentsV2Command extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListRealtimeContactAnalysisSegmentsV2", {})
    .n("ConnectClient", "ListRealtimeContactAnalysisSegmentsV2Command")
    .f(void 0, void 0)
    .ser(se_ListRealtimeContactAnalysisSegmentsV2Command)
    .de(de_ListRealtimeContactAnalysisSegmentsV2Command)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListRoutingProfileQueuesCommand.js






class ListRoutingProfileQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListRoutingProfileQueues", {})
    .n("ConnectClient", "ListRoutingProfileQueuesCommand")
    .f(void 0, void 0)
    .ser(se_ListRoutingProfileQueuesCommand)
    .de(de_ListRoutingProfileQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListRoutingProfilesCommand.js






class ListRoutingProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListRoutingProfiles", {})
    .n("ConnectClient", "ListRoutingProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListRoutingProfilesCommand)
    .de(de_ListRoutingProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListRulesCommand.js






class ListRulesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListRules", {})
    .n("ConnectClient", "ListRulesCommand")
    .f(void 0, void 0)
    .ser(se_ListRulesCommand)
    .de(de_ListRulesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListSecurityKeysCommand.js






class ListSecurityKeysCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListSecurityKeys", {})
    .n("ConnectClient", "ListSecurityKeysCommand")
    .f(void 0, void 0)
    .ser(se_ListSecurityKeysCommand)
    .de(de_ListSecurityKeysCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListSecurityProfileApplicationsCommand.js






class ListSecurityProfileApplicationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListSecurityProfileApplications", {})
    .n("ConnectClient", "ListSecurityProfileApplicationsCommand")
    .f(void 0, void 0)
    .ser(se_ListSecurityProfileApplicationsCommand)
    .de(de_ListSecurityProfileApplicationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListSecurityProfilePermissionsCommand.js






class ListSecurityProfilePermissionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListSecurityProfilePermissions", {})
    .n("ConnectClient", "ListSecurityProfilePermissionsCommand")
    .f(void 0, void 0)
    .ser(se_ListSecurityProfilePermissionsCommand)
    .de(de_ListSecurityProfilePermissionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListSecurityProfilesCommand.js






class ListSecurityProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListSecurityProfiles", {})
    .n("ConnectClient", "ListSecurityProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListSecurityProfilesCommand)
    .de(de_ListSecurityProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListTagsForResourceCommand.js






class ListTagsForResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListTagsForResource", {})
    .n("ConnectClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListTaskTemplatesCommand.js






class ListTaskTemplatesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListTaskTemplates", {})
    .n("ConnectClient", "ListTaskTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_ListTaskTemplatesCommand)
    .de(de_ListTaskTemplatesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListTrafficDistributionGroupsCommand.js






class ListTrafficDistributionGroupsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListTrafficDistributionGroups", {})
    .n("ConnectClient", "ListTrafficDistributionGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficDistributionGroupsCommand)
    .de(de_ListTrafficDistributionGroupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListTrafficDistributionGroupUsersCommand.js






class ListTrafficDistributionGroupUsersCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListTrafficDistributionGroupUsers", {})
    .n("ConnectClient", "ListTrafficDistributionGroupUsersCommand")
    .f(void 0, void 0)
    .ser(se_ListTrafficDistributionGroupUsersCommand)
    .de(de_ListTrafficDistributionGroupUsersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListUseCasesCommand.js






class ListUseCasesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListUseCases", {})
    .n("ConnectClient", "ListUseCasesCommand")
    .f(void 0, void 0)
    .ser(se_ListUseCasesCommand)
    .de(de_ListUseCasesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListUserHierarchyGroupsCommand.js






class ListUserHierarchyGroupsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListUserHierarchyGroups", {})
    .n("ConnectClient", "ListUserHierarchyGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserHierarchyGroupsCommand)
    .de(de_ListUserHierarchyGroupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListUserProficienciesCommand.js






class ListUserProficienciesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListUserProficiencies", {})
    .n("ConnectClient", "ListUserProficienciesCommand")
    .f(void 0, void 0)
    .ser(se_ListUserProficienciesCommand)
    .de(de_ListUserProficienciesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListUsersCommand.js






class ListUsersCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListUsers", {})
    .n("ConnectClient", "ListUsersCommand")
    .f(void 0, void 0)
    .ser(se_ListUsersCommand)
    .de(de_ListUsersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListViewsCommand.js







class ListViewsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListViews", {})
    .n("ConnectClient", "ListViewsCommand")
    .f(void 0, ListViewsResponseFilterSensitiveLog)
    .ser(se_ListViewsCommand)
    .de(de_ListViewsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ListViewVersionsCommand.js







class ListViewVersionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ListViewVersions", {})
    .n("ConnectClient", "ListViewVersionsCommand")
    .f(void 0, ListViewVersionsResponseFilterSensitiveLog)
    .ser(se_ListViewVersionsCommand)
    .de(de_ListViewVersionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/MonitorContactCommand.js






class MonitorContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "MonitorContact", {})
    .n("ConnectClient", "MonitorContactCommand")
    .f(void 0, void 0)
    .ser(se_MonitorContactCommand)
    .de(de_MonitorContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/PauseContactCommand.js






class PauseContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "PauseContact", {})
    .n("ConnectClient", "PauseContactCommand")
    .f(void 0, void 0)
    .ser(se_PauseContactCommand)
    .de(de_PauseContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/PutUserStatusCommand.js






class PutUserStatusCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "PutUserStatus", {})
    .n("ConnectClient", "PutUserStatusCommand")
    .f(void 0, void 0)
    .ser(se_PutUserStatusCommand)
    .de(de_PutUserStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ReleasePhoneNumberCommand.js






class ReleasePhoneNumberCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ReleasePhoneNumber", {})
    .n("ConnectClient", "ReleasePhoneNumberCommand")
    .f(void 0, void 0)
    .ser(se_ReleasePhoneNumberCommand)
    .de(de_ReleasePhoneNumberCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ReplicateInstanceCommand.js







class ReplicateInstanceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ReplicateInstance", {})
    .n("ConnectClient", "ReplicateInstanceCommand")
    .f(ReplicateInstanceRequestFilterSensitiveLog, void 0)
    .ser(se_ReplicateInstanceCommand)
    .de(de_ReplicateInstanceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ResumeContactCommand.js






class ResumeContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ResumeContact", {})
    .n("ConnectClient", "ResumeContactCommand")
    .f(void 0, void 0)
    .ser(se_ResumeContactCommand)
    .de(de_ResumeContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/ResumeContactRecordingCommand.js






class ResumeContactRecordingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "ResumeContactRecording", {})
    .n("ConnectClient", "ResumeContactRecordingCommand")
    .f(void 0, void 0)
    .ser(se_ResumeContactRecordingCommand)
    .de(de_ResumeContactRecordingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchAgentStatusesCommand.js






class SearchAgentStatusesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchAgentStatuses", {})
    .n("ConnectClient", "SearchAgentStatusesCommand")
    .f(void 0, void 0)
    .ser(se_SearchAgentStatusesCommand)
    .de(de_SearchAgentStatusesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchAvailablePhoneNumbersCommand.js






class SearchAvailablePhoneNumbersCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchAvailablePhoneNumbers", {})
    .n("ConnectClient", "SearchAvailablePhoneNumbersCommand")
    .f(void 0, void 0)
    .ser(se_SearchAvailablePhoneNumbersCommand)
    .de(de_SearchAvailablePhoneNumbersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchContactFlowModulesCommand.js






class SearchContactFlowModulesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchContactFlowModules", {})
    .n("ConnectClient", "SearchContactFlowModulesCommand")
    .f(void 0, void 0)
    .ser(se_SearchContactFlowModulesCommand)
    .de(de_SearchContactFlowModulesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchContactFlowsCommand.js






class SearchContactFlowsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchContactFlows", {})
    .n("ConnectClient", "SearchContactFlowsCommand")
    .f(void 0, void 0)
    .ser(se_SearchContactFlowsCommand)
    .de(de_SearchContactFlowsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchContactsCommand.js







class SearchContactsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchContacts", {})
    .n("ConnectClient", "SearchContactsCommand")
    .f(SearchContactsRequestFilterSensitiveLog, void 0)
    .ser(se_SearchContactsCommand)
    .de(de_SearchContactsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchHoursOfOperationsCommand.js






class SearchHoursOfOperationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchHoursOfOperations", {})
    .n("ConnectClient", "SearchHoursOfOperationsCommand")
    .f(void 0, void 0)
    .ser(se_SearchHoursOfOperationsCommand)
    .de(de_SearchHoursOfOperationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchPredefinedAttributesCommand.js






class SearchPredefinedAttributesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchPredefinedAttributes", {})
    .n("ConnectClient", "SearchPredefinedAttributesCommand")
    .f(void 0, void 0)
    .ser(se_SearchPredefinedAttributesCommand)
    .de(de_SearchPredefinedAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchPromptsCommand.js






class SearchPromptsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchPrompts", {})
    .n("ConnectClient", "SearchPromptsCommand")
    .f(void 0, void 0)
    .ser(se_SearchPromptsCommand)
    .de(de_SearchPromptsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchQueuesCommand.js






class SearchQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchQueues", {})
    .n("ConnectClient", "SearchQueuesCommand")
    .f(void 0, void 0)
    .ser(se_SearchQueuesCommand)
    .de(de_SearchQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchQuickConnectsCommand.js






class SearchQuickConnectsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchQuickConnects", {})
    .n("ConnectClient", "SearchQuickConnectsCommand")
    .f(void 0, void 0)
    .ser(se_SearchQuickConnectsCommand)
    .de(de_SearchQuickConnectsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchResourceTagsCommand.js






class SearchResourceTagsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchResourceTags", {})
    .n("ConnectClient", "SearchResourceTagsCommand")
    .f(void 0, void 0)
    .ser(se_SearchResourceTagsCommand)
    .de(de_SearchResourceTagsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchRoutingProfilesCommand.js






class SearchRoutingProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchRoutingProfiles", {})
    .n("ConnectClient", "SearchRoutingProfilesCommand")
    .f(void 0, void 0)
    .ser(se_SearchRoutingProfilesCommand)
    .de(de_SearchRoutingProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchSecurityProfilesCommand.js






class SearchSecurityProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchSecurityProfiles", {})
    .n("ConnectClient", "SearchSecurityProfilesCommand")
    .f(void 0, void 0)
    .ser(se_SearchSecurityProfilesCommand)
    .de(de_SearchSecurityProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchUserHierarchyGroupsCommand.js






class SearchUserHierarchyGroupsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchUserHierarchyGroups", {})
    .n("ConnectClient", "SearchUserHierarchyGroupsCommand")
    .f(void 0, void 0)
    .ser(se_SearchUserHierarchyGroupsCommand)
    .de(de_SearchUserHierarchyGroupsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchUsersCommand.js







class SearchUsersCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchUsers", {})
    .n("ConnectClient", "SearchUsersCommand")
    .f(void 0, SearchUsersResponseFilterSensitiveLog)
    .ser(se_SearchUsersCommand)
    .de(de_SearchUsersCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SearchVocabulariesCommand.js






class SearchVocabulariesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SearchVocabularies", {})
    .n("ConnectClient", "SearchVocabulariesCommand")
    .f(void 0, void 0)
    .ser(se_SearchVocabulariesCommand)
    .de(de_SearchVocabulariesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SendChatIntegrationEventCommand.js






class SendChatIntegrationEventCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SendChatIntegrationEvent", {})
    .n("ConnectClient", "SendChatIntegrationEventCommand")
    .f(void 0, void 0)
    .ser(se_SendChatIntegrationEventCommand)
    .de(de_SendChatIntegrationEventCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartAttachedFileUploadCommand.js






class StartAttachedFileUploadCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartAttachedFileUpload", {})
    .n("ConnectClient", "StartAttachedFileUploadCommand")
    .f(void 0, void 0)
    .ser(se_StartAttachedFileUploadCommand)
    .de(de_StartAttachedFileUploadCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartChatContactCommand.js






class StartChatContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartChatContact", {})
    .n("ConnectClient", "StartChatContactCommand")
    .f(void 0, void 0)
    .ser(se_StartChatContactCommand)
    .de(de_StartChatContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartContactEvaluationCommand.js






class StartContactEvaluationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartContactEvaluation", {})
    .n("ConnectClient", "StartContactEvaluationCommand")
    .f(void 0, void 0)
    .ser(se_StartContactEvaluationCommand)
    .de(de_StartContactEvaluationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartContactRecordingCommand.js






class StartContactRecordingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartContactRecording", {})
    .n("ConnectClient", "StartContactRecordingCommand")
    .f(void 0, void 0)
    .ser(se_StartContactRecordingCommand)
    .de(de_StartContactRecordingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartContactStreamingCommand.js






class StartContactStreamingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartContactStreaming", {})
    .n("ConnectClient", "StartContactStreamingCommand")
    .f(void 0, void 0)
    .ser(se_StartContactStreamingCommand)
    .de(de_StartContactStreamingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartOutboundChatContactCommand.js






class StartOutboundChatContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartOutboundChatContact", {})
    .n("ConnectClient", "StartOutboundChatContactCommand")
    .f(void 0, void 0)
    .ser(se_StartOutboundChatContactCommand)
    .de(de_StartOutboundChatContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartOutboundVoiceContactCommand.js







class StartOutboundVoiceContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartOutboundVoiceContact", {})
    .n("ConnectClient", "StartOutboundVoiceContactCommand")
    .f(StartOutboundVoiceContactRequestFilterSensitiveLog, void 0)
    .ser(se_StartOutboundVoiceContactCommand)
    .de(de_StartOutboundVoiceContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartTaskContactCommand.js







class StartTaskContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartTaskContact", {})
    .n("ConnectClient", "StartTaskContactCommand")
    .f(StartTaskContactRequestFilterSensitiveLog, void 0)
    .ser(se_StartTaskContactCommand)
    .de(de_StartTaskContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StartWebRTCContactCommand.js







class StartWebRTCContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StartWebRTCContact", {})
    .n("ConnectClient", "StartWebRTCContactCommand")
    .f(StartWebRTCContactRequestFilterSensitiveLog, StartWebRTCContactResponseFilterSensitiveLog)
    .ser(se_StartWebRTCContactCommand)
    .de(de_StartWebRTCContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StopContactCommand.js






class StopContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StopContact", {})
    .n("ConnectClient", "StopContactCommand")
    .f(void 0, void 0)
    .ser(se_StopContactCommand)
    .de(de_StopContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StopContactRecordingCommand.js






class StopContactRecordingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StopContactRecording", {})
    .n("ConnectClient", "StopContactRecordingCommand")
    .f(void 0, void 0)
    .ser(se_StopContactRecordingCommand)
    .de(de_StopContactRecordingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/StopContactStreamingCommand.js






class StopContactStreamingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "StopContactStreaming", {})
    .n("ConnectClient", "StopContactStreamingCommand")
    .f(void 0, void 0)
    .ser(se_StopContactStreamingCommand)
    .de(de_StopContactStreamingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SubmitContactEvaluationCommand.js






class SubmitContactEvaluationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SubmitContactEvaluation", {})
    .n("ConnectClient", "SubmitContactEvaluationCommand")
    .f(void 0, void 0)
    .ser(se_SubmitContactEvaluationCommand)
    .de(de_SubmitContactEvaluationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/SuspendContactRecordingCommand.js






class SuspendContactRecordingCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "SuspendContactRecording", {})
    .n("ConnectClient", "SuspendContactRecordingCommand")
    .f(void 0, void 0)
    .ser(se_SuspendContactRecordingCommand)
    .de(de_SuspendContactRecordingCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/TagContactCommand.js






class TagContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "TagContact", {})
    .n("ConnectClient", "TagContactCommand")
    .f(void 0, void 0)
    .ser(se_TagContactCommand)
    .de(de_TagContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/TagResourceCommand.js






class TagResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "TagResource", {})
    .n("ConnectClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/TransferContactCommand.js






class TransferContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "TransferContact", {})
    .n("ConnectClient", "TransferContactCommand")
    .f(void 0, void 0)
    .ser(se_TransferContactCommand)
    .de(de_TransferContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UntagContactCommand.js






class UntagContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UntagContact", {})
    .n("ConnectClient", "UntagContactCommand")
    .f(void 0, void 0)
    .ser(se_UntagContactCommand)
    .de(de_UntagContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UntagResourceCommand.js






class UntagResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UntagResource", {})
    .n("ConnectClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateAgentStatusCommand.js






class UpdateAgentStatusCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateAgentStatus", {})
    .n("ConnectClient", "UpdateAgentStatusCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAgentStatusCommand)
    .de(de_UpdateAgentStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateAuthenticationProfileCommand.js






class UpdateAuthenticationProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateAuthenticationProfile", {})
    .n("ConnectClient", "UpdateAuthenticationProfileCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAuthenticationProfileCommand)
    .de(de_UpdateAuthenticationProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactAttributesCommand.js






class UpdateContactAttributesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactAttributes", {})
    .n("ConnectClient", "UpdateContactAttributesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactAttributesCommand)
    .de(de_UpdateContactAttributesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactCommand.js







class UpdateContactCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContact", {})
    .n("ConnectClient", "UpdateContactCommand")
    .f(UpdateContactRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateContactCommand)
    .de(de_UpdateContactCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactEvaluationCommand.js






class UpdateContactEvaluationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactEvaluation", {})
    .n("ConnectClient", "UpdateContactEvaluationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactEvaluationCommand)
    .de(de_UpdateContactEvaluationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactFlowContentCommand.js






class UpdateContactFlowContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactFlowContent", {})
    .n("ConnectClient", "UpdateContactFlowContentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactFlowContentCommand)
    .de(de_UpdateContactFlowContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactFlowMetadataCommand.js






class UpdateContactFlowMetadataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactFlowMetadata", {})
    .n("ConnectClient", "UpdateContactFlowMetadataCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactFlowMetadataCommand)
    .de(de_UpdateContactFlowMetadataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactFlowModuleContentCommand.js






class UpdateContactFlowModuleContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactFlowModuleContent", {})
    .n("ConnectClient", "UpdateContactFlowModuleContentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactFlowModuleContentCommand)
    .de(de_UpdateContactFlowModuleContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactFlowModuleMetadataCommand.js






class UpdateContactFlowModuleMetadataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactFlowModuleMetadata", {})
    .n("ConnectClient", "UpdateContactFlowModuleMetadataCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactFlowModuleMetadataCommand)
    .de(de_UpdateContactFlowModuleMetadataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactFlowNameCommand.js






class UpdateContactFlowNameCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactFlowName", {})
    .n("ConnectClient", "UpdateContactFlowNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactFlowNameCommand)
    .de(de_UpdateContactFlowNameCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactRoutingDataCommand.js






class UpdateContactRoutingDataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactRoutingData", {})
    .n("ConnectClient", "UpdateContactRoutingDataCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactRoutingDataCommand)
    .de(de_UpdateContactRoutingDataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateContactScheduleCommand.js






class UpdateContactScheduleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateContactSchedule", {})
    .n("ConnectClient", "UpdateContactScheduleCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContactScheduleCommand)
    .de(de_UpdateContactScheduleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateEvaluationFormCommand.js






class UpdateEvaluationFormCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateEvaluationForm", {})
    .n("ConnectClient", "UpdateEvaluationFormCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEvaluationFormCommand)
    .de(de_UpdateEvaluationFormCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateHoursOfOperationCommand.js






class UpdateHoursOfOperationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateHoursOfOperation", {})
    .n("ConnectClient", "UpdateHoursOfOperationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHoursOfOperationCommand)
    .de(de_UpdateHoursOfOperationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateInstanceAttributeCommand.js






class UpdateInstanceAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateInstanceAttribute", {})
    .n("ConnectClient", "UpdateInstanceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_UpdateInstanceAttributeCommand)
    .de(de_UpdateInstanceAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateInstanceStorageConfigCommand.js






class UpdateInstanceStorageConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateInstanceStorageConfig", {})
    .n("ConnectClient", "UpdateInstanceStorageConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateInstanceStorageConfigCommand)
    .de(de_UpdateInstanceStorageConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateParticipantRoleConfigCommand.js






class UpdateParticipantRoleConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateParticipantRoleConfig", {})
    .n("ConnectClient", "UpdateParticipantRoleConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateParticipantRoleConfigCommand)
    .de(de_UpdateParticipantRoleConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdatePhoneNumberCommand.js






class UpdatePhoneNumberCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdatePhoneNumber", {})
    .n("ConnectClient", "UpdatePhoneNumberCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePhoneNumberCommand)
    .de(de_UpdatePhoneNumberCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdatePhoneNumberMetadataCommand.js






class UpdatePhoneNumberMetadataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdatePhoneNumberMetadata", {})
    .n("ConnectClient", "UpdatePhoneNumberMetadataCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePhoneNumberMetadataCommand)
    .de(de_UpdatePhoneNumberMetadataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdatePredefinedAttributeCommand.js






class UpdatePredefinedAttributeCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdatePredefinedAttribute", {})
    .n("ConnectClient", "UpdatePredefinedAttributeCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePredefinedAttributeCommand)
    .de(de_UpdatePredefinedAttributeCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdatePromptCommand.js






class UpdatePromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdatePrompt", {})
    .n("ConnectClient", "UpdatePromptCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePromptCommand)
    .de(de_UpdatePromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQueueHoursOfOperationCommand.js






class UpdateQueueHoursOfOperationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQueueHoursOfOperation", {})
    .n("ConnectClient", "UpdateQueueHoursOfOperationCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueHoursOfOperationCommand)
    .de(de_UpdateQueueHoursOfOperationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQueueMaxContactsCommand.js






class UpdateQueueMaxContactsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQueueMaxContacts", {})
    .n("ConnectClient", "UpdateQueueMaxContactsCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueMaxContactsCommand)
    .de(de_UpdateQueueMaxContactsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQueueNameCommand.js






class UpdateQueueNameCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQueueName", {})
    .n("ConnectClient", "UpdateQueueNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueNameCommand)
    .de(de_UpdateQueueNameCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQueueOutboundCallerConfigCommand.js






class UpdateQueueOutboundCallerConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQueueOutboundCallerConfig", {})
    .n("ConnectClient", "UpdateQueueOutboundCallerConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueOutboundCallerConfigCommand)
    .de(de_UpdateQueueOutboundCallerConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQueueStatusCommand.js






class UpdateQueueStatusCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQueueStatus", {})
    .n("ConnectClient", "UpdateQueueStatusCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQueueStatusCommand)
    .de(de_UpdateQueueStatusCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQuickConnectConfigCommand.js






class UpdateQuickConnectConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQuickConnectConfig", {})
    .n("ConnectClient", "UpdateQuickConnectConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQuickConnectConfigCommand)
    .de(de_UpdateQuickConnectConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateQuickConnectNameCommand.js






class UpdateQuickConnectNameCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateQuickConnectName", {})
    .n("ConnectClient", "UpdateQuickConnectNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateQuickConnectNameCommand)
    .de(de_UpdateQuickConnectNameCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRoutingProfileAgentAvailabilityTimerCommand.js






class UpdateRoutingProfileAgentAvailabilityTimerCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRoutingProfileAgentAvailabilityTimer", {})
    .n("ConnectClient", "UpdateRoutingProfileAgentAvailabilityTimerCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoutingProfileAgentAvailabilityTimerCommand)
    .de(de_UpdateRoutingProfileAgentAvailabilityTimerCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRoutingProfileConcurrencyCommand.js






class UpdateRoutingProfileConcurrencyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRoutingProfileConcurrency", {})
    .n("ConnectClient", "UpdateRoutingProfileConcurrencyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoutingProfileConcurrencyCommand)
    .de(de_UpdateRoutingProfileConcurrencyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRoutingProfileDefaultOutboundQueueCommand.js






class UpdateRoutingProfileDefaultOutboundQueueCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRoutingProfileDefaultOutboundQueue", {})
    .n("ConnectClient", "UpdateRoutingProfileDefaultOutboundQueueCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoutingProfileDefaultOutboundQueueCommand)
    .de(de_UpdateRoutingProfileDefaultOutboundQueueCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRoutingProfileNameCommand.js






class UpdateRoutingProfileNameCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRoutingProfileName", {})
    .n("ConnectClient", "UpdateRoutingProfileNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoutingProfileNameCommand)
    .de(de_UpdateRoutingProfileNameCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRoutingProfileQueuesCommand.js






class UpdateRoutingProfileQueuesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRoutingProfileQueues", {})
    .n("ConnectClient", "UpdateRoutingProfileQueuesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRoutingProfileQueuesCommand)
    .de(de_UpdateRoutingProfileQueuesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateRuleCommand.js






class UpdateRuleCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateRule", {})
    .n("ConnectClient", "UpdateRuleCommand")
    .f(void 0, void 0)
    .ser(se_UpdateRuleCommand)
    .de(de_UpdateRuleCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateSecurityProfileCommand.js






class UpdateSecurityProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateSecurityProfile", {})
    .n("ConnectClient", "UpdateSecurityProfileCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSecurityProfileCommand)
    .de(de_UpdateSecurityProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateTaskTemplateCommand.js






class UpdateTaskTemplateCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateTaskTemplate", {})
    .n("ConnectClient", "UpdateTaskTemplateCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTaskTemplateCommand)
    .de(de_UpdateTaskTemplateCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateTrafficDistributionCommand.js






class UpdateTrafficDistributionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateTrafficDistribution", {})
    .n("ConnectClient", "UpdateTrafficDistributionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrafficDistributionCommand)
    .de(de_UpdateTrafficDistributionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserHierarchyCommand.js






class UpdateUserHierarchyCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserHierarchy", {})
    .n("ConnectClient", "UpdateUserHierarchyCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserHierarchyCommand)
    .de(de_UpdateUserHierarchyCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserHierarchyGroupNameCommand.js






class UpdateUserHierarchyGroupNameCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserHierarchyGroupName", {})
    .n("ConnectClient", "UpdateUserHierarchyGroupNameCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserHierarchyGroupNameCommand)
    .de(de_UpdateUserHierarchyGroupNameCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserHierarchyStructureCommand.js






class UpdateUserHierarchyStructureCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserHierarchyStructure", {})
    .n("ConnectClient", "UpdateUserHierarchyStructureCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserHierarchyStructureCommand)
    .de(de_UpdateUserHierarchyStructureCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserIdentityInfoCommand.js







class UpdateUserIdentityInfoCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserIdentityInfo", {})
    .n("ConnectClient", "UpdateUserIdentityInfoCommand")
    .f(UpdateUserIdentityInfoRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateUserIdentityInfoCommand)
    .de(de_UpdateUserIdentityInfoCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserPhoneConfigCommand.js






class UpdateUserPhoneConfigCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserPhoneConfig", {})
    .n("ConnectClient", "UpdateUserPhoneConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserPhoneConfigCommand)
    .de(de_UpdateUserPhoneConfigCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserProficienciesCommand.js






class UpdateUserProficienciesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserProficiencies", {})
    .n("ConnectClient", "UpdateUserProficienciesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserProficienciesCommand)
    .de(de_UpdateUserProficienciesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserRoutingProfileCommand.js






class UpdateUserRoutingProfileCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserRoutingProfile", {})
    .n("ConnectClient", "UpdateUserRoutingProfileCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserRoutingProfileCommand)
    .de(de_UpdateUserRoutingProfileCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateUserSecurityProfilesCommand.js






class UpdateUserSecurityProfilesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateUserSecurityProfiles", {})
    .n("ConnectClient", "UpdateUserSecurityProfilesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserSecurityProfilesCommand)
    .de(de_UpdateUserSecurityProfilesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateViewContentCommand.js







class UpdateViewContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateViewContent", {})
    .n("ConnectClient", "UpdateViewContentCommand")
    .f(UpdateViewContentRequestFilterSensitiveLog, UpdateViewContentResponseFilterSensitiveLog)
    .ser(se_UpdateViewContentCommand)
    .de(de_UpdateViewContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/UpdateViewMetadataCommand.js







class UpdateViewMetadataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonConnectService", "UpdateViewMetadata", {})
    .n("ConnectClient", "UpdateViewMetadataCommand")
    .f(UpdateViewMetadataRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateViewMetadataCommand)
    .de(de_UpdateViewMetadataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-connect/dist-es/Connect.js


































































































































































































































































const commands = {
    ActivateEvaluationFormCommand: ActivateEvaluationFormCommand,
    AssociateAnalyticsDataSetCommand: AssociateAnalyticsDataSetCommand,
    AssociateApprovedOriginCommand: AssociateApprovedOriginCommand,
    AssociateBotCommand: AssociateBotCommand,
    AssociateDefaultVocabularyCommand: AssociateDefaultVocabularyCommand,
    AssociateFlowCommand: AssociateFlowCommand,
    AssociateInstanceStorageConfigCommand: AssociateInstanceStorageConfigCommand,
    AssociateLambdaFunctionCommand: AssociateLambdaFunctionCommand,
    AssociateLexBotCommand: AssociateLexBotCommand,
    AssociatePhoneNumberContactFlowCommand: AssociatePhoneNumberContactFlowCommand,
    AssociateQueueQuickConnectsCommand: AssociateQueueQuickConnectsCommand,
    AssociateRoutingProfileQueuesCommand: AssociateRoutingProfileQueuesCommand,
    AssociateSecurityKeyCommand: AssociateSecurityKeyCommand,
    AssociateTrafficDistributionGroupUserCommand: AssociateTrafficDistributionGroupUserCommand,
    AssociateUserProficienciesCommand: AssociateUserProficienciesCommand,
    BatchAssociateAnalyticsDataSetCommand: BatchAssociateAnalyticsDataSetCommand,
    BatchDisassociateAnalyticsDataSetCommand: BatchDisassociateAnalyticsDataSetCommand,
    BatchGetAttachedFileMetadataCommand: BatchGetAttachedFileMetadataCommand,
    BatchGetFlowAssociationCommand: BatchGetFlowAssociationCommand,
    BatchPutContactCommand: BatchPutContactCommand,
    ClaimPhoneNumberCommand: ClaimPhoneNumberCommand,
    CompleteAttachedFileUploadCommand: CompleteAttachedFileUploadCommand,
    CreateAgentStatusCommand: CreateAgentStatusCommand,
    CreateContactFlowCommand: CreateContactFlowCommand,
    CreateContactFlowModuleCommand: CreateContactFlowModuleCommand,
    CreateEvaluationFormCommand: CreateEvaluationFormCommand,
    CreateHoursOfOperationCommand: CreateHoursOfOperationCommand,
    CreateInstanceCommand: CreateInstanceCommand,
    CreateIntegrationAssociationCommand: CreateIntegrationAssociationCommand,
    CreateParticipantCommand: CreateParticipantCommand,
    CreatePersistentContactAssociationCommand: CreatePersistentContactAssociationCommand,
    CreatePredefinedAttributeCommand: CreatePredefinedAttributeCommand,
    CreatePromptCommand: CreatePromptCommand,
    CreateQueueCommand: CreateQueueCommand,
    CreateQuickConnectCommand: CreateQuickConnectCommand,
    CreateRoutingProfileCommand: CreateRoutingProfileCommand,
    CreateRuleCommand: CreateRuleCommand,
    CreateSecurityProfileCommand: CreateSecurityProfileCommand,
    CreateTaskTemplateCommand: CreateTaskTemplateCommand,
    CreateTrafficDistributionGroupCommand: CreateTrafficDistributionGroupCommand,
    CreateUseCaseCommand: CreateUseCaseCommand,
    CreateUserCommand: CreateUserCommand,
    CreateUserHierarchyGroupCommand: CreateUserHierarchyGroupCommand,
    CreateViewCommand: CreateViewCommand,
    CreateViewVersionCommand: CreateViewVersionCommand,
    CreateVocabularyCommand: CreateVocabularyCommand,
    DeactivateEvaluationFormCommand: DeactivateEvaluationFormCommand,
    DeleteAttachedFileCommand: DeleteAttachedFileCommand,
    DeleteContactEvaluationCommand: DeleteContactEvaluationCommand,
    DeleteContactFlowCommand: DeleteContactFlowCommand,
    DeleteContactFlowModuleCommand: DeleteContactFlowModuleCommand,
    DeleteEvaluationFormCommand: DeleteEvaluationFormCommand,
    DeleteHoursOfOperationCommand: DeleteHoursOfOperationCommand,
    DeleteInstanceCommand: DeleteInstanceCommand,
    DeleteIntegrationAssociationCommand: DeleteIntegrationAssociationCommand,
    DeletePredefinedAttributeCommand: DeletePredefinedAttributeCommand,
    DeletePromptCommand: DeletePromptCommand,
    DeleteQueueCommand: DeleteQueueCommand,
    DeleteQuickConnectCommand: DeleteQuickConnectCommand,
    DeleteRoutingProfileCommand: DeleteRoutingProfileCommand,
    DeleteRuleCommand: DeleteRuleCommand,
    DeleteSecurityProfileCommand: DeleteSecurityProfileCommand,
    DeleteTaskTemplateCommand: DeleteTaskTemplateCommand,
    DeleteTrafficDistributionGroupCommand: DeleteTrafficDistributionGroupCommand,
    DeleteUseCaseCommand: DeleteUseCaseCommand,
    DeleteUserCommand: DeleteUserCommand,
    DeleteUserHierarchyGroupCommand: DeleteUserHierarchyGroupCommand,
    DeleteViewCommand: DeleteViewCommand,
    DeleteViewVersionCommand: DeleteViewVersionCommand,
    DeleteVocabularyCommand: DeleteVocabularyCommand,
    DescribeAgentStatusCommand: DescribeAgentStatusCommand,
    DescribeAuthenticationProfileCommand: DescribeAuthenticationProfileCommand,
    DescribeContactCommand: DescribeContactCommand,
    DescribeContactEvaluationCommand: DescribeContactEvaluationCommand,
    DescribeContactFlowCommand: DescribeContactFlowCommand,
    DescribeContactFlowModuleCommand: DescribeContactFlowModuleCommand,
    DescribeEvaluationFormCommand: DescribeEvaluationFormCommand,
    DescribeHoursOfOperationCommand: DescribeHoursOfOperationCommand,
    DescribeInstanceCommand: DescribeInstanceCommand,
    DescribeInstanceAttributeCommand: DescribeInstanceAttributeCommand,
    DescribeInstanceStorageConfigCommand: DescribeInstanceStorageConfigCommand,
    DescribePhoneNumberCommand: DescribePhoneNumberCommand,
    DescribePredefinedAttributeCommand: DescribePredefinedAttributeCommand,
    DescribePromptCommand: DescribePromptCommand,
    DescribeQueueCommand: DescribeQueueCommand,
    DescribeQuickConnectCommand: DescribeQuickConnectCommand,
    DescribeRoutingProfileCommand: DescribeRoutingProfileCommand,
    DescribeRuleCommand: DescribeRuleCommand,
    DescribeSecurityProfileCommand: DescribeSecurityProfileCommand,
    DescribeTrafficDistributionGroupCommand: DescribeTrafficDistributionGroupCommand,
    DescribeUserCommand: DescribeUserCommand,
    DescribeUserHierarchyGroupCommand: DescribeUserHierarchyGroupCommand,
    DescribeUserHierarchyStructureCommand: DescribeUserHierarchyStructureCommand,
    DescribeViewCommand: DescribeViewCommand,
    DescribeVocabularyCommand: DescribeVocabularyCommand,
    DisassociateAnalyticsDataSetCommand: DisassociateAnalyticsDataSetCommand,
    DisassociateApprovedOriginCommand: DisassociateApprovedOriginCommand,
    DisassociateBotCommand: DisassociateBotCommand,
    DisassociateFlowCommand: DisassociateFlowCommand,
    DisassociateInstanceStorageConfigCommand: DisassociateInstanceStorageConfigCommand,
    DisassociateLambdaFunctionCommand: DisassociateLambdaFunctionCommand,
    DisassociateLexBotCommand: DisassociateLexBotCommand,
    DisassociatePhoneNumberContactFlowCommand: DisassociatePhoneNumberContactFlowCommand,
    DisassociateQueueQuickConnectsCommand: DisassociateQueueQuickConnectsCommand,
    DisassociateRoutingProfileQueuesCommand: DisassociateRoutingProfileQueuesCommand,
    DisassociateSecurityKeyCommand: DisassociateSecurityKeyCommand,
    DisassociateTrafficDistributionGroupUserCommand: DisassociateTrafficDistributionGroupUserCommand,
    DisassociateUserProficienciesCommand: DisassociateUserProficienciesCommand,
    DismissUserContactCommand: DismissUserContactCommand,
    GetAttachedFileCommand: GetAttachedFileCommand,
    GetContactAttributesCommand: GetContactAttributesCommand,
    GetCurrentMetricDataCommand: GetCurrentMetricDataCommand,
    GetCurrentUserDataCommand: GetCurrentUserDataCommand,
    GetFederationTokenCommand: GetFederationTokenCommand,
    GetFlowAssociationCommand: GetFlowAssociationCommand,
    GetMetricDataCommand: GetMetricDataCommand,
    GetMetricDataV2Command: GetMetricDataV2Command,
    GetPromptFileCommand: GetPromptFileCommand,
    GetTaskTemplateCommand: GetTaskTemplateCommand,
    GetTrafficDistributionCommand: GetTrafficDistributionCommand,
    ImportPhoneNumberCommand: ImportPhoneNumberCommand,
    ListAgentStatusesCommand: ListAgentStatusesCommand,
    ListAnalyticsDataAssociationsCommand: ListAnalyticsDataAssociationsCommand,
    ListApprovedOriginsCommand: ListApprovedOriginsCommand,
    ListAuthenticationProfilesCommand: ListAuthenticationProfilesCommand,
    ListBotsCommand: ListBotsCommand,
    ListContactEvaluationsCommand: ListContactEvaluationsCommand,
    ListContactFlowModulesCommand: ListContactFlowModulesCommand,
    ListContactFlowsCommand: ListContactFlowsCommand,
    ListContactReferencesCommand: ListContactReferencesCommand,
    ListDefaultVocabulariesCommand: ListDefaultVocabulariesCommand,
    ListEvaluationFormsCommand: ListEvaluationFormsCommand,
    ListEvaluationFormVersionsCommand: ListEvaluationFormVersionsCommand,
    ListFlowAssociationsCommand: ListFlowAssociationsCommand,
    ListHoursOfOperationsCommand: ListHoursOfOperationsCommand,
    ListInstanceAttributesCommand: ListInstanceAttributesCommand,
    ListInstancesCommand: ListInstancesCommand,
    ListInstanceStorageConfigsCommand: ListInstanceStorageConfigsCommand,
    ListIntegrationAssociationsCommand: ListIntegrationAssociationsCommand,
    ListLambdaFunctionsCommand: ListLambdaFunctionsCommand,
    ListLexBotsCommand: ListLexBotsCommand,
    ListPhoneNumbersCommand: ListPhoneNumbersCommand,
    ListPhoneNumbersV2Command: ListPhoneNumbersV2Command,
    ListPredefinedAttributesCommand: ListPredefinedAttributesCommand,
    ListPromptsCommand: ListPromptsCommand,
    ListQueueQuickConnectsCommand: ListQueueQuickConnectsCommand,
    ListQueuesCommand: ListQueuesCommand,
    ListQuickConnectsCommand: ListQuickConnectsCommand,
    ListRealtimeContactAnalysisSegmentsV2Command: ListRealtimeContactAnalysisSegmentsV2Command,
    ListRoutingProfileQueuesCommand: ListRoutingProfileQueuesCommand,
    ListRoutingProfilesCommand: ListRoutingProfilesCommand,
    ListRulesCommand: ListRulesCommand,
    ListSecurityKeysCommand: ListSecurityKeysCommand,
    ListSecurityProfileApplicationsCommand: ListSecurityProfileApplicationsCommand,
    ListSecurityProfilePermissionsCommand: ListSecurityProfilePermissionsCommand,
    ListSecurityProfilesCommand: ListSecurityProfilesCommand,
    ListTagsForResourceCommand: ListTagsForResourceCommand,
    ListTaskTemplatesCommand: ListTaskTemplatesCommand,
    ListTrafficDistributionGroupsCommand: ListTrafficDistributionGroupsCommand,
    ListTrafficDistributionGroupUsersCommand: ListTrafficDistributionGroupUsersCommand,
    ListUseCasesCommand: ListUseCasesCommand,
    ListUserHierarchyGroupsCommand: ListUserHierarchyGroupsCommand,
    ListUserProficienciesCommand: ListUserProficienciesCommand,
    ListUsersCommand: ListUsersCommand,
    ListViewsCommand: ListViewsCommand,
    ListViewVersionsCommand: ListViewVersionsCommand,
    MonitorContactCommand: MonitorContactCommand,
    PauseContactCommand: PauseContactCommand,
    PutUserStatusCommand: PutUserStatusCommand,
    ReleasePhoneNumberCommand: ReleasePhoneNumberCommand,
    ReplicateInstanceCommand: ReplicateInstanceCommand,
    ResumeContactCommand: ResumeContactCommand,
    ResumeContactRecordingCommand: ResumeContactRecordingCommand,
    SearchAgentStatusesCommand: SearchAgentStatusesCommand,
    SearchAvailablePhoneNumbersCommand: SearchAvailablePhoneNumbersCommand,
    SearchContactFlowModulesCommand: SearchContactFlowModulesCommand,
    SearchContactFlowsCommand: SearchContactFlowsCommand,
    SearchContactsCommand: SearchContactsCommand,
    SearchHoursOfOperationsCommand: SearchHoursOfOperationsCommand,
    SearchPredefinedAttributesCommand: SearchPredefinedAttributesCommand,
    SearchPromptsCommand: SearchPromptsCommand,
    SearchQueuesCommand: SearchQueuesCommand,
    SearchQuickConnectsCommand: SearchQuickConnectsCommand,
    SearchResourceTagsCommand: SearchResourceTagsCommand,
    SearchRoutingProfilesCommand: SearchRoutingProfilesCommand,
    SearchSecurityProfilesCommand: SearchSecurityProfilesCommand,
    SearchUserHierarchyGroupsCommand: SearchUserHierarchyGroupsCommand,
    SearchUsersCommand: SearchUsersCommand,
    SearchVocabulariesCommand: SearchVocabulariesCommand,
    SendChatIntegrationEventCommand: SendChatIntegrationEventCommand,
    StartAttachedFileUploadCommand: StartAttachedFileUploadCommand,
    StartChatContactCommand: StartChatContactCommand,
    StartContactEvaluationCommand: StartContactEvaluationCommand,
    StartContactRecordingCommand: StartContactRecordingCommand,
    StartContactStreamingCommand: StartContactStreamingCommand,
    StartOutboundChatContactCommand: StartOutboundChatContactCommand,
    StartOutboundVoiceContactCommand: StartOutboundVoiceContactCommand,
    StartTaskContactCommand: StartTaskContactCommand,
    StartWebRTCContactCommand: StartWebRTCContactCommand,
    StopContactCommand: StopContactCommand,
    StopContactRecordingCommand: StopContactRecordingCommand,
    StopContactStreamingCommand: StopContactStreamingCommand,
    SubmitContactEvaluationCommand: SubmitContactEvaluationCommand,
    SuspendContactRecordingCommand: SuspendContactRecordingCommand,
    TagContactCommand: TagContactCommand,
    TagResourceCommand: TagResourceCommand,
    TransferContactCommand: TransferContactCommand,
    UntagContactCommand: UntagContactCommand,
    UntagResourceCommand: UntagResourceCommand,
    UpdateAgentStatusCommand: UpdateAgentStatusCommand,
    UpdateAuthenticationProfileCommand: UpdateAuthenticationProfileCommand,
    UpdateContactCommand: UpdateContactCommand,
    UpdateContactAttributesCommand: UpdateContactAttributesCommand,
    UpdateContactEvaluationCommand: UpdateContactEvaluationCommand,
    UpdateContactFlowContentCommand: UpdateContactFlowContentCommand,
    UpdateContactFlowMetadataCommand: UpdateContactFlowMetadataCommand,
    UpdateContactFlowModuleContentCommand: UpdateContactFlowModuleContentCommand,
    UpdateContactFlowModuleMetadataCommand: UpdateContactFlowModuleMetadataCommand,
    UpdateContactFlowNameCommand: UpdateContactFlowNameCommand,
    UpdateContactRoutingDataCommand: UpdateContactRoutingDataCommand,
    UpdateContactScheduleCommand: UpdateContactScheduleCommand,
    UpdateEvaluationFormCommand: UpdateEvaluationFormCommand,
    UpdateHoursOfOperationCommand: UpdateHoursOfOperationCommand,
    UpdateInstanceAttributeCommand: UpdateInstanceAttributeCommand,
    UpdateInstanceStorageConfigCommand: UpdateInstanceStorageConfigCommand,
    UpdateParticipantRoleConfigCommand: UpdateParticipantRoleConfigCommand,
    UpdatePhoneNumberCommand: UpdatePhoneNumberCommand,
    UpdatePhoneNumberMetadataCommand: UpdatePhoneNumberMetadataCommand,
    UpdatePredefinedAttributeCommand: UpdatePredefinedAttributeCommand,
    UpdatePromptCommand: UpdatePromptCommand,
    UpdateQueueHoursOfOperationCommand: UpdateQueueHoursOfOperationCommand,
    UpdateQueueMaxContactsCommand: UpdateQueueMaxContactsCommand,
    UpdateQueueNameCommand: UpdateQueueNameCommand,
    UpdateQueueOutboundCallerConfigCommand: UpdateQueueOutboundCallerConfigCommand,
    UpdateQueueStatusCommand: UpdateQueueStatusCommand,
    UpdateQuickConnectConfigCommand: UpdateQuickConnectConfigCommand,
    UpdateQuickConnectNameCommand: UpdateQuickConnectNameCommand,
    UpdateRoutingProfileAgentAvailabilityTimerCommand: UpdateRoutingProfileAgentAvailabilityTimerCommand,
    UpdateRoutingProfileConcurrencyCommand: UpdateRoutingProfileConcurrencyCommand,
    UpdateRoutingProfileDefaultOutboundQueueCommand: UpdateRoutingProfileDefaultOutboundQueueCommand,
    UpdateRoutingProfileNameCommand: UpdateRoutingProfileNameCommand,
    UpdateRoutingProfileQueuesCommand: UpdateRoutingProfileQueuesCommand,
    UpdateRuleCommand: UpdateRuleCommand,
    UpdateSecurityProfileCommand: UpdateSecurityProfileCommand,
    UpdateTaskTemplateCommand: UpdateTaskTemplateCommand,
    UpdateTrafficDistributionCommand: UpdateTrafficDistributionCommand,
    UpdateUserHierarchyCommand: UpdateUserHierarchyCommand,
    UpdateUserHierarchyGroupNameCommand: UpdateUserHierarchyGroupNameCommand,
    UpdateUserHierarchyStructureCommand: UpdateUserHierarchyStructureCommand,
    UpdateUserIdentityInfoCommand: UpdateUserIdentityInfoCommand,
    UpdateUserPhoneConfigCommand: UpdateUserPhoneConfigCommand,
    UpdateUserProficienciesCommand: UpdateUserProficienciesCommand,
    UpdateUserRoutingProfileCommand: UpdateUserRoutingProfileCommand,
    UpdateUserSecurityProfilesCommand: UpdateUserSecurityProfilesCommand,
    UpdateViewContentCommand: UpdateViewContentCommand,
    UpdateViewMetadataCommand: UpdateViewMetadataCommand,
};
class Connect extends ConnectClient {
}
(0,smithy_client_dist_es/* createAggregatedClient */.J1)(commands, Connect);

;// ./node_modules/@aws-sdk/client-connect/dist-es/commands/index.js

































































































































































































































































;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/GetCurrentMetricDataPaginator.js



const paginateGetCurrentMetricData = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, GetCurrentMetricDataCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/GetCurrentUserDataPaginator.js



const paginateGetCurrentUserData = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, GetCurrentUserDataCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/GetMetricDataPaginator.js



const paginateGetMetricData = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, GetMetricDataCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/GetMetricDataV2Paginator.js



const paginateGetMetricDataV2 = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, GetMetricDataV2Command, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListAgentStatusesPaginator.js



const paginateListAgentStatuses = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListAgentStatusesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListApprovedOriginsPaginator.js



const paginateListApprovedOrigins = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListApprovedOriginsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListAuthenticationProfilesPaginator.js



const paginateListAuthenticationProfiles = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListAuthenticationProfilesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListBotsPaginator.js



const paginateListBots = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListBotsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListContactEvaluationsPaginator.js



const paginateListContactEvaluations = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListContactEvaluationsCommand, "NextToken", "NextToken", "");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListContactFlowModulesPaginator.js



const paginateListContactFlowModules = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListContactFlowModulesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListContactFlowsPaginator.js



const paginateListContactFlows = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListContactFlowsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListContactReferencesPaginator.js



const paginateListContactReferences = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListContactReferencesCommand, "NextToken", "NextToken", "");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListDefaultVocabulariesPaginator.js



const paginateListDefaultVocabularies = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListDefaultVocabulariesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListEvaluationFormVersionsPaginator.js



const paginateListEvaluationFormVersions = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListEvaluationFormVersionsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListEvaluationFormsPaginator.js



const paginateListEvaluationForms = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListEvaluationFormsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListFlowAssociationsPaginator.js



const paginateListFlowAssociations = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListFlowAssociationsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListHoursOfOperationsPaginator.js



const paginateListHoursOfOperations = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListHoursOfOperationsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListInstanceAttributesPaginator.js



const paginateListInstanceAttributes = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListInstanceAttributesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListInstanceStorageConfigsPaginator.js



const paginateListInstanceStorageConfigs = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListInstanceStorageConfigsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListInstancesPaginator.js



const paginateListInstances = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListInstancesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListIntegrationAssociationsPaginator.js



const paginateListIntegrationAssociations = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListIntegrationAssociationsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListLambdaFunctionsPaginator.js



const paginateListLambdaFunctions = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListLambdaFunctionsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListLexBotsPaginator.js



const paginateListLexBots = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListLexBotsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListPhoneNumbersPaginator.js



const paginateListPhoneNumbers = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListPhoneNumbersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListPhoneNumbersV2Paginator.js



const paginateListPhoneNumbersV2 = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListPhoneNumbersV2Command, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListPredefinedAttributesPaginator.js



const paginateListPredefinedAttributes = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListPredefinedAttributesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListPromptsPaginator.js



const paginateListPrompts = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListPromptsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListQueueQuickConnectsPaginator.js



const paginateListQueueQuickConnects = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListQueueQuickConnectsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListQueuesPaginator.js



const paginateListQueues = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListQueuesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListQuickConnectsPaginator.js



const paginateListQuickConnects = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListQuickConnectsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListRealtimeContactAnalysisSegmentsV2Paginator.js



const paginateListRealtimeContactAnalysisSegmentsV2 = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListRealtimeContactAnalysisSegmentsV2Command, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListRoutingProfileQueuesPaginator.js



const paginateListRoutingProfileQueues = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListRoutingProfileQueuesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListRoutingProfilesPaginator.js



const paginateListRoutingProfiles = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListRoutingProfilesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListRulesPaginator.js



const paginateListRules = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListRulesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListSecurityKeysPaginator.js



const paginateListSecurityKeys = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListSecurityKeysCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListSecurityProfileApplicationsPaginator.js



const paginateListSecurityProfileApplications = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListSecurityProfileApplicationsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListSecurityProfilePermissionsPaginator.js



const paginateListSecurityProfilePermissions = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListSecurityProfilePermissionsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListSecurityProfilesPaginator.js



const paginateListSecurityProfiles = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListSecurityProfilesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListTaskTemplatesPaginator.js



const paginateListTaskTemplates = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListTaskTemplatesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListTrafficDistributionGroupUsersPaginator.js



const paginateListTrafficDistributionGroupUsers = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListTrafficDistributionGroupUsersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListTrafficDistributionGroupsPaginator.js



const paginateListTrafficDistributionGroups = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListTrafficDistributionGroupsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListUseCasesPaginator.js



const paginateListUseCases = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListUseCasesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListUserHierarchyGroupsPaginator.js



const paginateListUserHierarchyGroups = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListUserHierarchyGroupsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListUserProficienciesPaginator.js



const paginateListUserProficiencies = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListUserProficienciesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListUsersPaginator.js



const paginateListUsers = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListUsersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListViewVersionsPaginator.js



const paginateListViewVersions = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListViewVersionsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/ListViewsPaginator.js



const paginateListViews = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, ListViewsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchAgentStatusesPaginator.js



const paginateSearchAgentStatuses = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchAgentStatusesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchAvailablePhoneNumbersPaginator.js



const paginateSearchAvailablePhoneNumbers = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchAvailablePhoneNumbersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchContactFlowModulesPaginator.js



const paginateSearchContactFlowModules = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchContactFlowModulesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchContactFlowsPaginator.js



const paginateSearchContactFlows = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchContactFlowsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchContactsPaginator.js



const paginateSearchContacts = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchContactsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchHoursOfOperationsPaginator.js



const paginateSearchHoursOfOperations = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchHoursOfOperationsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchPredefinedAttributesPaginator.js



const paginateSearchPredefinedAttributes = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchPredefinedAttributesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchPromptsPaginator.js



const paginateSearchPrompts = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchPromptsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchQueuesPaginator.js



const paginateSearchQueues = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchQueuesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchQuickConnectsPaginator.js



const paginateSearchQuickConnects = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchQuickConnectsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchResourceTagsPaginator.js



const paginateSearchResourceTags = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchResourceTagsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchRoutingProfilesPaginator.js



const paginateSearchRoutingProfiles = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchRoutingProfilesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchSecurityProfilesPaginator.js



const paginateSearchSecurityProfiles = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchSecurityProfilesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchUserHierarchyGroupsPaginator.js



const paginateSearchUserHierarchyGroups = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchUserHierarchyGroupsCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchUsersPaginator.js



const paginateSearchUsers = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchUsersCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/SearchVocabulariesPaginator.js



const paginateSearchVocabularies = (0,core_dist_es/* createPaginator */.KU)(ConnectClient, SearchVocabulariesCommand, "NextToken", "NextToken", "MaxResults");

;// ./node_modules/@aws-sdk/client-connect/dist-es/pagination/index.js

































































;// ./node_modules/@aws-sdk/client-connect/dist-es/models/index.js




;// ./node_modules/@aws-sdk/client-connect/dist-es/index.js








/***/ }),

/***/ 252:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $Command: () => (/* reexport */ smithy_client_dist_es/* Command */.uB),
  AIAgentAssociationConfigurationType: () => (/* reexport */ AIAgentAssociationConfigurationType),
  AIAgentConfiguration: () => (/* reexport */ AIAgentConfiguration),
  AIAgentType: () => (/* reexport */ AIAgentType),
  AIPromptAPIFormat: () => (/* reexport */ AIPromptAPIFormat),
  AIPromptDataFilterSensitiveLog: () => (/* reexport */ AIPromptDataFilterSensitiveLog),
  AIPromptTemplateConfiguration: () => (/* reexport */ AIPromptTemplateConfiguration),
  AIPromptTemplateConfigurationFilterSensitiveLog: () => (/* reexport */ AIPromptTemplateConfigurationFilterSensitiveLog),
  AIPromptTemplateType: () => (/* reexport */ AIPromptTemplateType),
  AIPromptType: () => (/* reexport */ AIPromptType),
  AccessDeniedException: () => (/* reexport */ AccessDeniedException),
  AssistantAssociationInputData: () => (/* reexport */ AssistantAssociationInputData),
  AssistantAssociationOutputData: () => (/* reexport */ AssistantAssociationOutputData),
  AssistantCapabilityType: () => (/* reexport */ AssistantCapabilityType),
  AssistantStatus: () => (/* reexport */ AssistantStatus),
  AssistantType: () => (/* reexport */ AssistantType),
  AssociationConfigurationData: () => (/* reexport */ AssociationConfigurationData),
  AssociationType: () => (/* reexport */ AssociationType),
  ChunkingStrategy: () => (/* reexport */ ChunkingStrategy),
  Configuration: () => (/* reexport */ Configuration),
  ConflictException: () => (/* reexport */ ConflictException),
  ContentAssociationContents: () => (/* reexport */ ContentAssociationContents),
  ContentAssociationType: () => (/* reexport */ ContentAssociationType),
  ContentDataDetailsFilterSensitiveLog: () => (/* reexport */ ContentDataDetailsFilterSensitiveLog),
  ContentDataFilterSensitiveLog: () => (/* reexport */ ContentDataFilterSensitiveLog),
  ContentFeedbackData: () => (/* reexport */ ContentFeedbackData),
  ContentStatus: () => (/* reexport */ ContentStatus),
  CreateAIAgentCommand: () => (/* reexport */ CreateAIAgentCommand),
  CreateAIAgentVersionCommand: () => (/* reexport */ CreateAIAgentVersionCommand),
  CreateAIPromptCommand: () => (/* reexport */ CreateAIPromptCommand),
  CreateAIPromptRequestFilterSensitiveLog: () => (/* reexport */ CreateAIPromptRequestFilterSensitiveLog),
  CreateAIPromptResponseFilterSensitiveLog: () => (/* reexport */ CreateAIPromptResponseFilterSensitiveLog),
  CreateAIPromptVersionCommand: () => (/* reexport */ CreateAIPromptVersionCommand),
  CreateAIPromptVersionResponseFilterSensitiveLog: () => (/* reexport */ CreateAIPromptVersionResponseFilterSensitiveLog),
  CreateAssistantAssociationCommand: () => (/* reexport */ CreateAssistantAssociationCommand),
  CreateAssistantCommand: () => (/* reexport */ CreateAssistantCommand),
  CreateContentAssociationCommand: () => (/* reexport */ CreateContentAssociationCommand),
  CreateContentCommand: () => (/* reexport */ CreateContentCommand),
  CreateContentResponseFilterSensitiveLog: () => (/* reexport */ CreateContentResponseFilterSensitiveLog),
  CreateKnowledgeBaseCommand: () => (/* reexport */ CreateKnowledgeBaseCommand),
  CreateKnowledgeBaseRequestFilterSensitiveLog: () => (/* reexport */ CreateKnowledgeBaseRequestFilterSensitiveLog),
  CreateKnowledgeBaseResponseFilterSensitiveLog: () => (/* reexport */ CreateKnowledgeBaseResponseFilterSensitiveLog),
  CreateQuickResponseCommand: () => (/* reexport */ CreateQuickResponseCommand),
  CreateQuickResponseRequestFilterSensitiveLog: () => (/* reexport */ CreateQuickResponseRequestFilterSensitiveLog),
  CreateQuickResponseResponseFilterSensitiveLog: () => (/* reexport */ CreateQuickResponseResponseFilterSensitiveLog),
  CreateSessionCommand: () => (/* reexport */ CreateSessionCommand),
  DataDetails: () => (/* reexport */ DataDetails),
  DataDetailsFilterSensitiveLog: () => (/* reexport */ DataDetailsFilterSensitiveLog),
  DataReference: () => (/* reexport */ DataReference),
  DataSummaryFilterSensitiveLog: () => (/* reexport */ DataSummaryFilterSensitiveLog),
  DeleteAIAgentCommand: () => (/* reexport */ DeleteAIAgentCommand),
  DeleteAIAgentVersionCommand: () => (/* reexport */ DeleteAIAgentVersionCommand),
  DeleteAIPromptCommand: () => (/* reexport */ DeleteAIPromptCommand),
  DeleteAIPromptVersionCommand: () => (/* reexport */ DeleteAIPromptVersionCommand),
  DeleteAssistantAssociationCommand: () => (/* reexport */ DeleteAssistantAssociationCommand),
  DeleteAssistantCommand: () => (/* reexport */ DeleteAssistantCommand),
  DeleteContentAssociationCommand: () => (/* reexport */ DeleteContentAssociationCommand),
  DeleteContentCommand: () => (/* reexport */ DeleteContentCommand),
  DeleteImportJobCommand: () => (/* reexport */ DeleteImportJobCommand),
  DeleteKnowledgeBaseCommand: () => (/* reexport */ DeleteKnowledgeBaseCommand),
  DeleteQuickResponseCommand: () => (/* reexport */ DeleteQuickResponseCommand),
  DocumentFilterSensitiveLog: () => (/* reexport */ DocumentFilterSensitiveLog),
  DocumentTextFilterSensitiveLog: () => (/* reexport */ DocumentTextFilterSensitiveLog),
  ExternalSource: () => (/* reexport */ ExternalSource),
  FilterField: () => (/* reexport */ FilterField),
  FilterOperator: () => (/* reexport */ FilterOperator),
  GenerativeDataDetailsFilterSensitiveLog: () => (/* reexport */ GenerativeDataDetailsFilterSensitiveLog),
  GetAIAgentCommand: () => (/* reexport */ GetAIAgentCommand),
  GetAIPromptCommand: () => (/* reexport */ GetAIPromptCommand),
  GetAIPromptResponseFilterSensitiveLog: () => (/* reexport */ GetAIPromptResponseFilterSensitiveLog),
  GetAssistantAssociationCommand: () => (/* reexport */ GetAssistantAssociationCommand),
  GetAssistantCommand: () => (/* reexport */ GetAssistantCommand),
  GetContentAssociationCommand: () => (/* reexport */ GetContentAssociationCommand),
  GetContentCommand: () => (/* reexport */ GetContentCommand),
  GetContentResponseFilterSensitiveLog: () => (/* reexport */ GetContentResponseFilterSensitiveLog),
  GetContentSummaryCommand: () => (/* reexport */ GetContentSummaryCommand),
  GetImportJobCommand: () => (/* reexport */ GetImportJobCommand),
  GetImportJobResponseFilterSensitiveLog: () => (/* reexport */ GetImportJobResponseFilterSensitiveLog),
  GetKnowledgeBaseCommand: () => (/* reexport */ GetKnowledgeBaseCommand),
  GetKnowledgeBaseResponseFilterSensitiveLog: () => (/* reexport */ GetKnowledgeBaseResponseFilterSensitiveLog),
  GetQuickResponseCommand: () => (/* reexport */ GetQuickResponseCommand),
  GetQuickResponseResponseFilterSensitiveLog: () => (/* reexport */ GetQuickResponseResponseFilterSensitiveLog),
  GetRecommendationsCommand: () => (/* reexport */ GetRecommendationsCommand),
  GetRecommendationsResponseFilterSensitiveLog: () => (/* reexport */ GetRecommendationsResponseFilterSensitiveLog),
  GetSessionCommand: () => (/* reexport */ GetSessionCommand),
  GroupingConfigurationFilterSensitiveLog: () => (/* reexport */ GroupingConfigurationFilterSensitiveLog),
  ImportJobDataFilterSensitiveLog: () => (/* reexport */ ImportJobDataFilterSensitiveLog),
  ImportJobStatus: () => (/* reexport */ ImportJobStatus),
  ImportJobType: () => (/* reexport */ ImportJobType),
  IntentDetectedDataDetailsFilterSensitiveLog: () => (/* reexport */ IntentDetectedDataDetailsFilterSensitiveLog),
  KnowledgeBaseDataFilterSensitiveLog: () => (/* reexport */ KnowledgeBaseDataFilterSensitiveLog),
  KnowledgeBaseSearchType: () => (/* reexport */ KnowledgeBaseSearchType),
  KnowledgeBaseStatus: () => (/* reexport */ KnowledgeBaseStatus),
  KnowledgeBaseSummaryFilterSensitiveLog: () => (/* reexport */ KnowledgeBaseSummaryFilterSensitiveLog),
  KnowledgeBaseType: () => (/* reexport */ KnowledgeBaseType),
  ListAIAgentVersionsCommand: () => (/* reexport */ ListAIAgentVersionsCommand),
  ListAIAgentsCommand: () => (/* reexport */ ListAIAgentsCommand),
  ListAIPromptVersionsCommand: () => (/* reexport */ ListAIPromptVersionsCommand),
  ListAIPromptsCommand: () => (/* reexport */ ListAIPromptsCommand),
  ListAssistantAssociationsCommand: () => (/* reexport */ ListAssistantAssociationsCommand),
  ListAssistantsCommand: () => (/* reexport */ ListAssistantsCommand),
  ListContentAssociationsCommand: () => (/* reexport */ ListContentAssociationsCommand),
  ListContentsCommand: () => (/* reexport */ ListContentsCommand),
  ListImportJobsCommand: () => (/* reexport */ ListImportJobsCommand),
  ListKnowledgeBasesCommand: () => (/* reexport */ ListKnowledgeBasesCommand),
  ListKnowledgeBasesResponseFilterSensitiveLog: () => (/* reexport */ ListKnowledgeBasesResponseFilterSensitiveLog),
  ListQuickResponsesCommand: () => (/* reexport */ ListQuickResponsesCommand),
  ListQuickResponsesResponseFilterSensitiveLog: () => (/* reexport */ ListQuickResponsesResponseFilterSensitiveLog),
  ListTagsForResourceCommand: () => (/* reexport */ ListTagsForResourceCommand),
  ManagedSourceConfiguration: () => (/* reexport */ ManagedSourceConfiguration),
  ManagedSourceConfigurationFilterSensitiveLog: () => (/* reexport */ ManagedSourceConfigurationFilterSensitiveLog),
  NotifyRecommendationsReceivedCommand: () => (/* reexport */ NotifyRecommendationsReceivedCommand),
  OrCondition: () => (/* reexport */ OrCondition),
  Order: () => (/* reexport */ Order),
  Origin: () => (/* reexport */ Origin),
  ParsingStrategy: () => (/* reexport */ ParsingStrategy),
  PreconditionFailedException: () => (/* reexport */ PreconditionFailedException),
  Priority: () => (/* reexport */ Priority),
  PutFeedbackCommand: () => (/* reexport */ PutFeedbackCommand),
  QConnect: () => (/* reexport */ QConnect),
  QConnectClient: () => (/* reexport */ QConnectClient),
  QConnectServiceException: () => (/* reexport */ QConnectServiceException),
  QueryAssistantCommand: () => (/* reexport */ QueryAssistantCommand),
  QueryAssistantRequestFilterSensitiveLog: () => (/* reexport */ QueryAssistantRequestFilterSensitiveLog),
  QueryAssistantResponseFilterSensitiveLog: () => (/* reexport */ QueryAssistantResponseFilterSensitiveLog),
  QueryCondition: () => (/* reexport */ QueryCondition),
  QueryConditionComparisonOperator: () => (/* reexport */ QueryConditionComparisonOperator),
  QueryConditionFieldName: () => (/* reexport */ QueryConditionFieldName),
  QueryInputData: () => (/* reexport */ QueryInputData),
  QueryInputDataFilterSensitiveLog: () => (/* reexport */ QueryInputDataFilterSensitiveLog),
  QueryRecommendationTriggerDataFilterSensitiveLog: () => (/* reexport */ QueryRecommendationTriggerDataFilterSensitiveLog),
  QueryResultType: () => (/* reexport */ QueryResultType),
  QueryTextInputDataFilterSensitiveLog: () => (/* reexport */ QueryTextInputDataFilterSensitiveLog),
  QuickResponseContentProvider: () => (/* reexport */ QuickResponseContentProvider),
  QuickResponseContentProviderFilterSensitiveLog: () => (/* reexport */ QuickResponseContentProviderFilterSensitiveLog),
  QuickResponseContentsFilterSensitiveLog: () => (/* reexport */ QuickResponseContentsFilterSensitiveLog),
  QuickResponseDataFilterSensitiveLog: () => (/* reexport */ QuickResponseDataFilterSensitiveLog),
  QuickResponseDataProvider: () => (/* reexport */ QuickResponseDataProvider),
  QuickResponseDataProviderFilterSensitiveLog: () => (/* reexport */ QuickResponseDataProviderFilterSensitiveLog),
  QuickResponseFilterOperator: () => (/* reexport */ QuickResponseFilterOperator),
  QuickResponseQueryOperator: () => (/* reexport */ QuickResponseQueryOperator),
  QuickResponseSearchResultDataFilterSensitiveLog: () => (/* reexport */ QuickResponseSearchResultDataFilterSensitiveLog),
  QuickResponseStatus: () => (/* reexport */ QuickResponseStatus),
  QuickResponseSummaryFilterSensitiveLog: () => (/* reexport */ QuickResponseSummaryFilterSensitiveLog),
  RecommendationDataFilterSensitiveLog: () => (/* reexport */ RecommendationDataFilterSensitiveLog),
  RecommendationSourceType: () => (/* reexport */ RecommendationSourceType),
  RecommendationTriggerData: () => (/* reexport */ RecommendationTriggerData),
  RecommendationTriggerDataFilterSensitiveLog: () => (/* reexport */ RecommendationTriggerDataFilterSensitiveLog),
  RecommendationTriggerFilterSensitiveLog: () => (/* reexport */ RecommendationTriggerFilterSensitiveLog),
  RecommendationTriggerType: () => (/* reexport */ RecommendationTriggerType),
  RecommendationType: () => (/* reexport */ RecommendationType),
  ReferenceType: () => (/* reexport */ ReferenceType),
  Relevance: () => (/* reexport */ Relevance),
  RelevanceLevel: () => (/* reexport */ RelevanceLevel),
  RemoveAssistantAIAgentCommand: () => (/* reexport */ RemoveAssistantAIAgentCommand),
  RemoveKnowledgeBaseTemplateUriCommand: () => (/* reexport */ RemoveKnowledgeBaseTemplateUriCommand),
  RequestTimeoutException: () => (/* reexport */ RequestTimeoutException),
  ResourceNotFoundException: () => (/* reexport */ ResourceNotFoundException),
  ResultDataFilterSensitiveLog: () => (/* reexport */ ResultDataFilterSensitiveLog),
  RuntimeSessionDataFilterSensitiveLog: () => (/* reexport */ RuntimeSessionDataFilterSensitiveLog),
  RuntimeSessionDataValue: () => (/* reexport */ RuntimeSessionDataValue),
  RuntimeSessionDataValueFilterSensitiveLog: () => (/* reexport */ RuntimeSessionDataValueFilterSensitiveLog),
  SearchContentCommand: () => (/* reexport */ SearchContentCommand),
  SearchQuickResponsesCommand: () => (/* reexport */ SearchQuickResponsesCommand),
  SearchQuickResponsesRequestFilterSensitiveLog: () => (/* reexport */ SearchQuickResponsesRequestFilterSensitiveLog),
  SearchQuickResponsesResponseFilterSensitiveLog: () => (/* reexport */ SearchQuickResponsesResponseFilterSensitiveLog),
  SearchSessionsCommand: () => (/* reexport */ SearchSessionsCommand),
  ServiceQuotaExceededException: () => (/* reexport */ ServiceQuotaExceededException),
  SessionDataNamespace: () => (/* reexport */ SessionDataNamespace),
  SourceConfiguration: () => (/* reexport */ SourceConfiguration),
  SourceConfigurationFilterSensitiveLog: () => (/* reexport */ SourceConfigurationFilterSensitiveLog),
  SourceContentDataDetailsFilterSensitiveLog: () => (/* reexport */ SourceContentDataDetailsFilterSensitiveLog),
  SourceContentType: () => (/* reexport */ SourceContentType),
  StartContentUploadCommand: () => (/* reexport */ StartContentUploadCommand),
  StartContentUploadResponseFilterSensitiveLog: () => (/* reexport */ StartContentUploadResponseFilterSensitiveLog),
  StartImportJobCommand: () => (/* reexport */ StartImportJobCommand),
  StartImportJobResponseFilterSensitiveLog: () => (/* reexport */ StartImportJobResponseFilterSensitiveLog),
  Status: () => (/* reexport */ Status),
  SyncStatus: () => (/* reexport */ SyncStatus),
  TagFilter: () => (/* reexport */ TagFilter),
  TagResourceCommand: () => (/* reexport */ TagResourceCommand),
  TargetType: () => (/* reexport */ TargetType),
  TextDataFilterSensitiveLog: () => (/* reexport */ TextDataFilterSensitiveLog),
  TextFullAIPromptEditTemplateConfigurationFilterSensitiveLog: () => (/* reexport */ TextFullAIPromptEditTemplateConfigurationFilterSensitiveLog),
  ThrottlingException: () => (/* reexport */ ThrottlingException),
  TooManyTagsException: () => (/* reexport */ TooManyTagsException),
  UntagResourceCommand: () => (/* reexport */ UntagResourceCommand),
  UpdateAIAgentCommand: () => (/* reexport */ UpdateAIAgentCommand),
  UpdateAIPromptCommand: () => (/* reexport */ UpdateAIPromptCommand),
  UpdateAIPromptRequestFilterSensitiveLog: () => (/* reexport */ UpdateAIPromptRequestFilterSensitiveLog),
  UpdateAIPromptResponseFilterSensitiveLog: () => (/* reexport */ UpdateAIPromptResponseFilterSensitiveLog),
  UpdateAssistantAIAgentCommand: () => (/* reexport */ UpdateAssistantAIAgentCommand),
  UpdateContentCommand: () => (/* reexport */ UpdateContentCommand),
  UpdateContentResponseFilterSensitiveLog: () => (/* reexport */ UpdateContentResponseFilterSensitiveLog),
  UpdateKnowledgeBaseTemplateUriCommand: () => (/* reexport */ UpdateKnowledgeBaseTemplateUriCommand),
  UpdateKnowledgeBaseTemplateUriResponseFilterSensitiveLog: () => (/* reexport */ UpdateKnowledgeBaseTemplateUriResponseFilterSensitiveLog),
  UpdateQuickResponseCommand: () => (/* reexport */ UpdateQuickResponseCommand),
  UpdateQuickResponseRequestFilterSensitiveLog: () => (/* reexport */ UpdateQuickResponseRequestFilterSensitiveLog),
  UpdateQuickResponseResponseFilterSensitiveLog: () => (/* reexport */ UpdateQuickResponseResponseFilterSensitiveLog),
  UpdateSessionCommand: () => (/* reexport */ UpdateSessionCommand),
  UpdateSessionDataCommand: () => (/* reexport */ UpdateSessionDataCommand),
  UpdateSessionDataRequestFilterSensitiveLog: () => (/* reexport */ UpdateSessionDataRequestFilterSensitiveLog),
  UpdateSessionDataResponseFilterSensitiveLog: () => (/* reexport */ UpdateSessionDataResponseFilterSensitiveLog),
  ValidationException: () => (/* reexport */ ValidationException),
  VisibilityStatus: () => (/* reexport */ VisibilityStatus),
  WebCrawlerConfigurationFilterSensitiveLog: () => (/* reexport */ WebCrawlerConfigurationFilterSensitiveLog),
  WebScopeType: () => (/* reexport */ WebScopeType),
  __Client: () => (/* reexport */ smithy_client_dist_es/* Client */.Kj),
  paginateListAIAgentVersions: () => (/* reexport */ paginateListAIAgentVersions),
  paginateListAIAgents: () => (/* reexport */ paginateListAIAgents),
  paginateListAIPromptVersions: () => (/* reexport */ paginateListAIPromptVersions),
  paginateListAIPrompts: () => (/* reexport */ paginateListAIPrompts),
  paginateListAssistantAssociations: () => (/* reexport */ paginateListAssistantAssociations),
  paginateListAssistants: () => (/* reexport */ paginateListAssistants),
  paginateListContentAssociations: () => (/* reexport */ paginateListContentAssociations),
  paginateListContents: () => (/* reexport */ paginateListContents),
  paginateListImportJobs: () => (/* reexport */ paginateListImportJobs),
  paginateListKnowledgeBases: () => (/* reexport */ paginateListKnowledgeBases),
  paginateListQuickResponses: () => (/* reexport */ paginateListQuickResponses),
  paginateQueryAssistant: () => (/* reexport */ paginateQueryAssistant),
  paginateSearchContent: () => (/* reexport */ paginateSearchContent),
  paginateSearchQuickResponses: () => (/* reexport */ paginateSearchQuickResponses),
  paginateSearchSessions: () => (/* reexport */ paginateSearchSessions)
});

// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-host-header/dist-es/index.js
var dist_es = __webpack_require__(1095);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js + 1 modules
var middleware_logger_dist_es = __webpack_require__(9359);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js
var middleware_recursion_detection_dist_es = __webpack_require__(8377);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js + 6 modules
var middleware_user_agent_dist_es = __webpack_require__(6961);
// EXTERNAL MODULE: ./node_modules/@smithy/config-resolver/dist-es/index.js + 13 modules
var config_resolver_dist_es = __webpack_require__(1487);
// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/index.js + 17 modules
var core_dist_es = __webpack_require__(2516);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-content-length/dist-es/index.js
var middleware_content_length_dist_es = __webpack_require__(649);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-endpoint/dist-es/index.js + 8 modules
var middleware_endpoint_dist_es = __webpack_require__(7012);
// EXTERNAL MODULE: ./node_modules/@smithy/middleware-retry/dist-es/index.js + 10 modules
var middleware_retry_dist_es = __webpack_require__(6232);
// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 27 modules
var smithy_client_dist_es = __webpack_require__(5342);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js + 15 modules
var resolveAwsSdkSigV4Config = __webpack_require__(8088);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@aws-sdk/client-qconnect/dist-es/auth/httpAuthSchemeProvider.js


const defaultQConnectHttpAuthSchemeParametersProvider = async (config, context, input) => {
    return {
        operation: (0,util_middleware_dist_es/* getSmithyContext */.u)(context).operation,
        region: (await (0,util_middleware_dist_es/* normalizeProvider */.t)(config.region)()) ||
            (() => {
                throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
            })(),
    };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
    return {
        schemeId: "aws.auth#sigv4",
        signingProperties: {
            name: "wisdom",
            region: authParameters.region,
        },
        propertiesExtractor: (config, context) => ({
            signingProperties: {
                config,
                context,
            },
        }),
    };
}
const defaultQConnectHttpAuthSchemeProvider = (authParameters) => {
    const options = [];
    switch (authParameters.operation) {
        default: {
            options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
        }
    }
    return options;
};
const resolveHttpAuthSchemeConfig = (config) => {
    const config_0 = (0,resolveAwsSdkSigV4Config/* resolveAwsSdkSigV4Config */.h)(config);
    return {
        ...config_0,
    };
};

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/endpoint/EndpointParameters.js
const resolveClientEndpointParameters = (options) => {
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "wisdom",
    };
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

;// ./node_modules/@aws-sdk/client-qconnect/package.json
const package_namespaceObject = {"rE":"3.667.0"};
// EXTERNAL MODULE: ./node_modules/@aws-crypto/sha256-browser/build/module/index.js + 13 modules
var build_module = __webpack_require__(7272);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-user-agent-browser/dist-es/index.js
var util_user_agent_browser_dist_es = __webpack_require__(9391);
// EXTERNAL MODULE: ./node_modules/@smithy/fetch-http-handler/dist-es/index.js + 4 modules
var fetch_http_handler_dist_es = __webpack_require__(3957);
// EXTERNAL MODULE: ./node_modules/@smithy/invalid-dependency/dist-es/invalidProvider.js
var invalidProvider = __webpack_require__(2423);
// EXTERNAL MODULE: ./node_modules/@smithy/util-body-length-browser/dist-es/index.js + 1 modules
var util_body_length_browser_dist_es = __webpack_require__(9795);
// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var util_retry_dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js + 4 modules
var AwsSdkSigV4Signer = __webpack_require__(6228);
// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 3 modules
var util_base64_dist_es = __webpack_require__(1302);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8_browser = __webpack_require__(2637);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js
var toUtf8_browser = __webpack_require__(5792);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 9 modules
var util_endpoints_dist_es = __webpack_require__(6652);
// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var _smithy_util_endpoints_dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/client-qconnect/dist-es/endpoint/ruleset.js
const s = "required", t = "fn", u = "argv", v = "ref";
const a = true, b = "isSet", c = "booleanEquals", d = "error", e = "endpoint", f = "tree", g = "PartitionResult", h = { [s]: false, "type": "String" }, i = { [s]: true, "default": false, "type": "Boolean" }, j = { [v]: "Endpoint" }, k = { [t]: c, [u]: [{ [v]: "UseFIPS" }, true] }, l = { [t]: c, [u]: [{ [v]: "UseDualStack" }, true] }, m = {}, n = { [t]: "getAttr", [u]: [{ [v]: g }, "supportsFIPS"] }, o = { [t]: c, [u]: [true, { [t]: "getAttr", [u]: [{ [v]: g }, "supportsDualStack"] }] }, p = [k], q = [l], r = [{ [v]: "Region" }];
const _data = { version: "1.0", parameters: { Region: h, UseDualStack: i, UseFIPS: i, Endpoint: h }, rules: [{ conditions: [{ [t]: b, [u]: [j] }], rules: [{ conditions: p, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { rules: [{ conditions: q, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: j, properties: m, headers: m }, type: e }], type: f }], type: f }, { rules: [{ conditions: [{ [t]: b, [u]: r }], rules: [{ conditions: [{ [t]: "aws.partition", [u]: r, assign: g }], rules: [{ conditions: [k, l], rules: [{ conditions: [{ [t]: c, [u]: [a, n] }, o], rules: [{ rules: [{ endpoint: { url: "https://wisdom-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: p, rules: [{ conditions: [{ [t]: c, [u]: [n, a] }], rules: [{ rules: [{ endpoint: { url: "https://wisdom-fips.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: q, rules: [{ conditions: [o], rules: [{ rules: [{ endpoint: { url: "https://wisdom.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { rules: [{ endpoint: { url: "https://wisdom.{Region}.{PartitionResult#dnsSuffix}", properties: m, headers: m }, type: e }], type: f }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }], type: f }] };
const ruleSet = _data;

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/endpoint/endpointResolver.js



const cache = new _smithy_util_endpoints_dist_es/* EndpointCache */.kS({
    size: 50,
    params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"],
});
const defaultEndpointResolver = (endpointParams, context = {}) => {
    return cache.get(endpointParams, () => (0,_smithy_util_endpoints_dist_es/* resolveEndpoint */.sO)(ruleSet, {
        endpointParams: endpointParams,
        logger: context.logger,
    }));
};
_smithy_util_endpoints_dist_es/* customEndpointFunctions */.mw.aws = util_endpoints_dist_es/* awsEndpointFunctions */.UF;

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/runtimeConfig.shared.js







const getRuntimeConfig = (config) => {
    return {
        apiVersion: "2020-10-19",
        base64Decoder: config?.base64Decoder ?? util_base64_dist_es/* fromBase64 */.E,
        base64Encoder: config?.base64Encoder ?? util_base64_dist_es/* toBase64 */.n,
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
        extensions: config?.extensions ?? [],
        httpAuthSchemeProvider: config?.httpAuthSchemeProvider ?? defaultQConnectHttpAuthSchemeProvider,
        httpAuthSchemes: config?.httpAuthSchemes ?? [
            {
                schemeId: "aws.auth#sigv4",
                identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
                signer: new AwsSdkSigV4Signer/* AwsSdkSigV4Signer */.f2(),
            },
        ],
        logger: config?.logger ?? new smithy_client_dist_es/* NoOpLogger */.N4(),
        serviceId: config?.serviceId ?? "QConnect",
        urlParser: config?.urlParser ?? url_parser_dist_es/* parseUrl */.D,
        utf8Decoder: config?.utf8Decoder ?? fromUtf8_browser/* fromUtf8 */.a,
        utf8Encoder: config?.utf8Encoder ?? toUtf8_browser/* toUtf8 */.P,
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-defaults-mode-browser/dist-es/index.js + 8 modules
var util_defaults_mode_browser_dist_es = __webpack_require__(8727);
;// ./node_modules/@aws-sdk/client-qconnect/dist-es/runtimeConfig.browser.js











const runtimeConfig_browser_getRuntimeConfig = (config) => {
    const defaultsMode = (0,util_defaults_mode_browser_dist_es/* resolveDefaultsModeConfig */.I)(config);
    const defaultConfigProvider = () => defaultsMode().then(smithy_client_dist_es/* loadConfigsForDefaultMode */.lT);
    const clientSharedValues = getRuntimeConfig(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        bodyLengthChecker: config?.bodyLengthChecker ?? util_body_length_browser_dist_es/* calculateBodyLength */.n,
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ??
            (0,util_user_agent_browser_dist_es/* defaultUserAgent */.m)({ serviceId: clientSharedValues.serviceId, clientVersion: package_namespaceObject.rE }),
        maxAttempts: config?.maxAttempts ?? util_retry_dist_es/* DEFAULT_MAX_ATTEMPTS */.Gz,
        region: config?.region ?? (0,invalidProvider/* invalidProvider */.B)("Region is missing"),
        requestHandler: fetch_http_handler_dist_es/* FetchHttpHandler */.NC.create(config?.requestHandler ?? defaultConfigProvider),
        retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || util_retry_dist_es/* DEFAULT_RETRY_MODE */.L0),
        sha256: config?.sha256 ?? build_module/* Sha256 */.I,
        streamCollector: config?.streamCollector ?? fetch_http_handler_dist_es/* streamCollector */.kv,
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(config_resolver_dist_es/* DEFAULT_USE_DUALSTACK_ENDPOINT */.VW)),
        useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(config_resolver_dist_es/* DEFAULT_USE_FIPS_ENDPOINT */.Hj)),
    };
};

// EXTERNAL MODULE: ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js + 3 modules
var region_config_resolver_dist_es = __webpack_require__(6928);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
;// ./node_modules/@aws-sdk/client-qconnect/dist-es/auth/httpAuthExtensionConfiguration.js
const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/runtimeExtensions.js




const asPartial = (t) => t;
const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = {
        ...asPartial((0,region_config_resolver_dist_es/* getAwsRegionExtensionConfiguration */.Rq)(runtimeConfig)),
        ...asPartial((0,smithy_client_dist_es/* getDefaultExtensionConfiguration */.xA)(runtimeConfig)),
        ...asPartial((0,protocol_http_dist_es/* getHttpHandlerExtensionConfiguration */.eS)(runtimeConfig)),
        ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig)),
    };
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return {
        ...runtimeConfig,
        ...(0,region_config_resolver_dist_es/* resolveAwsRegionExtensionConfiguration */.$3)(extensionConfiguration),
        ...(0,smithy_client_dist_es/* resolveDefaultRuntimeConfig */.uv)(extensionConfiguration),
        ...(0,protocol_http_dist_es/* resolveHttpHandlerRuntimeConfig */.jt)(extensionConfiguration),
        ...resolveHttpAuthRuntimeConfig(extensionConfiguration),
    };
};

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/QConnectClient.js















class QConnectClient extends smithy_client_dist_es/* Client */.Kj {
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig_browser_getRuntimeConfig(configuration || {});
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = (0,middleware_user_agent_dist_es/* resolveUserAgentConfig */.Dc)(_config_1);
        const _config_3 = (0,middleware_retry_dist_es/* resolveRetryConfig */.$z)(_config_2);
        const _config_4 = (0,config_resolver_dist_es/* resolveRegionConfig */.TD)(_config_3);
        const _config_5 = (0,dist_es/* resolveHostHeaderConfig */.OV)(_config_4);
        const _config_6 = (0,middleware_endpoint_dist_es/* resolveEndpointConfig */.Co)(_config_5);
        const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0,middleware_user_agent_dist_es/* getUserAgentPlugin */.sM)(this.config));
        this.middlewareStack.use((0,middleware_retry_dist_es/* getRetryPlugin */.ey)(this.config));
        this.middlewareStack.use((0,middleware_content_length_dist_es/* getContentLengthPlugin */.vK)(this.config));
        this.middlewareStack.use((0,dist_es/* getHostHeaderPlugin */.TC)(this.config));
        this.middlewareStack.use((0,middleware_logger_dist_es/* getLoggerPlugin */.Y7)(this.config));
        this.middlewareStack.use((0,middleware_recursion_detection_dist_es/* getRecursionDetectionPlugin */.n4)(this.config));
        this.middlewareStack.use((0,core_dist_es/* getHttpAuthSchemeEndpointRuleSetPlugin */.wB)(this.config, {
            httpAuthSchemeParametersProvider: defaultQConnectHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core_dist_es/* DefaultIdentityProviderConfig */.h$({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use((0,core_dist_es/* getHttpSigningPlugin */.lW)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js + 1 modules
var parseJsonBody = __webpack_require__(902);
// EXTERNAL MODULE: ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/awsExpectUnion.js
var awsExpectUnion = __webpack_require__(4475);
// EXTERNAL MODULE: ./node_modules/uuid/dist/esm-browser/v4.js + 3 modules
var v4 = __webpack_require__(3829);
;// ./node_modules/@aws-sdk/client-qconnect/dist-es/models/QConnectServiceException.js


class QConnectServiceException extends smithy_client_dist_es/* ServiceException */.TJ {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, QConnectServiceException.prototype);
    }
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/models/models_0.js


class AccessDeniedException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
class ConflictException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
var OrCondition;
(function (OrCondition) {
    OrCondition.visit = (value, visitor) => {
        if (value.andConditions !== undefined)
            return visitor.andConditions(value.andConditions);
        if (value.tagCondition !== undefined)
            return visitor.tagCondition(value.tagCondition);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(OrCondition || (OrCondition = {}));
var TagFilter;
(function (TagFilter) {
    TagFilter.visit = (value, visitor) => {
        if (value.tagCondition !== undefined)
            return visitor.tagCondition(value.tagCondition);
        if (value.andConditions !== undefined)
            return visitor.andConditions(value.andConditions);
        if (value.orConditions !== undefined)
            return visitor.orConditions(value.orConditions);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(TagFilter || (TagFilter = {}));
const KnowledgeBaseSearchType = {
    HYBRID: "HYBRID",
    SEMANTIC: "SEMANTIC",
};
var AssociationConfigurationData;
(function (AssociationConfigurationData) {
    AssociationConfigurationData.visit = (value, visitor) => {
        if (value.knowledgeBaseAssociationConfigurationData !== undefined)
            return visitor.knowledgeBaseAssociationConfigurationData(value.knowledgeBaseAssociationConfigurationData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AssociationConfigurationData || (AssociationConfigurationData = {}));
const AIAgentAssociationConfigurationType = {
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
};
var AIAgentConfiguration;
(function (AIAgentConfiguration) {
    AIAgentConfiguration.visit = (value, visitor) => {
        if (value.manualSearchAIAgentConfiguration !== undefined)
            return visitor.manualSearchAIAgentConfiguration(value.manualSearchAIAgentConfiguration);
        if (value.answerRecommendationAIAgentConfiguration !== undefined)
            return visitor.answerRecommendationAIAgentConfiguration(value.answerRecommendationAIAgentConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AIAgentConfiguration || (AIAgentConfiguration = {}));
const AIAgentType = {
    ANSWER_RECOMMENDATION: "ANSWER_RECOMMENDATION",
    MANUAL_SEARCH: "MANUAL_SEARCH",
};
const VisibilityStatus = {
    PUBLISHED: "PUBLISHED",
    SAVED: "SAVED",
};
const Origin = {
    CUSTOMER: "CUSTOMER",
    SYSTEM: "SYSTEM",
};
const Status = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
class ResourceNotFoundException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceName = opts.resourceName;
    }
}
class ServiceQuotaExceededException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
class ThrottlingException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        this.$retryable = {};
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
class ValidationException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
    }
}
const AIPromptAPIFormat = {
    ANTHROPIC_CLAUDE_MESSAGES: "ANTHROPIC_CLAUDE_MESSAGES",
    ANTHROPIC_CLAUDE_TEXT_COMPLETIONS: "ANTHROPIC_CLAUDE_TEXT_COMPLETIONS",
};
var AIPromptTemplateConfiguration;
(function (AIPromptTemplateConfiguration) {
    AIPromptTemplateConfiguration.visit = (value, visitor) => {
        if (value.textFullAIPromptEditTemplateConfiguration !== undefined)
            return visitor.textFullAIPromptEditTemplateConfiguration(value.textFullAIPromptEditTemplateConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AIPromptTemplateConfiguration || (AIPromptTemplateConfiguration = {}));
const AIPromptTemplateType = {
    TEXT: "TEXT",
};
const AIPromptType = {
    ANSWER_GENERATION: "ANSWER_GENERATION",
    INTENT_LABELING_GENERATION: "INTENT_LABELING_GENERATION",
    QUERY_REFORMULATION: "QUERY_REFORMULATION",
};
var AssistantAssociationInputData;
(function (AssistantAssociationInputData) {
    AssistantAssociationInputData.visit = (value, visitor) => {
        if (value.knowledgeBaseId !== undefined)
            return visitor.knowledgeBaseId(value.knowledgeBaseId);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AssistantAssociationInputData || (AssistantAssociationInputData = {}));
const AssociationType = {
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
};
var AssistantAssociationOutputData;
(function (AssistantAssociationOutputData) {
    AssistantAssociationOutputData.visit = (value, visitor) => {
        if (value.knowledgeBaseAssociation !== undefined)
            return visitor.knowledgeBaseAssociation(value.knowledgeBaseAssociation);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AssistantAssociationOutputData || (AssistantAssociationOutputData = {}));
const AssistantType = {
    AGENT: "AGENT",
};
const AssistantCapabilityType = {
    V1: "V1",
    V2: "V2",
};
const AssistantStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
const RelevanceLevel = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
const SourceContentType = {
    KNOWLEDGE_CONTENT: "KNOWLEDGE_CONTENT",
};
const ReferenceType = {
    KNOWLEDGE_BASE: "KNOWLEDGE_BASE",
    WEB_CRAWLER: "WEB_CRAWLER",
};
var DataReference;
(function (DataReference) {
    DataReference.visit = (value, visitor) => {
        if (value.contentReference !== undefined)
            return visitor.contentReference(value.contentReference);
        if (value.generativeReference !== undefined)
            return visitor.generativeReference(value.generativeReference);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DataReference || (DataReference = {}));
const RecommendationType = {
    DETECTED_INTENT: "DETECTED_INTENT",
    GENERATIVE_ANSWER: "GENERATIVE_ANSWER",
    GENERATIVE_RESPONSE: "GENERATIVE_RESPONSE",
    KNOWLEDGE_CONTENT: "KNOWLEDGE_CONTENT",
};
var RecommendationTriggerData;
(function (RecommendationTriggerData) {
    RecommendationTriggerData.visit = (value, visitor) => {
        if (value.query !== undefined)
            return visitor.query(value.query);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RecommendationTriggerData || (RecommendationTriggerData = {}));
const RecommendationSourceType = {
    ISSUE_DETECTION: "ISSUE_DETECTION",
    OTHER: "OTHER",
    RULE_EVALUATION: "RULE_EVALUATION",
};
const RecommendationTriggerType = {
    GENERATIVE: "GENERATIVE",
    QUERY: "QUERY",
};
const Relevance = {
    HELPFUL: "HELPFUL",
    NOT_HELPFUL: "NOT_HELPFUL",
};
var ContentFeedbackData;
(function (ContentFeedbackData) {
    ContentFeedbackData.visit = (value, visitor) => {
        if (value.generativeContentFeedbackData !== undefined)
            return visitor.generativeContentFeedbackData(value.generativeContentFeedbackData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ContentFeedbackData || (ContentFeedbackData = {}));
const TargetType = {
    RECOMMENDATION: "RECOMMENDATION",
    RESULT: "RESULT",
};
const QueryConditionComparisonOperator = {
    EQUALS: "EQUALS",
};
const QueryConditionFieldName = {
    RESULT_TYPE: "RESULT_TYPE",
};
var QueryCondition;
(function (QueryCondition) {
    QueryCondition.visit = (value, visitor) => {
        if (value.single !== undefined)
            return visitor.single(value.single);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(QueryCondition || (QueryCondition = {}));
var QueryInputData;
(function (QueryInputData) {
    QueryInputData.visit = (value, visitor) => {
        if (value.queryTextInputData !== undefined)
            return visitor.queryTextInputData(value.queryTextInputData);
        if (value.intentInputData !== undefined)
            return visitor.intentInputData(value.intentInputData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(QueryInputData || (QueryInputData = {}));
const QueryResultType = {
    GENERATIVE_ANSWER: "GENERATIVE_ANSWER",
    INTENT_ANSWER: "INTENT_ANSWER",
    KNOWLEDGE_CONTENT: "KNOWLEDGE_CONTENT",
};
class RequestTimeoutException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "RequestTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestTimeoutException";
        this.$fault = "client";
        this.$retryable = {};
        Object.setPrototypeOf(this, RequestTimeoutException.prototype);
    }
}
const FilterField = {
    NAME: "NAME",
};
const FilterOperator = {
    EQUALS: "EQUALS",
};
var RuntimeSessionDataValue;
(function (RuntimeSessionDataValue) {
    RuntimeSessionDataValue.visit = (value, visitor) => {
        if (value.stringValue !== undefined)
            return visitor.stringValue(value.stringValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RuntimeSessionDataValue || (RuntimeSessionDataValue = {}));
const SessionDataNamespace = {
    Custom: "Custom",
};
const ChunkingStrategy = {
    FIXED_SIZE: "FIXED_SIZE",
    HIERARCHICAL: "HIERARCHICAL",
    NONE: "NONE",
    SEMANTIC: "SEMANTIC",
};
var Configuration;
(function (Configuration) {
    Configuration.visit = (value, visitor) => {
        if (value.connectConfiguration !== undefined)
            return visitor.connectConfiguration(value.connectConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(Configuration || (Configuration = {}));
var ContentAssociationContents;
(function (ContentAssociationContents) {
    ContentAssociationContents.visit = (value, visitor) => {
        if (value.amazonConnectGuideAssociation !== undefined)
            return visitor.amazonConnectGuideAssociation(value.amazonConnectGuideAssociation);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ContentAssociationContents || (ContentAssociationContents = {}));
const ContentAssociationType = {
    AMAZON_CONNECT_GUIDE: "AMAZON_CONNECT_GUIDE",
};
const ContentStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_FAILED: "UPDATE_FAILED",
};
class PreconditionFailedException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "PreconditionFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PreconditionFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionFailedException.prototype);
    }
}
const KnowledgeBaseType = {
    CUSTOM: "CUSTOM",
    EXTERNAL: "EXTERNAL",
    MANAGED: "MANAGED",
    MESSAGE_TEMPLATES: "MESSAGE_TEMPLATES",
    QUICK_RESPONSES: "QUICK_RESPONSES",
};
const WebScopeType = {
    HOST_ONLY: "HOST_ONLY",
    SUBDOMAINS: "SUBDOMAINS",
};
var ManagedSourceConfiguration;
(function (ManagedSourceConfiguration) {
    ManagedSourceConfiguration.visit = (value, visitor) => {
        if (value.webCrawlerConfiguration !== undefined)
            return visitor.webCrawlerConfiguration(value.webCrawlerConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ManagedSourceConfiguration || (ManagedSourceConfiguration = {}));
var SourceConfiguration;
(function (SourceConfiguration) {
    SourceConfiguration.visit = (value, visitor) => {
        if (value.appIntegrations !== undefined)
            return visitor.appIntegrations(value.appIntegrations);
        if (value.managedSourceConfiguration !== undefined)
            return visitor.managedSourceConfiguration(value.managedSourceConfiguration);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(SourceConfiguration || (SourceConfiguration = {}));
const ParsingStrategy = {
    BEDROCK_FOUNDATION_MODEL: "BEDROCK_FOUNDATION_MODEL",
};
const SyncStatus = {
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    SYNCING_IN_PROGRESS: "SYNCING_IN_PROGRESS",
    SYNC_FAILED: "SYNC_FAILED",
    SYNC_SUCCESS: "SYNC_SUCCESS",
};
const KnowledgeBaseStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
};
var QuickResponseDataProvider;
(function (QuickResponseDataProvider) {
    QuickResponseDataProvider.visit = (value, visitor) => {
        if (value.content !== undefined)
            return visitor.content(value.content);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(QuickResponseDataProvider || (QuickResponseDataProvider = {}));
var QuickResponseContentProvider;
(function (QuickResponseContentProvider) {
    QuickResponseContentProvider.visit = (value, visitor) => {
        if (value.content !== undefined)
            return visitor.content(value.content);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(QuickResponseContentProvider || (QuickResponseContentProvider = {}));
const QuickResponseStatus = {
    CREATED: "CREATED",
    CREATE_FAILED: "CREATE_FAILED",
    CREATE_IN_PROGRESS: "CREATE_IN_PROGRESS",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS",
};
const ExternalSource = {
    AMAZON_CONNECT: "AMAZON_CONNECT",
};
const ImportJobType = {
    QUICK_RESPONSES: "QUICK_RESPONSES",
};
const ImportJobStatus = {
    COMPLETE: "COMPLETE",
    DELETED: "DELETED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS",
    FAILED: "FAILED",
    START_IN_PROGRESS: "START_IN_PROGRESS",
};
const QuickResponseFilterOperator = {
    EQUALS: "EQUALS",
    PREFIX: "PREFIX",
};
const Order = {
    ASC: "ASC",
    DESC: "DESC",
};
const QuickResponseQueryOperator = {
    CONTAINS: "CONTAINS",
    CONTAINS_AND_PREFIX: "CONTAINS_AND_PREFIX",
};
const Priority = {
    HIGH: "HIGH",
    LOW: "LOW",
    MEDIUM: "MEDIUM",
};
class TooManyTagsException extends QConnectServiceException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.resourceName = opts.resourceName;
    }
}
var DataDetails;
(function (DataDetails) {
    DataDetails.visit = (value, visitor) => {
        if (value.contentData !== undefined)
            return visitor.contentData(value.contentData);
        if (value.generativeData !== undefined)
            return visitor.generativeData(value.generativeData);
        if (value.intentDetectedData !== undefined)
            return visitor.intentDetectedData(value.intentDetectedData);
        if (value.sourceContentData !== undefined)
            return visitor.sourceContentData(value.sourceContentData);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(DataDetails || (DataDetails = {}));
const TextFullAIPromptEditTemplateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const AIPromptTemplateConfigurationFilterSensitiveLog = (obj) => {
    if (obj.textFullAIPromptEditTemplateConfiguration !== undefined)
        return {
            textFullAIPromptEditTemplateConfiguration: TextFullAIPromptEditTemplateConfigurationFilterSensitiveLog(obj.textFullAIPromptEditTemplateConfiguration),
        };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const CreateAIPromptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templateConfiguration && {
        templateConfiguration: AIPromptTemplateConfigurationFilterSensitiveLog(obj.templateConfiguration),
    }),
});
const AIPromptDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templateConfiguration && {
        templateConfiguration: AIPromptTemplateConfigurationFilterSensitiveLog(obj.templateConfiguration),
    }),
});
const CreateAIPromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.aiPrompt && { aiPrompt: AIPromptDataFilterSensitiveLog(obj.aiPrompt) }),
});
const CreateAIPromptVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.aiPrompt && { aiPrompt: AIPromptDataFilterSensitiveLog(obj.aiPrompt) }),
});
const GetAIPromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.aiPrompt && { aiPrompt: AIPromptDataFilterSensitiveLog(obj.aiPrompt) }),
});
const UpdateAIPromptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templateConfiguration && {
        templateConfiguration: AIPromptTemplateConfigurationFilterSensitiveLog(obj.templateConfiguration),
    }),
});
const UpdateAIPromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.aiPrompt && { aiPrompt: AIPromptDataFilterSensitiveLog(obj.aiPrompt) }),
});
const DocumentTextFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const TextDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.title && { title: DocumentTextFilterSensitiveLog(obj.title) }),
    ...(obj.excerpt && { excerpt: DocumentTextFilterSensitiveLog(obj.excerpt) }),
});
const ContentDataDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textData && { textData: TextDataFilterSensitiveLog(obj.textData) }),
});
const IntentDetectedDataDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.intent && { intent: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const SourceContentDataDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.textData && { textData: TextDataFilterSensitiveLog(obj.textData) }),
});
const DocumentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.title && { title: DocumentTextFilterSensitiveLog(obj.title) }),
    ...(obj.excerpt && { excerpt: DocumentTextFilterSensitiveLog(obj.excerpt) }),
});
const QueryRecommendationTriggerDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const RecommendationTriggerDataFilterSensitiveLog = (obj) => {
    if (obj.query !== undefined)
        return { query: QueryRecommendationTriggerDataFilterSensitiveLog(obj.query) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const RecommendationTriggerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: RecommendationTriggerDataFilterSensitiveLog(obj.data) }),
});
const QueryTextInputDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const QueryInputDataFilterSensitiveLog = (obj) => {
    if (obj.queryTextInputData !== undefined)
        return { queryTextInputData: QueryTextInputDataFilterSensitiveLog(obj.queryTextInputData) };
    if (obj.intentInputData !== undefined)
        return { intentInputData: obj.intentInputData };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const QueryAssistantRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.queryText && { queryText: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.queryCondition && { queryCondition: obj.queryCondition.map((item) => item) }),
    ...(obj.queryInputData && { queryInputData: QueryInputDataFilterSensitiveLog(obj.queryInputData) }),
});
const RuntimeSessionDataValueFilterSensitiveLog = (obj) => {
    if (obj.stringValue !== undefined)
        return { stringValue: smithy_client_dist_es/* SENSITIVE_STRING */.$H };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const RuntimeSessionDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.key && { key: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.value && { value: RuntimeSessionDataValueFilterSensitiveLog(obj.value) }),
});
const UpdateSessionDataRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: obj.data.map((item) => RuntimeSessionDataFilterSensitiveLog(item)) }),
});
const UpdateSessionDataResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.data && { data: obj.data.map((item) => RuntimeSessionDataFilterSensitiveLog(item)) }),
});
const ContentDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.url && { url: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const CreateContentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: ContentDataFilterSensitiveLog(obj.content) }),
});
const GetContentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: ContentDataFilterSensitiveLog(obj.content) }),
});
const UpdateContentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: ContentDataFilterSensitiveLog(obj.content) }),
});
const WebCrawlerConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inclusionFilters && { inclusionFilters: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.exclusionFilters && { exclusionFilters: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ManagedSourceConfigurationFilterSensitiveLog = (obj) => {
    if (obj.webCrawlerConfiguration !== undefined)
        return { webCrawlerConfiguration: WebCrawlerConfigurationFilterSensitiveLog(obj.webCrawlerConfiguration) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const SourceConfigurationFilterSensitiveLog = (obj) => {
    if (obj.appIntegrations !== undefined)
        return { appIntegrations: obj.appIntegrations };
    if (obj.managedSourceConfiguration !== undefined)
        return { managedSourceConfiguration: ManagedSourceConfigurationFilterSensitiveLog(obj.managedSourceConfiguration) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const CreateKnowledgeBaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceConfiguration && {
        sourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.sourceConfiguration),
    }),
});
const KnowledgeBaseDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceConfiguration && {
        sourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.sourceConfiguration),
    }),
});
const CreateKnowledgeBaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.knowledgeBase && { knowledgeBase: KnowledgeBaseDataFilterSensitiveLog(obj.knowledgeBase) }),
});
const QuickResponseDataProviderFilterSensitiveLog = (obj) => {
    if (obj.content !== undefined)
        return { content: smithy_client_dist_es/* SENSITIVE_STRING */.$H };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const GroupingConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.criteria && { criteria: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.values && { values: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const CreateQuickResponseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: QuickResponseDataProviderFilterSensitiveLog(obj.content) }),
    ...(obj.groupingConfiguration && {
        groupingConfiguration: GroupingConfigurationFilterSensitiveLog(obj.groupingConfiguration),
    }),
    ...(obj.channels && { channels: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const QuickResponseContentProviderFilterSensitiveLog = (obj) => {
    if (obj.content !== undefined)
        return { content: smithy_client_dist_es/* SENSITIVE_STRING */.$H };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const QuickResponseContentsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.plainText && { plainText: QuickResponseContentProviderFilterSensitiveLog(obj.plainText) }),
    ...(obj.markdown && { markdown: QuickResponseContentProviderFilterSensitiveLog(obj.markdown) }),
});
const QuickResponseDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.contents && { contents: QuickResponseContentsFilterSensitiveLog(obj.contents) }),
    ...(obj.groupingConfiguration && {
        groupingConfiguration: GroupingConfigurationFilterSensitiveLog(obj.groupingConfiguration),
    }),
    ...(obj.channels && { channels: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const CreateQuickResponseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.quickResponse && { quickResponse: QuickResponseDataFilterSensitiveLog(obj.quickResponse) }),
});
const ImportJobDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.url && { url: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.failedRecordReport && { failedRecordReport: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.externalSourceConfiguration && { externalSourceConfiguration: obj.externalSourceConfiguration }),
});
const GetImportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.importJob && { importJob: ImportJobDataFilterSensitiveLog(obj.importJob) }),
});
const GetKnowledgeBaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.knowledgeBase && { knowledgeBase: KnowledgeBaseDataFilterSensitiveLog(obj.knowledgeBase) }),
});
const GetQuickResponseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.quickResponse && { quickResponse: QuickResponseDataFilterSensitiveLog(obj.quickResponse) }),
});
const KnowledgeBaseSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceConfiguration && {
        sourceConfiguration: SourceConfigurationFilterSensitiveLog(obj.sourceConfiguration),
    }),
});
const ListKnowledgeBasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.knowledgeBaseSummaries && {
        knowledgeBaseSummaries: obj.knowledgeBaseSummaries.map((item) => KnowledgeBaseSummaryFilterSensitiveLog(item)),
    }),
});
const QuickResponseSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.channels && { channels: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const ListQuickResponsesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.quickResponseSummaries && {
        quickResponseSummaries: obj.quickResponseSummaries.map((item) => QuickResponseSummaryFilterSensitiveLog(item)),
    }),
});
const UpdateQuickResponseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.content && { content: QuickResponseDataProviderFilterSensitiveLog(obj.content) }),
    ...(obj.groupingConfiguration && {
        groupingConfiguration: GroupingConfigurationFilterSensitiveLog(obj.groupingConfiguration),
    }),
    ...(obj.channels && { channels: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const UpdateQuickResponseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.quickResponse && { quickResponse: QuickResponseDataFilterSensitiveLog(obj.quickResponse) }),
});
const SearchQuickResponsesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.attributes && { attributes: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const QuickResponseSearchResultDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.contents && { contents: QuickResponseContentsFilterSensitiveLog(obj.contents) }),
    ...(obj.groupingConfiguration && {
        groupingConfiguration: GroupingConfigurationFilterSensitiveLog(obj.groupingConfiguration),
    }),
    ...(obj.channels && { channels: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.attributesNotInterpolated && { attributesNotInterpolated: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.attributesInterpolated && { attributesInterpolated: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const SearchQuickResponsesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.results && { results: obj.results.map((item) => QuickResponseSearchResultDataFilterSensitiveLog(item)) }),
});
const StartContentUploadResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.url && { url: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
});
const StartImportJobResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.importJob && { importJob: ImportJobDataFilterSensitiveLog(obj.importJob) }),
});
const UpdateKnowledgeBaseTemplateUriResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.knowledgeBase && { knowledgeBase: KnowledgeBaseDataFilterSensitiveLog(obj.knowledgeBase) }),
});
const DataDetailsFilterSensitiveLog = (obj) => {
    if (obj.contentData !== undefined)
        return { contentData: ContentDataDetailsFilterSensitiveLog(obj.contentData) };
    if (obj.generativeData !== undefined)
        return { generativeData: GenerativeDataDetailsFilterSensitiveLog(obj.generativeData) };
    if (obj.intentDetectedData !== undefined)
        return { intentDetectedData: IntentDetectedDataDetailsFilterSensitiveLog(obj.intentDetectedData) };
    if (obj.sourceContentData !== undefined)
        return { sourceContentData: SourceContentDataDetailsFilterSensitiveLog(obj.sourceContentData) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
const DataSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.reference && { reference: obj.reference }),
    ...(obj.details && { details: DataDetailsFilterSensitiveLog(obj.details) }),
});
const GenerativeDataDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.completion && { completion: smithy_client_dist_es/* SENSITIVE_STRING */.$H }),
    ...(obj.references && { references: obj.references.map((item) => DataSummaryFilterSensitiveLog(item)) }),
});
const RecommendationDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.document && { document: DocumentFilterSensitiveLog(obj.document) }),
    ...(obj.data && { data: DataSummaryFilterSensitiveLog(obj.data) }),
});
const ResultDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.document && { document: DocumentFilterSensitiveLog(obj.document) }),
    ...(obj.data && { data: DataSummaryFilterSensitiveLog(obj.data) }),
});
const GetRecommendationsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.recommendations && {
        recommendations: obj.recommendations.map((item) => RecommendationDataFilterSensitiveLog(item)),
    }),
    ...(obj.triggers && { triggers: obj.triggers.map((item) => RecommendationTriggerFilterSensitiveLog(item)) }),
});
const QueryAssistantResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.results && { results: obj.results.map((item) => ResultDataFilterSensitiveLog(item)) }),
});

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/protocols/Aws_restJson1.js






const se_CreateAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiagents");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        configuration: (_) => se_AIAgentConfiguration(_, context),
        description: [],
        name: [],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        type: [],
        visibilityStatus: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAIAgentVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}/versions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        modifiedTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAIPromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiprompts");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        apiFormat: [],
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        description: [],
        modelId: [],
        name: [],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        templateConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        templateType: [],
        type: [],
        visibilityStatus: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAIPromptVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}/versions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        modifiedTime: (_) => _.getTime() / 1000,
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAssistantCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        description: [],
        name: [],
        serverSideEncryptionConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateAssistantAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/associations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        association: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        associationType: [],
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        metadata: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        name: [],
        overrideLinkOutUri: [],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        title: [],
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateContentAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/associations");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        association: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        associationType: [],
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateKnowledgeBaseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases");
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        description: [],
        knowledgeBaseType: [],
        name: [],
        renderingConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        serverSideEncryptionConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        sourceConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        vectorIngestionConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateQuickResponseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        channels: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        content: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        contentType: [],
        description: [],
        groupingConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        isActive: [],
        language: [],
        name: [],
        shortcutKey: [],
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_CreateSessionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        aiAgentConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        description: [],
        name: [],
        tagFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAIAgentVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}/versions/{versionNumber}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    b.p("versionNumber", () => input.versionNumber.toString(), "{versionNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAIPromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAIPromptVersionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}/versions/{versionNumber}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    b.p("versionNumber", () => input.versionNumber.toString(), "{versionNumber}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAssistantCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteAssistantAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations/{assistantAssociationId}");
    b.p("assistantAssociationId", () => input.assistantAssociationId, "{assistantAssociationId}", false);
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteContentAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/associations/{contentAssociationId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("contentAssociationId", () => input.contentAssociationId, "{contentAssociationId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteImportJobCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("importJobId", () => input.importJobId, "{importJobId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteKnowledgeBaseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_DeleteQuickResponseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_GetAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetAIPromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetAssistantCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetAssistantAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations/{assistantAssociationId}");
    b.p("assistantAssociationId", () => input.assistantAssociationId, "{assistantAssociationId}", false);
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetContentAssociationCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/associations/{contentAssociationId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("contentAssociationId", () => input.contentAssociationId, "{contentAssociationId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetContentSummaryCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary");
    b.p("contentId", () => input.contentId, "{contentId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetImportJobCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs/{importJobId}");
    b.p("importJobId", () => input.importJobId, "{importJobId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetKnowledgeBaseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetQuickResponseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetRecommendationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/sessions/{sessionId}/recommendations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_wTS]: [() => input.waitTimeSeconds !== void 0, () => input[_wTS].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_GetSessionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/sessions/{sessionId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListAIAgentsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagents");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAIAgentVersionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}/versions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAIPromptsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiprompts");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAIPromptVersionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}/versions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_o]: [, input[_o]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAssistantAssociationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/associations");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListAssistantsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants");
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContentAssociationsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/associations");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListContentsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListImportJobsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListKnowledgeBasesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases");
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListQuickResponsesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_NotifyRecommendationsReceivedCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        recommendationIds: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_PutFeedbackCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/feedback");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        contentFeedback: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        targetId: [],
        targetType: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
const se_QueryAssistantCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/query");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        maxResults: [],
        nextToken: [],
        overrideKnowledgeBaseSearchType: [],
        queryCondition: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        queryInputData: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        queryText: [],
        sessionId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_RemoveAssistantAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/assistants/{assistantId}/aiagentConfiguration");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_aAT]: [, (0,smithy_client_dist_es/* expectNonNull */.Y0)(input[_aAT], `aiAgentType`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_RemoveKnowledgeBaseTemplateUriCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/knowledgeBases/{knowledgeBaseId}/templateUri");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
const se_SearchContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/search");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        searchExpression: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_SearchQuickResponsesCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/search/quickResponses");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        attributes: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        searchExpression: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_SearchSessionsCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/searchSessions");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_nT]: [, input[_nT]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    });
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        searchExpression: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).q(query).b(body);
    return b.build();
};
const se_StartContentUploadCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/upload");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        contentType: [],
        presignedUrlTimeToLive: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_StartImportJobCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/importJobs");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        externalSourceConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        importJobType: [],
        metadata: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        tags: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = (0,smithy_client_dist_es/* map */.Tj)({
        [_tK]: [(0,smithy_client_dist_es/* expectNonNull */.Y0)(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiagents/{aiAgentId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiAgentId", () => input.aiAgentId, "{aiAgentId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        configuration: (_) => se_AIAgentConfiguration(_, context),
        description: [],
        visibilityStatus: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateAIPromptCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiprompts/{aiPromptId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("aiPromptId", () => input.aiPromptId, "{aiPromptId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        clientToken: [true, (_) => _ ?? (0,v4/* default */.A)()],
        description: [],
        templateConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        visibilityStatus: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateAssistantAIAgentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/aiagentConfiguration");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        aiAgentType: [],
        configuration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateContentCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/contents/{contentId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("contentId", () => input.contentId, "{contentId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        metadata: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        overrideLinkOutUri: [],
        removeOverrideLinkOutUri: [],
        revisionId: [],
        title: [],
        uploadId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateKnowledgeBaseTemplateUriCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/templateUri");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        templateUri: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateQuickResponseCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/knowledgeBases/{knowledgeBaseId}/quickResponses/{quickResponseId}");
    b.p("knowledgeBaseId", () => input.knowledgeBaseId, "{knowledgeBaseId}", false);
    b.p("quickResponseId", () => input.quickResponseId, "{quickResponseId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        channels: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        content: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        contentType: [],
        description: [],
        groupingConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        isActive: [],
        language: [],
        name: [],
        removeDescription: [],
        removeGroupingConfiguration: [],
        removeShortcutKey: [],
        shortcutKey: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateSessionCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions/{sessionId}");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        aiAgentConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        description: [],
        tagFilter: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UpdateSessionDataCommand = async (input, context) => {
    const b = (0,core_dist_es/* requestBuilder */.lI)(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/assistants/{assistantId}/sessions/{sessionId}/data");
    b.p("assistantId", () => input.assistantId, "{assistantId}", false);
    b.p("sessionId", () => input.sessionId, "{sessionId}", false);
    let body;
    body = JSON.stringify((0,smithy_client_dist_es/* take */.s)(input, {
        data: (_) => (0,smithy_client_dist_es/* _json */.Ss)(_),
        namespace: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
const de_CreateAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgent: (_) => de_AIAgentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAIAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgent: (_) => de_AIAgentData(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAIPromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPrompt: (_) => de_AIPromptData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAIPromptVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPrompt: (_) => de_AIPromptData(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistant: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistantAssociation: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateContentAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentAssociation: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CreateSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        session: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteAIAgentVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteAIPromptCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteAIPromptVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteAssistantCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteContentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteContentAssociationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteImportJobCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_DeleteQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_GetAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgent: (_) => de_AIAgentData(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAIPromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPrompt: (_) => de_AIPromptData(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistant: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetAssistantAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistantAssociation: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetContentAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentAssociation: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetContentSummaryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentSummary: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        importJob: (_) => de_ImportJobData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetKnowledgeBaseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        recommendations: (_) => de_RecommendationList(_, context),
        triggers: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        session: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAIAgentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgentSummaries: (_) => de_AIAgentSummaryList(_, context),
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAIAgentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgentVersionSummaries: (_) => de_AIAgentVersionSummariesList(_, context),
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAIPromptsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPromptSummaries: (_) => de_AIPromptSummaryList(_, context),
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAIPromptVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPromptVersionSummaries: (_) => de_AIPromptVersionSummariesList(_, context),
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAssistantAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistantAssociationSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListAssistantsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistantSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContentAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentAssociationSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListContentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        importJobSummaries: (_) => de_ImportJobList(_, context),
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListKnowledgeBasesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        knowledgeBaseSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListQuickResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        nextToken: smithy_client_dist_es/* expectString */.lK,
        quickResponseSummaries: (_) => de_QuickResponseSummaryList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        tags: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_NotifyRecommendationsReceivedCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        errors: smithy_client_dist_es/* _json */.Ss,
        recommendationIds: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_PutFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistantArn: smithy_client_dist_es/* expectString */.lK,
        assistantId: smithy_client_dist_es/* expectString */.lK,
        contentFeedback: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        targetId: smithy_client_dist_es/* expectString */.lK,
        targetType: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_QueryAssistantCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        nextToken: smithy_client_dist_es/* expectString */.lK,
        results: (_) => de_QueryResultsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_RemoveAssistantAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_RemoveKnowledgeBaseTemplateUriCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_SearchContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        contentSummaries: smithy_client_dist_es/* _json */.Ss,
        nextToken: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchQuickResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        nextToken: smithy_client_dist_es/* expectString */.lK,
        results: (_) => de_QuickResponseSearchResultsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_SearchSessionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        nextToken: smithy_client_dist_es/* expectString */.lK,
        sessionSummaries: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartContentUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        headersToInclude: smithy_client_dist_es/* _json */.Ss,
        uploadId: smithy_client_dist_es/* expectString */.lK,
        url: smithy_client_dist_es/* expectString */.lK,
        urlExpiry: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_StartImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        importJob: (_) => de_ImportJobData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    await (0,smithy_client_dist_es/* collectBody */.Px)(output.body, context);
    return contents;
};
const de_UpdateAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiAgent: (_) => de_AIAgentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateAIPromptCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        aiPrompt: (_) => de_AIPromptData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateAssistantAIAgentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        assistant: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        content: (_) => de_ContentData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateKnowledgeBaseTemplateUriCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        knowledgeBase: (_) => de_KnowledgeBaseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateQuickResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        quickResponse: (_) => de_QuickResponseData(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateSessionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        session: smithy_client_dist_es/* _json */.Ss,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_UpdateSessionDataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = (0,smithy_client_dist_es/* map */.Tj)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* expectObject */.Xk)(await (0,parseJsonBody/* parseJsonBody */.Y2)(output.body, context)), "body");
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        data: smithy_client_dist_es/* _json */.Ss,
        namespace: smithy_client_dist_es/* expectString */.lK,
        sessionArn: smithy_client_dist_es/* expectString */.lK,
        sessionId: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await (0,parseJsonBody/* parseJsonErrorBody */.CG)(output.body, context),
    };
    const errorCode = (0,parseJsonBody/* loadRestJsonErrorCode */.cJ)(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.qconnect#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.qconnect#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.qconnect#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.qconnect#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.qconnect#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.qconnect#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "RequestTimeoutException":
        case "com.amazonaws.qconnect#RequestTimeoutException":
            throw await de_RequestTimeoutExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.qconnect#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        case "PreconditionFailedException":
        case "com.amazonaws.qconnect#PreconditionFailedException":
            throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0,smithy_client_dist_es/* withBaseException */.jr)(QConnectServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_PreconditionFailedExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new PreconditionFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_RequestTimeoutExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new RequestTimeoutException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
        resourceName: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
        resourceName: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = (0,smithy_client_dist_es/* map */.Tj)({});
    const data = parsedOutput.body;
    const doc = (0,smithy_client_dist_es/* take */.s)(data, {
        message: smithy_client_dist_es/* expectString */.lK,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0,smithy_client_dist_es/* decorateServiceException */.Mw)(exception, parsedOutput.body);
};
const se_AIAgentConfiguration = (input, context) => {
    return AIAgentConfiguration.visit(input, {
        answerRecommendationAIAgentConfiguration: (value) => ({ answerRecommendationAIAgentConfiguration: (0,smithy_client_dist_es/* _json */.Ss)(value) }),
        manualSearchAIAgentConfiguration: (value) => ({ manualSearchAIAgentConfiguration: (0,smithy_client_dist_es/* _json */.Ss)(value) }),
        _: (name, value) => ({ name: value }),
    });
};
const de_AIAgentConfiguration = (output, context) => {
    if (output.answerRecommendationAIAgentConfiguration != null) {
        return {
            answerRecommendationAIAgentConfiguration: (0,smithy_client_dist_es/* _json */.Ss)(output.answerRecommendationAIAgentConfiguration),
        };
    }
    if (output.manualSearchAIAgentConfiguration != null) {
        return {
            manualSearchAIAgentConfiguration: (0,smithy_client_dist_es/* _json */.Ss)(output.manualSearchAIAgentConfiguration),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_AIAgentData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiAgentArn: smithy_client_dist_es/* expectString */.lK,
        aiAgentId: smithy_client_dist_es/* expectString */.lK,
        assistantArn: smithy_client_dist_es/* expectString */.lK,
        assistantId: smithy_client_dist_es/* expectString */.lK,
        configuration: (_) => de_AIAgentConfiguration((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
        description: smithy_client_dist_es/* expectString */.lK,
        modifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        origin: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        type: smithy_client_dist_es/* expectString */.lK,
        visibilityStatus: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AIAgentSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiAgentArn: smithy_client_dist_es/* expectString */.lK,
        aiAgentId: smithy_client_dist_es/* expectString */.lK,
        assistantArn: smithy_client_dist_es/* expectString */.lK,
        assistantId: smithy_client_dist_es/* expectString */.lK,
        configuration: (_) => de_AIAgentConfiguration((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
        description: smithy_client_dist_es/* expectString */.lK,
        modifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        origin: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        type: smithy_client_dist_es/* expectString */.lK,
        visibilityStatus: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AIAgentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AIAgentSummary(entry, context);
    });
    return retVal;
};
const de_AIAgentVersionSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AIAgentVersionSummary(entry, context);
    });
    return retVal;
};
const de_AIAgentVersionSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiAgentSummary: (_) => de_AIAgentSummary(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
};
const de_AIPromptData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiPromptArn: smithy_client_dist_es/* expectString */.lK,
        aiPromptId: smithy_client_dist_es/* expectString */.lK,
        apiFormat: smithy_client_dist_es/* expectString */.lK,
        assistantArn: smithy_client_dist_es/* expectString */.lK,
        assistantId: smithy_client_dist_es/* expectString */.lK,
        description: smithy_client_dist_es/* expectString */.lK,
        modelId: smithy_client_dist_es/* expectString */.lK,
        modifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        origin: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        templateConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        templateType: smithy_client_dist_es/* expectString */.lK,
        type: smithy_client_dist_es/* expectString */.lK,
        visibilityStatus: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AIPromptSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiPromptArn: smithy_client_dist_es/* expectString */.lK,
        aiPromptId: smithy_client_dist_es/* expectString */.lK,
        apiFormat: smithy_client_dist_es/* expectString */.lK,
        assistantArn: smithy_client_dist_es/* expectString */.lK,
        assistantId: smithy_client_dist_es/* expectString */.lK,
        description: smithy_client_dist_es/* expectString */.lK,
        modelId: smithy_client_dist_es/* expectString */.lK,
        modifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        origin: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        templateType: smithy_client_dist_es/* expectString */.lK,
        type: smithy_client_dist_es/* expectString */.lK,
        visibilityStatus: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_AIPromptSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AIPromptSummary(entry, context);
    });
    return retVal;
};
const de_AIPromptVersionSummariesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AIPromptVersionSummary(entry, context);
    });
    return retVal;
};
const de_AIPromptVersionSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        aiPromptSummary: (_) => de_AIPromptSummary(_, context),
        versionNumber: smithy_client_dist_es/* expectLong */.Yy,
    });
};
const de_ContentData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        contentArn: smithy_client_dist_es/* expectString */.lK,
        contentId: smithy_client_dist_es/* expectString */.lK,
        contentType: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        linkOutUri: smithy_client_dist_es/* expectString */.lK,
        metadata: smithy_client_dist_es/* _json */.Ss,
        name: smithy_client_dist_es/* expectString */.lK,
        revisionId: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        title: smithy_client_dist_es/* expectString */.lK,
        url: smithy_client_dist_es/* expectString */.lK,
        urlExpiry: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_ContentDataDetails = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        rankingData: (_) => de_RankingData(_, context),
        textData: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_DataDetails = (output, context) => {
    if (output.contentData != null) {
        return {
            contentData: de_ContentDataDetails(output.contentData, context),
        };
    }
    if (output.generativeData != null) {
        return {
            generativeData: de_GenerativeDataDetails(output.generativeData, context),
        };
    }
    if (output.intentDetectedData != null) {
        return {
            intentDetectedData: (0,smithy_client_dist_es/* _json */.Ss)(output.intentDetectedData),
        };
    }
    if (output.sourceContentData != null) {
        return {
            sourceContentData: de_SourceContentDataDetails(output.sourceContentData, context),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_DataSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        details: (_) => de_DataDetails((0,awsExpectUnion/* awsExpectUnion */.M)(_), context),
        reference: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
    });
};
const de_DataSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataSummary(entry, context);
    });
    return retVal;
};
const de_GenerativeDataDetails = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        completion: smithy_client_dist_es/* expectString */.lK,
        rankingData: (_) => de_RankingData(_, context),
        references: (_) => de_DataSummaryList(_, context),
    });
};
const de_ImportJobData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        createdTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        externalSourceConfiguration: smithy_client_dist_es/* _json */.Ss,
        failedRecordReport: smithy_client_dist_es/* expectString */.lK,
        importJobId: smithy_client_dist_es/* expectString */.lK,
        importJobType: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        lastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        metadata: smithy_client_dist_es/* _json */.Ss,
        status: smithy_client_dist_es/* expectString */.lK,
        uploadId: smithy_client_dist_es/* expectString */.lK,
        url: smithy_client_dist_es/* expectString */.lK,
        urlExpiry: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
    });
};
const de_ImportJobList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportJobSummary(entry, context);
    });
    return retVal;
};
const de_ImportJobSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        createdTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        externalSourceConfiguration: smithy_client_dist_es/* _json */.Ss,
        importJobId: smithy_client_dist_es/* expectString */.lK,
        importJobType: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        lastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        metadata: smithy_client_dist_es/* _json */.Ss,
        status: smithy_client_dist_es/* expectString */.lK,
        uploadId: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_KnowledgeBaseData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        description: smithy_client_dist_es/* expectString */.lK,
        ingestionFailureReasons: smithy_client_dist_es/* _json */.Ss,
        ingestionStatus: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseType: smithy_client_dist_es/* expectString */.lK,
        lastContentModificationTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        renderingConfiguration: smithy_client_dist_es/* _json */.Ss,
        serverSideEncryptionConfiguration: smithy_client_dist_es/* _json */.Ss,
        sourceConfiguration: (_) => (0,smithy_client_dist_es/* _json */.Ss)((0,awsExpectUnion/* awsExpectUnion */.M)(_)),
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
        vectorIngestionConfiguration: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QueryResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResultData(entry, context);
    });
    return retVal;
};
const de_QuickResponseData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        channels: smithy_client_dist_es/* _json */.Ss,
        contentType: smithy_client_dist_es/* expectString */.lK,
        contents: smithy_client_dist_es/* _json */.Ss,
        createdTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        description: smithy_client_dist_es/* expectString */.lK,
        groupingConfiguration: smithy_client_dist_es/* _json */.Ss,
        isActive: smithy_client_dist_es/* expectBoolean */.ak,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        language: smithy_client_dist_es/* expectString */.lK,
        lastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        lastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        quickResponseArn: smithy_client_dist_es/* expectString */.lK,
        quickResponseId: smithy_client_dist_es/* expectString */.lK,
        shortcutKey: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QuickResponseSearchResultData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        attributesInterpolated: smithy_client_dist_es/* _json */.Ss,
        attributesNotInterpolated: smithy_client_dist_es/* _json */.Ss,
        channels: smithy_client_dist_es/* _json */.Ss,
        contentType: smithy_client_dist_es/* expectString */.lK,
        contents: smithy_client_dist_es/* _json */.Ss,
        createdTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        description: smithy_client_dist_es/* expectString */.lK,
        groupingConfiguration: smithy_client_dist_es/* _json */.Ss,
        isActive: smithy_client_dist_es/* expectBoolean */.ak,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        language: smithy_client_dist_es/* expectString */.lK,
        lastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        lastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        quickResponseArn: smithy_client_dist_es/* expectString */.lK,
        quickResponseId: smithy_client_dist_es/* expectString */.lK,
        shortcutKey: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QuickResponseSearchResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickResponseSearchResultData(entry, context);
    });
    return retVal;
};
const de_QuickResponseSummary = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        channels: smithy_client_dist_es/* _json */.Ss,
        contentType: smithy_client_dist_es/* expectString */.lK,
        createdTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        description: smithy_client_dist_es/* expectString */.lK,
        isActive: smithy_client_dist_es/* expectBoolean */.ak,
        knowledgeBaseArn: smithy_client_dist_es/* expectString */.lK,
        knowledgeBaseId: smithy_client_dist_es/* expectString */.lK,
        lastModifiedBy: smithy_client_dist_es/* expectString */.lK,
        lastModifiedTime: (_) => (0,smithy_client_dist_es/* expectNonNull */.Y0)((0,smithy_client_dist_es/* parseEpochTimestamp */.l3)((0,smithy_client_dist_es/* expectNumber */.r$)(_))),
        name: smithy_client_dist_es/* expectString */.lK,
        quickResponseArn: smithy_client_dist_es/* expectString */.lK,
        quickResponseId: smithy_client_dist_es/* expectString */.lK,
        status: smithy_client_dist_es/* expectString */.lK,
        tags: smithy_client_dist_es/* _json */.Ss,
    });
};
const de_QuickResponseSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QuickResponseSummary(entry, context);
    });
    return retVal;
};
const de_RankingData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        relevanceLevel: smithy_client_dist_es/* expectString */.lK,
        relevanceScore: smithy_client_dist_es/* limitedParseDouble */.JW,
    });
};
const de_RecommendationData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        data: (_) => de_DataSummary(_, context),
        document: smithy_client_dist_es/* _json */.Ss,
        recommendationId: smithy_client_dist_es/* expectString */.lK,
        relevanceLevel: smithy_client_dist_es/* expectString */.lK,
        relevanceScore: smithy_client_dist_es/* limitedParseDouble */.JW,
        type: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_RecommendationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecommendationData(entry, context);
    });
    return retVal;
};
const de_ResultData = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        data: (_) => de_DataSummary(_, context),
        document: smithy_client_dist_es/* _json */.Ss,
        relevanceScore: smithy_client_dist_es/* limitedParseDouble */.JW,
        resultId: smithy_client_dist_es/* expectString */.lK,
        type: smithy_client_dist_es/* expectString */.lK,
    });
};
const de_SourceContentDataDetails = (output, context) => {
    return (0,smithy_client_dist_es/* take */.s)(output, {
        citationSpan: smithy_client_dist_es/* _json */.Ss,
        id: smithy_client_dist_es/* expectString */.lK,
        rankingData: (_) => de_RankingData(_, context),
        textData: smithy_client_dist_es/* _json */.Ss,
        type: smithy_client_dist_es/* expectString */.lK,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _aAT = "aiAgentType";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "origin";
const _tK = "tagKeys";
const _wTS = "waitTimeSeconds";

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAIAgentCommand.js






class CreateAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAIAgent", {})
    .n("QConnectClient", "CreateAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_CreateAIAgentCommand)
    .de(de_CreateAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAIAgentVersionCommand.js






class CreateAIAgentVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAIAgentVersion", {})
    .n("QConnectClient", "CreateAIAgentVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateAIAgentVersionCommand)
    .de(de_CreateAIAgentVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAIPromptCommand.js







class CreateAIPromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAIPrompt", {})
    .n("QConnectClient", "CreateAIPromptCommand")
    .f(CreateAIPromptRequestFilterSensitiveLog, CreateAIPromptResponseFilterSensitiveLog)
    .ser(se_CreateAIPromptCommand)
    .de(de_CreateAIPromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAIPromptVersionCommand.js







class CreateAIPromptVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAIPromptVersion", {})
    .n("QConnectClient", "CreateAIPromptVersionCommand")
    .f(void 0, CreateAIPromptVersionResponseFilterSensitiveLog)
    .ser(se_CreateAIPromptVersionCommand)
    .de(de_CreateAIPromptVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAssistantAssociationCommand.js






class CreateAssistantAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAssistantAssociation", {})
    .n("QConnectClient", "CreateAssistantAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateAssistantAssociationCommand)
    .de(de_CreateAssistantAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateAssistantCommand.js






class CreateAssistantCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateAssistant", {})
    .n("QConnectClient", "CreateAssistantCommand")
    .f(void 0, void 0)
    .ser(se_CreateAssistantCommand)
    .de(de_CreateAssistantCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateContentAssociationCommand.js






class CreateContentAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateContentAssociation", {})
    .n("QConnectClient", "CreateContentAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateContentAssociationCommand)
    .de(de_CreateContentAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateContentCommand.js







class CreateContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateContent", {})
    .n("QConnectClient", "CreateContentCommand")
    .f(void 0, CreateContentResponseFilterSensitiveLog)
    .ser(se_CreateContentCommand)
    .de(de_CreateContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateKnowledgeBaseCommand.js







class CreateKnowledgeBaseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateKnowledgeBase", {})
    .n("QConnectClient", "CreateKnowledgeBaseCommand")
    .f(CreateKnowledgeBaseRequestFilterSensitiveLog, CreateKnowledgeBaseResponseFilterSensitiveLog)
    .ser(se_CreateKnowledgeBaseCommand)
    .de(de_CreateKnowledgeBaseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateQuickResponseCommand.js







class CreateQuickResponseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateQuickResponse", {})
    .n("QConnectClient", "CreateQuickResponseCommand")
    .f(CreateQuickResponseRequestFilterSensitiveLog, CreateQuickResponseResponseFilterSensitiveLog)
    .ser(se_CreateQuickResponseCommand)
    .de(de_CreateQuickResponseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/CreateSessionCommand.js






class CreateSessionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "CreateSession", {})
    .n("QConnectClient", "CreateSessionCommand")
    .f(void 0, void 0)
    .ser(se_CreateSessionCommand)
    .de(de_CreateSessionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAIAgentCommand.js






class DeleteAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAIAgent", {})
    .n("QConnectClient", "DeleteAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAIAgentCommand)
    .de(de_DeleteAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAIAgentVersionCommand.js






class DeleteAIAgentVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAIAgentVersion", {})
    .n("QConnectClient", "DeleteAIAgentVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAIAgentVersionCommand)
    .de(de_DeleteAIAgentVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAIPromptCommand.js






class DeleteAIPromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAIPrompt", {})
    .n("QConnectClient", "DeleteAIPromptCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAIPromptCommand)
    .de(de_DeleteAIPromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAIPromptVersionCommand.js






class DeleteAIPromptVersionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAIPromptVersion", {})
    .n("QConnectClient", "DeleteAIPromptVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAIPromptVersionCommand)
    .de(de_DeleteAIPromptVersionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAssistantAssociationCommand.js






class DeleteAssistantAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAssistantAssociation", {})
    .n("QConnectClient", "DeleteAssistantAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAssistantAssociationCommand)
    .de(de_DeleteAssistantAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteAssistantCommand.js






class DeleteAssistantCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteAssistant", {})
    .n("QConnectClient", "DeleteAssistantCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAssistantCommand)
    .de(de_DeleteAssistantCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteContentAssociationCommand.js






class DeleteContentAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteContentAssociation", {})
    .n("QConnectClient", "DeleteContentAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContentAssociationCommand)
    .de(de_DeleteContentAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteContentCommand.js






class DeleteContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteContent", {})
    .n("QConnectClient", "DeleteContentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContentCommand)
    .de(de_DeleteContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteImportJobCommand.js






class DeleteImportJobCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteImportJob", {})
    .n("QConnectClient", "DeleteImportJobCommand")
    .f(void 0, void 0)
    .ser(se_DeleteImportJobCommand)
    .de(de_DeleteImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteKnowledgeBaseCommand.js






class DeleteKnowledgeBaseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteKnowledgeBase", {})
    .n("QConnectClient", "DeleteKnowledgeBaseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteKnowledgeBaseCommand)
    .de(de_DeleteKnowledgeBaseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/DeleteQuickResponseCommand.js






class DeleteQuickResponseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "DeleteQuickResponse", {})
    .n("QConnectClient", "DeleteQuickResponseCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQuickResponseCommand)
    .de(de_DeleteQuickResponseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetAIAgentCommand.js






class GetAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetAIAgent", {})
    .n("QConnectClient", "GetAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_GetAIAgentCommand)
    .de(de_GetAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetAIPromptCommand.js







class GetAIPromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetAIPrompt", {})
    .n("QConnectClient", "GetAIPromptCommand")
    .f(void 0, GetAIPromptResponseFilterSensitiveLog)
    .ser(se_GetAIPromptCommand)
    .de(de_GetAIPromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetAssistantAssociationCommand.js






class GetAssistantAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetAssistantAssociation", {})
    .n("QConnectClient", "GetAssistantAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetAssistantAssociationCommand)
    .de(de_GetAssistantAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetAssistantCommand.js






class GetAssistantCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetAssistant", {})
    .n("QConnectClient", "GetAssistantCommand")
    .f(void 0, void 0)
    .ser(se_GetAssistantCommand)
    .de(de_GetAssistantCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetContentAssociationCommand.js






class GetContentAssociationCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetContentAssociation", {})
    .n("QConnectClient", "GetContentAssociationCommand")
    .f(void 0, void 0)
    .ser(se_GetContentAssociationCommand)
    .de(de_GetContentAssociationCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetContentCommand.js







class GetContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetContent", {})
    .n("QConnectClient", "GetContentCommand")
    .f(void 0, GetContentResponseFilterSensitiveLog)
    .ser(se_GetContentCommand)
    .de(de_GetContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetContentSummaryCommand.js






class GetContentSummaryCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetContentSummary", {})
    .n("QConnectClient", "GetContentSummaryCommand")
    .f(void 0, void 0)
    .ser(se_GetContentSummaryCommand)
    .de(de_GetContentSummaryCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetImportJobCommand.js







class GetImportJobCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetImportJob", {})
    .n("QConnectClient", "GetImportJobCommand")
    .f(void 0, GetImportJobResponseFilterSensitiveLog)
    .ser(se_GetImportJobCommand)
    .de(de_GetImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetKnowledgeBaseCommand.js







class GetKnowledgeBaseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetKnowledgeBase", {})
    .n("QConnectClient", "GetKnowledgeBaseCommand")
    .f(void 0, GetKnowledgeBaseResponseFilterSensitiveLog)
    .ser(se_GetKnowledgeBaseCommand)
    .de(de_GetKnowledgeBaseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetQuickResponseCommand.js







class GetQuickResponseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetQuickResponse", {})
    .n("QConnectClient", "GetQuickResponseCommand")
    .f(void 0, GetQuickResponseResponseFilterSensitiveLog)
    .ser(se_GetQuickResponseCommand)
    .de(de_GetQuickResponseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetRecommendationsCommand.js







class GetRecommendationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetRecommendations", {})
    .n("QConnectClient", "GetRecommendationsCommand")
    .f(void 0, GetRecommendationsResponseFilterSensitiveLog)
    .ser(se_GetRecommendationsCommand)
    .de(de_GetRecommendationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/GetSessionCommand.js






class GetSessionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "GetSession", {})
    .n("QConnectClient", "GetSessionCommand")
    .f(void 0, void 0)
    .ser(se_GetSessionCommand)
    .de(de_GetSessionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAIAgentsCommand.js






class ListAIAgentsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAIAgents", {})
    .n("QConnectClient", "ListAIAgentsCommand")
    .f(void 0, void 0)
    .ser(se_ListAIAgentsCommand)
    .de(de_ListAIAgentsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAIAgentVersionsCommand.js






class ListAIAgentVersionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAIAgentVersions", {})
    .n("QConnectClient", "ListAIAgentVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListAIAgentVersionsCommand)
    .de(de_ListAIAgentVersionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAIPromptsCommand.js






class ListAIPromptsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAIPrompts", {})
    .n("QConnectClient", "ListAIPromptsCommand")
    .f(void 0, void 0)
    .ser(se_ListAIPromptsCommand)
    .de(de_ListAIPromptsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAIPromptVersionsCommand.js






class ListAIPromptVersionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAIPromptVersions", {})
    .n("QConnectClient", "ListAIPromptVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListAIPromptVersionsCommand)
    .de(de_ListAIPromptVersionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAssistantAssociationsCommand.js






class ListAssistantAssociationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAssistantAssociations", {})
    .n("QConnectClient", "ListAssistantAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListAssistantAssociationsCommand)
    .de(de_ListAssistantAssociationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListAssistantsCommand.js






class ListAssistantsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListAssistants", {})
    .n("QConnectClient", "ListAssistantsCommand")
    .f(void 0, void 0)
    .ser(se_ListAssistantsCommand)
    .de(de_ListAssistantsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListContentAssociationsCommand.js






class ListContentAssociationsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListContentAssociations", {})
    .n("QConnectClient", "ListContentAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListContentAssociationsCommand)
    .de(de_ListContentAssociationsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListContentsCommand.js






class ListContentsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListContents", {})
    .n("QConnectClient", "ListContentsCommand")
    .f(void 0, void 0)
    .ser(se_ListContentsCommand)
    .de(de_ListContentsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListImportJobsCommand.js






class ListImportJobsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListImportJobs", {})
    .n("QConnectClient", "ListImportJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListImportJobsCommand)
    .de(de_ListImportJobsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListKnowledgeBasesCommand.js







class ListKnowledgeBasesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListKnowledgeBases", {})
    .n("QConnectClient", "ListKnowledgeBasesCommand")
    .f(void 0, ListKnowledgeBasesResponseFilterSensitiveLog)
    .ser(se_ListKnowledgeBasesCommand)
    .de(de_ListKnowledgeBasesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListQuickResponsesCommand.js







class ListQuickResponsesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListQuickResponses", {})
    .n("QConnectClient", "ListQuickResponsesCommand")
    .f(void 0, ListQuickResponsesResponseFilterSensitiveLog)
    .ser(se_ListQuickResponsesCommand)
    .de(de_ListQuickResponsesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/ListTagsForResourceCommand.js






class ListTagsForResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "ListTagsForResource", {})
    .n("QConnectClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/NotifyRecommendationsReceivedCommand.js






class NotifyRecommendationsReceivedCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "NotifyRecommendationsReceived", {})
    .n("QConnectClient", "NotifyRecommendationsReceivedCommand")
    .f(void 0, void 0)
    .ser(se_NotifyRecommendationsReceivedCommand)
    .de(de_NotifyRecommendationsReceivedCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/PutFeedbackCommand.js






class PutFeedbackCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "PutFeedback", {})
    .n("QConnectClient", "PutFeedbackCommand")
    .f(void 0, void 0)
    .ser(se_PutFeedbackCommand)
    .de(de_PutFeedbackCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/QueryAssistantCommand.js







class QueryAssistantCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "QueryAssistant", {})
    .n("QConnectClient", "QueryAssistantCommand")
    .f(QueryAssistantRequestFilterSensitiveLog, QueryAssistantResponseFilterSensitiveLog)
    .ser(se_QueryAssistantCommand)
    .de(de_QueryAssistantCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/RemoveAssistantAIAgentCommand.js






class RemoveAssistantAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "RemoveAssistantAIAgent", {})
    .n("QConnectClient", "RemoveAssistantAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_RemoveAssistantAIAgentCommand)
    .de(de_RemoveAssistantAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/RemoveKnowledgeBaseTemplateUriCommand.js






class RemoveKnowledgeBaseTemplateUriCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "RemoveKnowledgeBaseTemplateUri", {})
    .n("QConnectClient", "RemoveKnowledgeBaseTemplateUriCommand")
    .f(void 0, void 0)
    .ser(se_RemoveKnowledgeBaseTemplateUriCommand)
    .de(de_RemoveKnowledgeBaseTemplateUriCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/SearchContentCommand.js






class SearchContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "SearchContent", {})
    .n("QConnectClient", "SearchContentCommand")
    .f(void 0, void 0)
    .ser(se_SearchContentCommand)
    .de(de_SearchContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/SearchQuickResponsesCommand.js







class SearchQuickResponsesCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "SearchQuickResponses", {})
    .n("QConnectClient", "SearchQuickResponsesCommand")
    .f(SearchQuickResponsesRequestFilterSensitiveLog, SearchQuickResponsesResponseFilterSensitiveLog)
    .ser(se_SearchQuickResponsesCommand)
    .de(de_SearchQuickResponsesCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/SearchSessionsCommand.js






class SearchSessionsCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "SearchSessions", {})
    .n("QConnectClient", "SearchSessionsCommand")
    .f(void 0, void 0)
    .ser(se_SearchSessionsCommand)
    .de(de_SearchSessionsCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/StartContentUploadCommand.js







class StartContentUploadCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "StartContentUpload", {})
    .n("QConnectClient", "StartContentUploadCommand")
    .f(void 0, StartContentUploadResponseFilterSensitiveLog)
    .ser(se_StartContentUploadCommand)
    .de(de_StartContentUploadCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/StartImportJobCommand.js







class StartImportJobCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "StartImportJob", {})
    .n("QConnectClient", "StartImportJobCommand")
    .f(void 0, StartImportJobResponseFilterSensitiveLog)
    .ser(se_StartImportJobCommand)
    .de(de_StartImportJobCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/TagResourceCommand.js






class TagResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "TagResource", {})
    .n("QConnectClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UntagResourceCommand.js






class UntagResourceCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UntagResource", {})
    .n("QConnectClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateAIAgentCommand.js






class UpdateAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateAIAgent", {})
    .n("QConnectClient", "UpdateAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAIAgentCommand)
    .de(de_UpdateAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateAIPromptCommand.js







class UpdateAIPromptCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateAIPrompt", {})
    .n("QConnectClient", "UpdateAIPromptCommand")
    .f(UpdateAIPromptRequestFilterSensitiveLog, UpdateAIPromptResponseFilterSensitiveLog)
    .ser(se_UpdateAIPromptCommand)
    .de(de_UpdateAIPromptCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateAssistantAIAgentCommand.js






class UpdateAssistantAIAgentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateAssistantAIAgent", {})
    .n("QConnectClient", "UpdateAssistantAIAgentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAssistantAIAgentCommand)
    .de(de_UpdateAssistantAIAgentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateContentCommand.js







class UpdateContentCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateContent", {})
    .n("QConnectClient", "UpdateContentCommand")
    .f(void 0, UpdateContentResponseFilterSensitiveLog)
    .ser(se_UpdateContentCommand)
    .de(de_UpdateContentCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateKnowledgeBaseTemplateUriCommand.js







class UpdateKnowledgeBaseTemplateUriCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateKnowledgeBaseTemplateUri", {})
    .n("QConnectClient", "UpdateKnowledgeBaseTemplateUriCommand")
    .f(void 0, UpdateKnowledgeBaseTemplateUriResponseFilterSensitiveLog)
    .ser(se_UpdateKnowledgeBaseTemplateUriCommand)
    .de(de_UpdateKnowledgeBaseTemplateUriCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateQuickResponseCommand.js







class UpdateQuickResponseCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateQuickResponse", {})
    .n("QConnectClient", "UpdateQuickResponseCommand")
    .f(UpdateQuickResponseRequestFilterSensitiveLog, UpdateQuickResponseResponseFilterSensitiveLog)
    .ser(se_UpdateQuickResponseCommand)
    .de(de_UpdateQuickResponseCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateSessionCommand.js






class UpdateSessionCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateSession", {})
    .n("QConnectClient", "UpdateSessionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSessionCommand)
    .de(de_UpdateSessionCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/UpdateSessionDataCommand.js







class UpdateSessionDataCommand extends smithy_client_dist_es/* Command */.uB
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        (0,middleware_serde_dist_es/* getSerdePlugin */.TM)(config, this.serialize, this.deserialize),
        (0,middleware_endpoint_dist_es/* getEndpointPlugin */.rD)(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("WisdomService", "UpdateSessionData", {})
    .n("QConnectClient", "UpdateSessionDataCommand")
    .f(UpdateSessionDataRequestFilterSensitiveLog, UpdateSessionDataResponseFilterSensitiveLog)
    .ser(se_UpdateSessionDataCommand)
    .de(de_UpdateSessionDataCommand)
    .build() {
}

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/QConnect.js




































































const commands = {
    CreateAIAgentCommand: CreateAIAgentCommand,
    CreateAIAgentVersionCommand: CreateAIAgentVersionCommand,
    CreateAIPromptCommand: CreateAIPromptCommand,
    CreateAIPromptVersionCommand: CreateAIPromptVersionCommand,
    CreateAssistantCommand: CreateAssistantCommand,
    CreateAssistantAssociationCommand: CreateAssistantAssociationCommand,
    CreateContentCommand: CreateContentCommand,
    CreateContentAssociationCommand: CreateContentAssociationCommand,
    CreateKnowledgeBaseCommand: CreateKnowledgeBaseCommand,
    CreateQuickResponseCommand: CreateQuickResponseCommand,
    CreateSessionCommand: CreateSessionCommand,
    DeleteAIAgentCommand: DeleteAIAgentCommand,
    DeleteAIAgentVersionCommand: DeleteAIAgentVersionCommand,
    DeleteAIPromptCommand: DeleteAIPromptCommand,
    DeleteAIPromptVersionCommand: DeleteAIPromptVersionCommand,
    DeleteAssistantCommand: DeleteAssistantCommand,
    DeleteAssistantAssociationCommand: DeleteAssistantAssociationCommand,
    DeleteContentCommand: DeleteContentCommand,
    DeleteContentAssociationCommand: DeleteContentAssociationCommand,
    DeleteImportJobCommand: DeleteImportJobCommand,
    DeleteKnowledgeBaseCommand: DeleteKnowledgeBaseCommand,
    DeleteQuickResponseCommand: DeleteQuickResponseCommand,
    GetAIAgentCommand: GetAIAgentCommand,
    GetAIPromptCommand: GetAIPromptCommand,
    GetAssistantCommand: GetAssistantCommand,
    GetAssistantAssociationCommand: GetAssistantAssociationCommand,
    GetContentCommand: GetContentCommand,
    GetContentAssociationCommand: GetContentAssociationCommand,
    GetContentSummaryCommand: GetContentSummaryCommand,
    GetImportJobCommand: GetImportJobCommand,
    GetKnowledgeBaseCommand: GetKnowledgeBaseCommand,
    GetQuickResponseCommand: GetQuickResponseCommand,
    GetRecommendationsCommand: GetRecommendationsCommand,
    GetSessionCommand: GetSessionCommand,
    ListAIAgentsCommand: ListAIAgentsCommand,
    ListAIAgentVersionsCommand: ListAIAgentVersionsCommand,
    ListAIPromptsCommand: ListAIPromptsCommand,
    ListAIPromptVersionsCommand: ListAIPromptVersionsCommand,
    ListAssistantAssociationsCommand: ListAssistantAssociationsCommand,
    ListAssistantsCommand: ListAssistantsCommand,
    ListContentAssociationsCommand: ListContentAssociationsCommand,
    ListContentsCommand: ListContentsCommand,
    ListImportJobsCommand: ListImportJobsCommand,
    ListKnowledgeBasesCommand: ListKnowledgeBasesCommand,
    ListQuickResponsesCommand: ListQuickResponsesCommand,
    ListTagsForResourceCommand: ListTagsForResourceCommand,
    NotifyRecommendationsReceivedCommand: NotifyRecommendationsReceivedCommand,
    PutFeedbackCommand: PutFeedbackCommand,
    QueryAssistantCommand: QueryAssistantCommand,
    RemoveAssistantAIAgentCommand: RemoveAssistantAIAgentCommand,
    RemoveKnowledgeBaseTemplateUriCommand: RemoveKnowledgeBaseTemplateUriCommand,
    SearchContentCommand: SearchContentCommand,
    SearchQuickResponsesCommand: SearchQuickResponsesCommand,
    SearchSessionsCommand: SearchSessionsCommand,
    StartContentUploadCommand: StartContentUploadCommand,
    StartImportJobCommand: StartImportJobCommand,
    TagResourceCommand: TagResourceCommand,
    UntagResourceCommand: UntagResourceCommand,
    UpdateAIAgentCommand: UpdateAIAgentCommand,
    UpdateAIPromptCommand: UpdateAIPromptCommand,
    UpdateAssistantAIAgentCommand: UpdateAssistantAIAgentCommand,
    UpdateContentCommand: UpdateContentCommand,
    UpdateKnowledgeBaseTemplateUriCommand: UpdateKnowledgeBaseTemplateUriCommand,
    UpdateQuickResponseCommand: UpdateQuickResponseCommand,
    UpdateSessionCommand: UpdateSessionCommand,
    UpdateSessionDataCommand: UpdateSessionDataCommand,
};
class QConnect extends QConnectClient {
}
(0,smithy_client_dist_es/* createAggregatedClient */.J1)(commands, QConnect);

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/commands/index.js



































































;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAIAgentVersionsPaginator.js



const paginateListAIAgentVersions = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAIAgentVersionsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAIAgentsPaginator.js



const paginateListAIAgents = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAIAgentsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAIPromptVersionsPaginator.js



const paginateListAIPromptVersions = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAIPromptVersionsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAIPromptsPaginator.js



const paginateListAIPrompts = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAIPromptsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAssistantAssociationsPaginator.js



const paginateListAssistantAssociations = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAssistantAssociationsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListAssistantsPaginator.js



const paginateListAssistants = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListAssistantsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListContentAssociationsPaginator.js



const paginateListContentAssociations = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListContentAssociationsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListContentsPaginator.js



const paginateListContents = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListContentsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListImportJobsPaginator.js



const paginateListImportJobs = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListImportJobsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListKnowledgeBasesPaginator.js



const paginateListKnowledgeBases = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListKnowledgeBasesCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/ListQuickResponsesPaginator.js



const paginateListQuickResponses = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, ListQuickResponsesCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/QueryAssistantPaginator.js



const paginateQueryAssistant = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, QueryAssistantCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/SearchContentPaginator.js



const paginateSearchContent = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, SearchContentCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/SearchQuickResponsesPaginator.js



const paginateSearchQuickResponses = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, SearchQuickResponsesCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/SearchSessionsPaginator.js



const paginateSearchSessions = (0,core_dist_es/* createPaginator */.KU)(QConnectClient, SearchSessionsCommand, "nextToken", "nextToken", "maxResults");

;// ./node_modules/@aws-sdk/client-qconnect/dist-es/pagination/index.js

















;// ./node_modules/@aws-sdk/client-qconnect/dist-es/models/index.js


;// ./node_modules/@aws-sdk/client-qconnect/dist-es/index.js








/***/ }),

/***/ 6228:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  f2: () => (/* binding */ AwsSdkSigV4Signer)
});

// UNUSED EXPORTS: AWSSDKSigV4Signer, validateSigningProperties

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var dist_es = __webpack_require__(5479);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getSkewCorrectedDate.js
const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getDateHeader.js

const getDateHeader = (response) => dist_es/* HttpResponse */.cS.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/isClockSkewed.js

const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/utils/getUpdatedSystemClockOffset.js

const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
};

;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/AwsSdkSigV4Signer.js


const throwSigningPropertyError = (name, property) => {
    if (!property) {
        throw new Error(`Property \`${name}\` is not resolved for AWS SDK SigV4Auth`);
    }
    return property;
};
const validateSigningProperties = async (signingProperties) => {
    const context = throwSigningPropertyError("context", signingProperties.context);
    const config = throwSigningPropertyError("config", signingProperties.config);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const signerFunction = throwSigningPropertyError("signer", config.signer);
    const signer = await signerFunction(authScheme);
    const signingRegion = signingProperties?.signingRegion;
    const signingRegionSet = signingProperties?.signingRegionSet;
    const signingName = signingProperties?.signingName;
    return {
        config,
        signer,
        signingRegion,
        signingRegionSet,
        signingName,
    };
};
class AwsSdkSigV4Signer {
    async sign(httpRequest, identity, signingProperties) {
        if (!dist_es/* HttpRequest */.Kd.isInstance(httpRequest)) {
            throw new Error("The request is not an instance of `HttpRequest` and cannot be signed");
        }
        const validatedProps = await validateSigningProperties(signingProperties);
        const { config, signer } = validatedProps;
        let { signingRegion, signingName } = validatedProps;
        const handlerExecutionContext = signingProperties.context;
        if (handlerExecutionContext?.authSchemes?.length ?? 0 > 1) {
            const [first, second] = handlerExecutionContext.authSchemes;
            if (first?.name === "sigv4a" && second?.name === "sigv4") {
                signingRegion = second?.signingRegion ?? signingRegion;
                signingName = second?.signingName ?? signingName;
            }
        }
        const signedRequest = await signer.sign(httpRequest, {
            signingDate: getSkewCorrectedDate(config.systemClockOffset),
            signingRegion: signingRegion,
            signingService: signingName,
        });
        return signedRequest;
    }
    errorHandler(signingProperties) {
        return (error) => {
            const serverTime = error.ServerTime ?? getDateHeader(error.$response);
            if (serverTime) {
                const config = throwSigningPropertyError("config", signingProperties.config);
                const initialSystemClockOffset = config.systemClockOffset;
                config.systemClockOffset = getUpdatedSystemClockOffset(serverTime, config.systemClockOffset);
                const clockSkewCorrected = config.systemClockOffset !== initialSystemClockOffset;
                if (clockSkewCorrected && error.$metadata) {
                    error.$metadata.clockSkewCorrected = true;
                }
            }
            throw error;
        };
    }
    successHandler(httpResponse, signingProperties) {
        const dateHeader = getDateHeader(httpResponse);
        if (dateHeader) {
            const config = throwSigningPropertyError("config", signingProperties.config);
            config.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, config.systemClockOffset);
        }
    }
}
const AWSSDKSigV4Signer = (/* unused pure expression or super */ null && (AwsSdkSigV4Signer));


/***/ }),

/***/ 8088:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  h: () => (/* binding */ resolveAwsSdkSigV4Config)
});

// UNUSED EXPORTS: resolveAWSSDKSigV4Config

;// ./node_modules/@aws-sdk/core/dist-es/submodules/client/setCredentialFeature.js
function setCredentialFeature(credentials, feature, value) {
    if (!credentials.$source) {
        credentials.$source = {};
    }
    credentials.$source[feature] = value;
    return credentials;
}

// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/index.js + 17 modules
var dist_es = __webpack_require__(2516);
// EXTERNAL MODULE: ./node_modules/@smithy/util-hex-encoding/dist-es/index.js
var util_hex_encoding_dist_es = __webpack_require__(8004);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
// EXTERNAL MODULE: ./node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escape_uri = __webpack_require__(2531);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8_browser = __webpack_require__(2637);
;// ./node_modules/@smithy/util-utf8/dist-es/toUint8Array.js

const toUint8Array = (data) => {
    if (typeof data === "string") {
        return (0,fromUtf8_browser/* fromUtf8 */.a)(data);
    }
    if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
};

;// ./node_modules/@smithy/signature-v4/dist-es/constants.js
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true,
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = (/* unused pure expression or super */ null && ([/^proxy-/i, /^sec-/i]));
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

;// ./node_modules/@smithy/signature-v4/dist-es/credentialDerivation.js



const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0,util_hex_encoding_dist_es/* toHex */.n)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
    }
    return (signingKeyCache[cacheKey] = key);
};
const clearCredentialCache = () => {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update(toUint8Array(data));
    return hash.digest();
};

;// ./node_modules/@smithy/signature-v4/dist-es/getCanonicalHeaders.js

const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == undefined) {
            continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||
            unsignableHeaders?.has(canonicalHeaderName) ||
            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
                continue;
            }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};

;// ./node_modules/@smithy/signature-v4/dist-es/getCanonicalQuery.js


const getCanonicalQuery = ({ query = {} }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query)) {
        if (key.toLowerCase() === SIGNATURE_HEADER) {
            continue;
        }
        const encodedKey = (0,escape_uri/* escapeUri */.o)(key);
        keys.push(encodedKey);
        const value = query[key];
        if (typeof value === "string") {
            serialized[encodedKey] = `${encodedKey}=${(0,escape_uri/* escapeUri */.o)(value)}`;
        }
        else if (Array.isArray(value)) {
            serialized[encodedKey] = value
                .slice(0)
                .reduce((encoded, value) => encoded.concat([`${encodedKey}=${(0,escape_uri/* escapeUri */.o)(value)}`]), [])
                .sort()
                .join("&");
        }
    }
    return keys
        .sort()
        .map((key) => serialized[key])
        .filter((serialized) => serialized)
        .join("&");
};

;// ./node_modules/@smithy/is-array-buffer/dist-es/index.js
const isArrayBuffer = (arg) => (typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer) ||
    Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

;// ./node_modules/@smithy/signature-v4/dist-es/getPayloadHash.js




const getPayloadHash = async ({ headers, body }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === SHA256_HEADER) {
            return headers[headerName];
        }
    }
    if (body == undefined) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    }
    else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(toUint8Array(body));
        return (0,util_hex_encoding_dist_es/* toHex */.n)(await hashCtor.digest());
    }
    return UNSIGNED_PAYLOAD;
};

;// ./node_modules/@smithy/signature-v4/dist-es/HeaderFormatter.js


class HeaderFormatter {
    format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
            const bytes = (0,fromUtf8_browser/* fromUtf8 */.a)(headerName);
            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
            out.set(chunk, position);
            position += chunk.byteLength;
        }
        return out;
    }
    formatHeaderValue(header) {
        switch (header.type) {
            case "boolean":
                return Uint8Array.from([header.value ? 0 : 1]);
            case "byte":
                return Uint8Array.from([2, header.value]);
            case "short":
                const shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3);
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                const intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4);
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                const longBytes = new Uint8Array(9);
                longBytes[0] = 5;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6);
                binView.setUint16(1, header.value.byteLength, false);
                const binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                const utf8Bytes = (0,fromUtf8_browser/* fromUtf8 */.a)(header.value);
                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7);
                strView.setUint16(1, utf8Bytes.byteLength, false);
                const strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                const tsBytes = new Uint8Array(9);
                tsBytes[0] = 8;
                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) {
                    throw new Error(`Invalid UUID received: ${header.value}`);
                }
                const uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9;
                uuidBytes.set((0,util_hex_encoding_dist_es/* fromHex */.a)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    }
}
var HEADER_VALUE_TYPE;
(function (HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
class Int64 {
    constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
            throw new Error("Int64 buffers must be exactly 8 bytes");
        }
    }
    static fromNumber(number) {
        if (number > 9223372036854776000 || number < -9223372036854776000) {
            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
            bytes[i] = remaining;
        }
        if (number < 0) {
            negate(bytes);
        }
        return new Int64(bytes);
    }
    valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 0b10000000;
        if (negative) {
            negate(bytes);
        }
        return parseInt((0,util_hex_encoding_dist_es/* toHex */.n)(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
        return String(this.valueOf());
    }
}
function negate(bytes) {
    for (let i = 0; i < 8; i++) {
        bytes[i] ^= 0xff;
    }
    for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
            break;
    }
}

;// ./node_modules/@smithy/signature-v4/dist-es/headerUtil.js
const hasHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return true;
        }
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            return headers[headerName];
        }
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
            delete headers[headerName];
        }
    }
};

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
;// ./node_modules/@smithy/signature-v4/dist-es/moveHeadersToQuery.js

const moveHeadersToQuery = (request, options = {}) => {
    const { headers, query = {} } = protocol_http_dist_es/* HttpRequest */.Kd.clone(request);
    for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if ((lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) ||
            options.hoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query,
    };
};

;// ./node_modules/@smithy/signature-v4/dist-es/prepareRequest.js


const prepareRequest = (request) => {
    request = protocol_http_dist_es/* HttpRequest */.Kd.clone(request);
    for (const headerName of Object.keys(request.headers)) {
        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
            delete request.headers[headerName];
        }
    }
    return request;
};

;// ./node_modules/@smithy/signature-v4/dist-es/utilDate.js
const iso8601 = (time) => toDate(time)
    .toISOString()
    .replace(/\.\d{3}Z$/, "Z");
const toDate = (time) => {
    if (typeof time === "number") {
        return new Date(time * 1000);
    }
    if (typeof time === "string") {
        if (Number(time)) {
            return new Date(Number(time) * 1000);
        }
        return new Date(time);
    }
    return time;
};

;// ./node_modules/@smithy/signature-v4/dist-es/SignatureV4.js














class SignatureV4 {
    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {
        this.headerFormatter = new HeaderFormatter();
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0,util_middleware_dist_es/* normalizeProvider */.t)(region);
        this.credentialProvider = (0,util_middleware_dist_es/* normalizeProvider */.t)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, hoistableHeaders, signingRegion, signingService, } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > MAX_PRESIGNED_TTL) {
            return Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future");
        }
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders, hoistableHeaders });
        if (credentials.sessionToken) {
            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") {
            return this.signString(toSign, options);
        }
        else if (toSign.headers && toSign.payload) {
            return this.signEvent(toSign, options);
        }
        else if (toSign.message) {
            return this.signMessage(toSign, options);
        }
        else {
            return this.signRequest(toSign, options);
        }
    }
    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0,util_hex_encoding_dist_es/* toHex */.n)(await hash.digest());
        const stringToSign = [
            EVENT_ALGORITHM_IDENTIFIER,
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload,
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
    }
    async signMessage(signableMessage, { signingDate = new Date(), signingRegion, signingService }) {
        const promise = this.signEvent({
            headers: this.headerFormatter.format(signableMessage.message.headers),
            payload: signableMessage.message.body,
        }, {
            signingDate,
            signingRegion,
            signingService,
            priorSignature: signableMessage.priorSignature,
        });
        return promise.then((signature) => {
            return { message: signableMessage.message, signature };
        });
    }
    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(toUint8Array(stringToSign));
        return (0,util_hex_encoding_dist_es/* toHex */.n)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? (await this.regionProvider());
        const request = prepareRequest(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = createScope(shortDate, region, signingService ?? this.service);
        request.headers[AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
            request.headers[TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await getPayloadHash(request, this.sha256);
        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
            request.headers[SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[AUTH_HEADER] =
            `${ALGORITHM_IDENTIFIER} ` +
                `Credential=${credentials.accessKeyId}/${scope}, ` +
                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +
                `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(toUint8Array(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0,util_hex_encoding_dist_es/* toHex */.n)(hashedRequest)}`;
    }
    getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")) {
                if (pathSegment?.length === 0)
                    continue;
                if (pathSegment === ".")
                    continue;
                if (pathSegment === "..") {
                    normalizedPathSegments.pop();
                }
                else {
                    normalizedPathSegments.push(pathSegment);
                }
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = (0,escape_uri/* escapeUri */.o)(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(toUint8Array(stringToSign));
        return (0,util_hex_encoding_dist_es/* toHex */.n)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" ||
            typeof credentials.accessKeyId !== "string" ||
            typeof credentials.secretAccessKey !== "string") {
            throw new Error("Resolved credential object is not valid");
        }
    }
}
const formatDate = (now) => {
    const longDate = iso8601(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8),
    };
};
const getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");

;// ./node_modules/@smithy/signature-v4/dist-es/index.js








;// ./node_modules/@aws-sdk/core/dist-es/submodules/httpAuthSchemes/aws_sdk/resolveAwsSdkSigV4Config.js



const resolveAwsSdkSigV4Config = (config) => {
    let isUserSupplied = false;
    let normalizedCreds;
    if (config.credentials) {
        isUserSupplied = true;
        normalizedCreds = (0,dist_es/* memoizeIdentityProvider */.K4)(config.credentials, dist_es/* isIdentityExpired */.OC, dist_es/* doesIdentityRequireRefresh */.e);
    }
    if (!normalizedCreds) {
        if (config.credentialDefaultProvider) {
            normalizedCreds = (0,dist_es/* normalizeProvider */.te)(config.credentialDefaultProvider(Object.assign({}, config, {
                parentClientConfig: config,
            })));
        }
        else {
            normalizedCreds = async () => {
                throw new Error("`credentials` is missing");
            };
        }
    }
    const { signingEscapePath = true, systemClockOffset = config.systemClockOffset || 0, sha256, } = config;
    let signer;
    if (config.signer) {
        signer = (0,dist_es/* normalizeProvider */.te)(config.signer);
    }
    else if (config.regionInfoProvider) {
        signer = () => (0,dist_es/* normalizeProvider */.te)(config.region)()
            .then(async (region) => [
            (await config.regionInfoProvider(region, {
                useFipsEndpoint: await config.useFipsEndpoint(),
                useDualstackEndpoint: await config.useDualstackEndpoint(),
            })) || {},
            region,
        ])
            .then(([regionInfo, region]) => {
            const { signingRegion, signingService } = regionInfo;
            config.signingRegion = config.signingRegion || signingRegion || region;
            config.signingName = config.signingName || signingService || config.serviceId;
            const params = {
                ...config,
                credentials: normalizedCreds,
                region: config.signingRegion,
                service: config.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = config.signerConstructor || SignatureV4;
            return new SignerCtor(params);
        });
    }
    else {
        signer = async (authScheme) => {
            authScheme = Object.assign({}, {
                name: "sigv4",
                signingName: config.signingName || config.defaultSigningName,
                signingRegion: await (0,dist_es/* normalizeProvider */.te)(config.region)(),
                properties: {},
            }, authScheme);
            const signingRegion = authScheme.signingRegion;
            const signingService = authScheme.signingName;
            config.signingRegion = config.signingRegion || signingRegion;
            config.signingName = config.signingName || signingService || config.serviceId;
            const params = {
                ...config,
                credentials: normalizedCreds,
                region: config.signingRegion,
                service: config.signingName,
                sha256,
                uriEscapePath: signingEscapePath,
            };
            const SignerCtor = config.signerConstructor || SignatureV4;
            return new SignerCtor(params);
        };
    }
    return {
        ...config,
        systemClockOffset,
        signingEscapePath,
        credentials: isUserSupplied
            ? async () => normalizedCreds().then((creds) => setCredentialFeature(creds, "CREDENTIALS_CODE", "e"))
            : normalizedCreds,
        signer,
    };
};
const resolveAWSSDKSigV4Config = (/* unused pure expression or super */ null && (resolveAwsSdkSigV4Config));


/***/ }),

/***/ 4475:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M: () => (/* binding */ awsExpectUnion)
/* harmony export */ });
/* harmony import */ var _smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5342);

const awsExpectUnion = (value) => {
    if (value == null) {
        return undefined;
    }
    if (typeof value === "object" && "__type" in value) {
        delete value.__type;
    }
    return (0,_smithy_smithy_client__WEBPACK_IMPORTED_MODULE_0__/* .expectUnion */ .tN)(value);
};


/***/ }),

/***/ 902:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  cJ: () => (/* binding */ loadRestJsonErrorCode),
  Y2: () => (/* binding */ parseJsonBody),
  CG: () => (/* binding */ parseJsonErrorBody)
});

// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 27 modules
var dist_es = __webpack_require__(5342);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/common.js

const collectBodyString = (streamBody, context) => (0,dist_es/* collectBody */.Px)(streamBody, context).then((body) => context.utf8Encoder(body));

;// ./node_modules/@aws-sdk/core/dist-es/submodules/protocols/json/parseJsonBody.js

const parseJsonBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        try {
            return JSON.parse(encoded);
        }
        catch (e) {
            if (e?.name === "SyntaxError") {
                Object.defineProperty(e, "$responseBodyText", {
                    value: encoded,
                });
            }
            throw e;
        }
    }
    return {};
});
const parseJsonErrorBody = async (errorBody, context) => {
    const value = await parseJsonBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};


/***/ }),

/***/ 1095:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OV: () => (/* binding */ resolveHostHeaderConfig),
/* harmony export */   TC: () => (/* binding */ getHostHeaderPlugin)
/* harmony export */ });
/* unused harmony exports hostHeaderMiddleware, hostHeaderMiddlewareOptions */
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5479);

function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options) => (next) => async (args) => {
    if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__/* .HttpRequest */ .Kd.isInstance(args.request))
        return next(args);
    const { request } = args;
    const { handlerProtocol = "" } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = request.hostname + (request.port ? ":" + request.port : "");
    }
    else if (!request.headers["host"]) {
        let host = request.hostname;
        if (request.port != null)
            host += `:${request.port}`;
        request.headers["host"] = host;
    }
    return next(args);
};
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true,
};
const getHostHeaderPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    },
});


/***/ }),

/***/ 9359:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Y7: () => (/* reexport */ getLoggerPlugin)
});

// UNUSED EXPORTS: loggerMiddleware, loggerMiddlewareOptions

;// ./node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js
const loggerMiddleware = () => (next, context) => async (args) => {
    try {
        const response = await next(args);
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger?.info?.({
            clientName,
            commandName,
            input: inputFilterSensitiveLog(args.input),
            output: outputFilterSensitiveLog(outputWithoutMetadata),
            metadata: $metadata,
        });
        return response;
    }
    catch (error) {
        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;
        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
        logger?.error?.({
            clientName,
            commandName,
            input: inputFilterSensitiveLog(args.input),
            error,
            metadata: error.$metadata,
        });
        throw error;
    }
};
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true,
};
const getLoggerPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    },
});

;// ./node_modules/@aws-sdk/middleware-logger/dist-es/index.js



/***/ }),

/***/ 8377:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n4: () => (/* binding */ getRecursionDetectionPlugin)
/* harmony export */ });
/* unused harmony exports recursionDetectionMiddleware, addRecursionDetectionMiddlewareOptions */
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5479);

const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options) => (next) => async (args) => {
    const { request } = args;
    if (!_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__/* .HttpRequest */ .Kd.isInstance(request) ||
        options.runtime !== "node" ||
        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
    }
    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = process.env[ENV_TRACE_ID];
    const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
        ...args,
        request,
    });
};
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low",
};
const getRecursionDetectionPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    },
});


/***/ }),

/***/ 6961:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  sM: () => (/* reexport */ getUserAgentPlugin),
  Dc: () => (/* reexport */ resolveUserAgentConfig)
});

// UNUSED EXPORTS: DEFAULT_UA_APP_ID, getUserAgentMiddlewareOptions, userAgentMiddleware

// EXTERNAL MODULE: ./node_modules/@smithy/core/dist-es/index.js + 17 modules
var dist_es = __webpack_require__(2516);
;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js

const DEFAULT_UA_APP_ID = undefined;
function isValidUserAgentAppId(appId) {
    if (appId === undefined) {
        return true;
    }
    return typeof appId === "string" && appId.length <= 50;
}
function resolveUserAgentConfig(input) {
    const normalizedAppIdProvider = (0,dist_es/* normalizeProvider */.te)(input.userAgentAppId ?? DEFAULT_UA_APP_ID);
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent,
        userAgentAppId: async () => {
            const appId = await normalizedAppIdProvider();
            if (!isValidUserAgentAppId(appId)) {
                const logger = input.logger?.constructor?.name === "NoOpLogger" || !input.logger ? console : input.logger;
                if (typeof appId !== "string") {
                    logger?.warn("userAgentAppId must be a string or undefined.");
                }
                else if (appId.length > 50) {
                    logger?.warn("The provided userAgentAppId exceeds the maximum length of 50 characters.");
                }
            }
            return appId;
        },
    };
}

// EXTERNAL MODULE: ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js + 9 modules
var util_endpoints_dist_es = __webpack_require__(6652);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
;// ./node_modules/@aws-sdk/core/dist-es/submodules/client/setFeature.js
function setFeature(context, feature, value) {
    if (!context.__aws_sdk_context) {
        context.__aws_sdk_context = {
            features: {},
        };
    }
    else if (!context.__aws_sdk_context.features) {
        context.__aws_sdk_context.features = {};
    }
    context.__aws_sdk_context.features[feature] = value;
}

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/check-features.js

async function checkFeatures(context, config, args) {
    const request = args.request;
    if (typeof config.accountIdEndpointMode === "function") {
        switch (await config.accountIdEndpointMode?.()) {
            case "disabled":
                setFeature(context, "ACCOUNT_ID_MODE_DISABLED", "Q");
                break;
            case "preferred":
                setFeature(context, "ACCOUNT_ID_MODE_PREFERRED", "P");
                break;
            case "required":
                setFeature(context, "ACCOUNT_ID_MODE_REQUIRED", "R");
                break;
        }
    }
    if (typeof config.credentials === "function") {
        try {
            const credentials = await config.credentials?.();
            if (credentials.accountId) {
                setFeature(context, "RESOLVED_ACCOUNT_ID", "T");
            }
            for (const [key, value] of Object.entries(credentials.$source ?? {})) {
                setFeature(context, key, value);
            }
        }
        catch (e) {
        }
    }
}

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_NAME_SEPARATOR = "/";
const UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
const UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
const UA_ESCAPE_CHAR = "-";

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/encode-features.js
const BYTE_LIMIT = 1024;
function encodeFeatures(features) {
    let buffer = "";
    for (const key in features) {
        const val = features[key];
        if (buffer.length + val.length + 1 <= BYTE_LIMIT) {
            if (buffer.length) {
                buffer += "," + val;
            }
            else {
                buffer += val;
            }
            continue;
        }
        break;
    }
    return buffer;
}

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js





const userAgentMiddleware = (options) => (next, context) => async (args) => {
    const { request } = args;
    if (!protocol_http_dist_es/* HttpRequest */.Kd.isInstance(request)) {
        return next(args);
    }
    const { headers } = request;
    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    await checkFeatures(context, options, args);
    const awsContext = context;
    defaultUserAgent.push(`m/${encodeFeatures(Object.assign({}, context.__smithy_context?.features, awsContext.__aws_sdk_context?.features))}`);
    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
    const appId = await options.userAgentAppId();
    if (appId) {
        defaultUserAgent.push(escapeUserAgent([`app/${appId}`]));
    }
    const prefix = (0,util_endpoints_dist_es/* getUserAgentPrefix */.vL)();
    const sdkUserAgentValue = (prefix ? [prefix] : [])
        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])
        .join(SPACE);
    const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent,
    ].join(SPACE);
    if (options.runtime !== "browser") {
        if (normalUAValue) {
            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]
                ? `${headers[USER_AGENT]} ${normalUAValue}`
                : normalUAValue;
        }
        headers[USER_AGENT] = sdkUserAgentValue;
    }
    else {
        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
        ...args,
        request,
    });
};
const escapeUserAgent = (userAgentPair) => {
    const name = userAgentPair[0]
        .split(UA_NAME_SEPARATOR)
        .map((part) => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR))
        .join(UA_NAME_SEPARATOR);
    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
        uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version]
        .filter((item) => item && item.length > 0)
        .reduce((acc, item, index) => {
        switch (index) {
            case 0:
                return item;
            case 1:
                return `${acc}/${item}`;
            default:
                return `${acc}#${item}`;
        }
    }, "");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true,
};
const getUserAgentPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    },
});

;// ./node_modules/@aws-sdk/middleware-user-agent/dist-es/index.js




/***/ }),

/***/ 6928:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Rq: () => (/* reexport */ getAwsRegionExtensionConfiguration),
  $3: () => (/* reexport */ resolveAwsRegionExtensionConfiguration)
});

// UNUSED EXPORTS: NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, REGION_ENV_NAME, REGION_INI_NAME, resolveRegionConfig

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/extensions/index.js
const getAwsRegionExtensionConfiguration = (runtimeConfig) => {
    let runtimeConfigRegion = async () => {
        if (runtimeConfig.region === undefined) {
            throw new Error("Region is missing from runtimeConfig");
        }
        const region = runtimeConfig.region;
        if (typeof region === "string") {
            return region;
        }
        return region();
    };
    return {
        setRegion(region) {
            runtimeConfigRegion = region;
        },
        region() {
            return runtimeConfigRegion;
        },
    };
};
const resolveAwsRegionExtensionConfiguration = (awsRegionExtensionConfiguration) => {
    return {
        region: awsRegionExtensionConfiguration.region(),
    };
};

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/config.js
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
        throw new Error("Region is missing");
    },
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials",
};

;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/regionConfig/index.js



;// ./node_modules/@aws-sdk/region-config-resolver/dist-es/index.js




/***/ }),

/***/ 6652:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  UF: () => (/* reexport */ awsEndpointFunctions),
  vL: () => (/* reexport */ getUserAgentPrefix)
});

// UNUSED EXPORTS: EndpointError, isIpAddress, partition, resolveEndpoint, setPartitionInfo, useDefaultPartitionInfo

// EXTERNAL MODULE: ./node_modules/@smithy/util-endpoints/dist-es/index.js + 35 modules
var dist_es = __webpack_require__(8545);
;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js


const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
    if (allowSubDomains) {
        for (const label of value.split(".")) {
            if (!isVirtualHostableS3Bucket(label)) {
                return false;
            }
        }
        return true;
    }
    if (!(0,dist_es/* isValidHostLabel */.X8)(value)) {
        return false;
    }
    if (value.length < 3 || value.length > 63) {
        return false;
    }
    if (value !== value.toLowerCase()) {
        return false;
    }
    if ((0,dist_es/* isIpAddress */.oX)(value)) {
        return false;
    }
    return true;
};

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js
const ARN_DELIMITER = ":";
const RESOURCE_DELIMITER = "/";
const parseArn = (value) => {
    const segments = value.split(ARN_DELIMITER);
    if (segments.length < 6)
        return null;
    const [arn, partition, service, region, accountId, ...resourcePath] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourcePath.join(ARN_DELIMITER) === "")
        return null;
    const resourceId = resourcePath.map((resource) => resource.split(RESOURCE_DELIMITER)).flat();
    return {
        partition,
        service,
        region,
        accountId,
        resourceId,
    };
};

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json
const partitions_namespaceObject = /*#__PURE__*/JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il|mx)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"ap-southeast-5":{"description":"Asia Pacific (Malaysia)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{"eu-isoe-west-1":{"description":"EU ISOE West"}}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}');
;// ./node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js

let selectedPartitionsInfo = partitions_namespaceObject;
let selectedUserAgentPrefix = "";
const partition = (value) => {
    const { partitions } = selectedPartitionsInfo;
    for (const partition of partitions) {
        const { regions, outputs } = partition;
        for (const [region, regionData] of Object.entries(regions)) {
            if (region === value) {
                return {
                    ...outputs,
                    ...regionData,
                };
            }
        }
    }
    for (const partition of partitions) {
        const { regionRegex, outputs } = partition;
        if (new RegExp(regionRegex).test(value)) {
            return {
                ...outputs,
            };
        }
    }
    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === "aws");
    if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex," +
            " and default partition with id 'aws' doesn't exist.");
    }
    return {
        ...DEFAULT_PARTITION.outputs,
    };
};
const setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
};
const useDefaultPartitionInfo = () => {
    setPartitionInfo(partitionsInfo, "");
};
const getUserAgentPrefix = () => selectedUserAgentPrefix;

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/aws.js




const awsEndpointFunctions = {
    isVirtualHostableS3Bucket: isVirtualHostableS3Bucket,
    parseArn: parseArn,
    partition: partition,
};
dist_es/* customEndpointFunctions */.mw.aws = awsEndpointFunctions;

;// ./node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js


;// ./node_modules/@aws-sdk/util-endpoints/dist-es/types/index.js







;// ./node_modules/@aws-sdk/util-endpoints/dist-es/index.js







/***/ }),

/***/ 9391:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ defaultUserAgent)
/* harmony export */ });
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6880);
/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_0__);

const defaultUserAgent = ({ serviceId, clientVersion }) => async (config) => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent
        ? bowser__WEBPACK_IMPORTED_MODULE_0___default().parse(window.navigator.userAgent)
        : undefined;
    const sections = [
        ["aws-sdk-js", clientVersion],
        ["ua", "2.1"],
        [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version],
        ["lang/js"],
        ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`],
    ];
    if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
    }
    const appId = await config?.userAgentAppId?.();
    if (appId) {
        sections.push([`app/${appId}`]);
    }
    return sections;
};


/***/ }),

/***/ 1487:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  VW: () => (/* reexport */ DEFAULT_USE_DUALSTACK_ENDPOINT),
  Hj: () => (/* reexport */ DEFAULT_USE_FIPS_ENDPOINT),
  TD: () => (/* reexport */ resolveRegionConfig)
});

// UNUSED EXPORTS: CONFIG_USE_DUALSTACK_ENDPOINT, CONFIG_USE_FIPS_ENDPOINT, ENV_USE_DUALSTACK_ENDPOINT, ENV_USE_FIPS_ENDPOINT, NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, REGION_ENV_NAME, REGION_INI_NAME, getRegionInfo, resolveCustomEndpointsConfig, resolveEndpointsConfig

;// ./node_modules/@smithy/util-config-provider/dist-es/booleanSelector.js
const booleanSelector = (obj, key, type) => {
    if (!(key in obj))
        return undefined;
    if (obj[key] === "true")
        return true;
    if (obj[key] === "false")
        return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};

;// ./node_modules/@smithy/util-config-provider/dist-es/types.js
var SelectorType;
(function (SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));

;// ./node_modules/@smithy/util-config-provider/dist-es/index.js




;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js

const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),
    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),
    default: false,
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js

const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),
    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),
    default: false,
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveCustomEndpointsConfig.js

const resolveCustomEndpointsConfig = (input) => {
    const { endpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false),
    };
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js


const resolveEndpointsConfig = (input) => {
    const useDualstackEndpoint = normalizeProvider(input.useDualstackEndpoint ?? false);
    const { endpoint, useFipsEndpoint, urlParser } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint
            ? normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint)
            : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint,
    };
};

;// ./node_modules/@smithy/config-resolver/dist-es/endpointsConfig/index.js





;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/config.js
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[REGION_ENV_NAME],
    configFileSelector: (profile) => profile[REGION_INI_NAME],
    default: () => {
        throw new Error("Region is missing");
    },
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials",
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/isFipsRegion.js
const isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/getRealRegion.js

const getRealRegion = (region) => isFipsRegion(region)
    ? ["fips-aws-global", "aws-fips"].includes(region)
        ? "us-east-1"
        : region.replace(/fips-(dkr-|prod-)?|-fips/, "")
    : region;

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/resolveRegionConfig.js


const resolveRegionConfig = (input) => {
    const { region, useFipsEndpoint } = input;
    if (!region) {
        throw new Error("Region is missing");
    }
    return {
        ...input,
        region: async () => {
            if (typeof region === "string") {
                return getRealRegion(region);
            }
            const providedRegion = await region();
            return getRealRegion(providedRegion);
        },
        useFipsEndpoint: async () => {
            const providedRegion = typeof region === "string" ? region : await region();
            if (isFipsRegion(providedRegion)) {
                return true;
            }
            return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        },
    };
};

;// ./node_modules/@smithy/config-resolver/dist-es/regionConfig/index.js



;// ./node_modules/@smithy/config-resolver/dist-es/index.js





/***/ }),

/***/ 2516:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  h$: () => (/* reexport */ DefaultIdentityProviderConfig),
  KU: () => (/* reexport */ createPaginator),
  e: () => (/* reexport */ doesIdentityRequireRefresh),
  wB: () => (/* reexport */ getHttpAuthSchemeEndpointRuleSetPlugin),
  lW: () => (/* reexport */ getHttpSigningPlugin),
  OC: () => (/* reexport */ isIdentityExpired),
  K4: () => (/* reexport */ memoizeIdentityProvider),
  te: () => (/* reexport */ normalizeProvider),
  lI: () => (/* reexport */ requestBuilder)
});

// UNUSED EXPORTS: EXPIRATION_MS, HttpApiKeyAuthSigner, HttpBearerAuthSigner, NoAuthSigner, RequestBuilder, createIsIdentityExpiredFunction, getHttpAuthSchemePlugin, getSmithyContext, httpAuthSchemeEndpointRuleSetMiddlewareOptions, httpAuthSchemeMiddleware, httpAuthSchemeMiddlewareOptions, httpSigningMiddleware, httpSigningMiddlewareOptions

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/httpAuthSchemeMiddleware.js


function convertHttpAuthSchemesToMap(httpAuthSchemes) {
    const map = new Map();
    for (const scheme of httpAuthSchemes) {
        map.set(scheme.schemeId, scheme);
    }
    return map;
}
const httpAuthSchemeMiddleware_httpAuthSchemeMiddleware = (config, mwOptions) => (next, context) => async (args) => {
    const options = config.httpAuthSchemeProvider(await mwOptions.httpAuthSchemeParametersProvider(config, context, args.input));
    const authSchemes = convertHttpAuthSchemesToMap(config.httpAuthSchemes);
    const smithyContext = (0,util_middleware_dist_es/* getSmithyContext */.u)(context);
    const failureReasons = [];
    for (const option of options) {
        const scheme = authSchemes.get(option.schemeId);
        if (!scheme) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` was not enabled for this service.`);
            continue;
        }
        const identityProvider = scheme.identityProvider(await mwOptions.identityProviderConfigProvider(config));
        if (!identityProvider) {
            failureReasons.push(`HttpAuthScheme \`${option.schemeId}\` did not have an IdentityProvider configured.`);
            continue;
        }
        const { identityProperties = {}, signingProperties = {} } = option.propertiesExtractor?.(config, context) || {};
        option.identityProperties = Object.assign(option.identityProperties || {}, identityProperties);
        option.signingProperties = Object.assign(option.signingProperties || {}, signingProperties);
        smithyContext.selectedHttpAuthScheme = {
            httpAuthOption: option,
            identity: await identityProvider(option.identityProperties),
            signer: scheme.signer,
        };
        break;
    }
    if (!smithyContext.selectedHttpAuthScheme) {
        throw new Error(failureReasons.join("\n"));
    }
    return next(args);
};

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-endpoint/dist-es/index.js + 8 modules
var middleware_endpoint_dist_es = __webpack_require__(7012);
;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemeEndpointRuleSetPlugin.js


const httpAuthSchemeEndpointRuleSetMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: middleware_endpoint_dist_es/* endpointMiddlewareOptions */.ko.name,
};
const getHttpAuthSchemeEndpointRuleSetPlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider, }) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware_httpAuthSchemeMiddleware(config, {
            httpAuthSchemeParametersProvider,
            identityProviderConfigProvider,
        }), httpAuthSchemeEndpointRuleSetMiddlewareOptions);
    },
});

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/getHttpAuthSchemePlugin.js


const httpAuthSchemeMiddlewareOptions = {
    step: "serialize",
    tags: ["HTTP_AUTH_SCHEME"],
    name: "httpAuthSchemeMiddleware",
    override: true,
    relation: "before",
    toMiddleware: middleware_serde_dist_es/* serializerMiddlewareOption */.Ou.name,
};
const getHttpAuthSchemePlugin = (config, { httpAuthSchemeParametersProvider, identityProviderConfigProvider, }) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpAuthSchemeMiddleware(config, {
            httpAuthSchemeParametersProvider,
            identityProviderConfigProvider,
        }), httpAuthSchemeMiddlewareOptions);
    },
});

;// ./node_modules/@smithy/core/dist-es/middleware-http-auth-scheme/index.js




// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
;// ./node_modules/@smithy/core/dist-es/middleware-http-signing/httpSigningMiddleware.js



const defaultErrorHandler = (signingProperties) => (error) => {
    throw error;
};
const defaultSuccessHandler = (httpResponse, signingProperties) => { };
const httpSigningMiddleware = (config) => (next, context) => async (args) => {
    if (!protocol_http_dist_es/* HttpRequest */.Kd.isInstance(args.request)) {
        return next(args);
    }
    const smithyContext = (0,util_middleware_dist_es/* getSmithyContext */.u)(context);
    const scheme = smithyContext.selectedHttpAuthScheme;
    if (!scheme) {
        throw new Error(`No HttpAuthScheme was selected: unable to sign request`);
    }
    const { httpAuthOption: { signingProperties = {} }, identity, signer, } = scheme;
    const output = await next({
        ...args,
        request: await signer.sign(args.request, identity, signingProperties),
    }).catch((signer.errorHandler || defaultErrorHandler)(signingProperties));
    (signer.successHandler || defaultSuccessHandler)(output.response, signingProperties);
    return output;
};

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-retry/dist-es/index.js + 10 modules
var middleware_retry_dist_es = __webpack_require__(6232);
;// ./node_modules/@smithy/core/dist-es/middleware-http-signing/getHttpSigningMiddleware.js


const httpSigningMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["HTTP_SIGNING"],
    name: "httpSigningMiddleware",
    aliases: ["apiKeyMiddleware", "tokenMiddleware", "awsAuthMiddleware"],
    override: true,
    relation: "after",
    toMiddleware: middleware_retry_dist_es/* retryMiddlewareOptions */.j7.name,
};
const getHttpSigningPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(httpSigningMiddleware(config), httpSigningMiddlewareOptions);
    },
});

;// ./node_modules/@smithy/core/dist-es/middleware-http-signing/index.js



;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/DefaultIdentityProviderConfig.js
class DefaultIdentityProviderConfig {
    constructor(config) {
        this.authSchemes = new Map();
        for (const [key, value] of Object.entries(config)) {
            if (value !== undefined) {
                this.authSchemes.set(key, value);
            }
        }
    }
    getIdentityProvider(schemeId) {
        return this.authSchemes.get(schemeId);
    }
}

;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpApiKeyAuth.js


class HttpApiKeyAuthSigner {
    async sign(httpRequest, identity, signingProperties) {
        if (!signingProperties) {
            throw new Error("request could not be signed with `apiKey` since the `name` and `in` signer properties are missing");
        }
        if (!signingProperties.name) {
            throw new Error("request could not be signed with `apiKey` since the `name` signer property is missing");
        }
        if (!signingProperties.in) {
            throw new Error("request could not be signed with `apiKey` since the `in` signer property is missing");
        }
        if (!identity.apiKey) {
            throw new Error("request could not be signed with `apiKey` since the `apiKey` is not defined");
        }
        const clonedRequest = HttpRequest.clone(httpRequest);
        if (signingProperties.in === HttpApiKeyAuthLocation.QUERY) {
            clonedRequest.query[signingProperties.name] = identity.apiKey;
        }
        else if (signingProperties.in === HttpApiKeyAuthLocation.HEADER) {
            clonedRequest.headers[signingProperties.name] = signingProperties.scheme
                ? `${signingProperties.scheme} ${identity.apiKey}`
                : identity.apiKey;
        }
        else {
            throw new Error("request can only be signed with `apiKey` locations `query` or `header`, " +
                "but found: `" +
                signingProperties.in +
                "`");
        }
        return clonedRequest;
    }
}

;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/httpBearerAuth.js

class HttpBearerAuthSigner {
    async sign(httpRequest, identity, signingProperties) {
        const clonedRequest = HttpRequest.clone(httpRequest);
        if (!identity.token) {
            throw new Error("request could not be signed with `token` since the `token` is not defined");
        }
        clonedRequest.headers["Authorization"] = `Bearer ${identity.token}`;
        return clonedRequest;
    }
}

;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/httpAuthSchemes/index.js




;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/memoizeIdentityProvider.js
const createIsIdentityExpiredFunction = (expirationMs) => (identity) => doesIdentityRequireRefresh(identity) && identity.expiration.getTime() - Date.now() < expirationMs;
const EXPIRATION_MS = 300000;
const isIdentityExpired = createIsIdentityExpiredFunction(EXPIRATION_MS);
const doesIdentityRequireRefresh = (identity) => identity.expiration !== undefined;
const memoizeIdentityProvider = (provider, isExpired, requiresRefresh) => {
    if (provider === undefined) {
        return undefined;
    }
    const normalizedProvider = typeof provider !== "function" ? async () => Promise.resolve(provider) : provider;
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async (options) => {
        if (!pending) {
            pending = normalizedProvider(options);
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options) => {
            if (!hasResult || options?.forceRefresh) {
                resolved = await coalesceProvider(options);
            }
            return resolved;
        };
    }
    return async (options) => {
        if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider(options);
        }
        if (isConstant) {
            return resolved;
        }
        if (!requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider(options);
            return resolved;
        }
        return resolved;
    };
};

;// ./node_modules/@smithy/core/dist-es/util-identity-and-auth/index.js




;// ./node_modules/@smithy/core/dist-es/getSmithyContext.js

const getSmithyContext = (context) => context[SMITHY_CONTEXT_KEY] || (context[SMITHY_CONTEXT_KEY] = {});

;// ./node_modules/@smithy/core/dist-es/normalizeProvider.js
const normalizeProvider = (input) => {
    if (typeof input === "function")
        return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
};

// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 27 modules
var smithy_client_dist_es = __webpack_require__(5342);
;// ./node_modules/@smithy/core/dist-es/protocols/requestBuilder.js


function requestBuilder(input, context) {
    return new RequestBuilder(input, context);
}
class RequestBuilder {
    constructor(input, context) {
        this.input = input;
        this.context = context;
        this.query = {};
        this.method = "";
        this.headers = {};
        this.path = "";
        this.body = null;
        this.hostname = "";
        this.resolvePathStack = [];
    }
    async build() {
        const { hostname, protocol = "https", port, path: basePath } = await this.context.endpoint();
        this.path = basePath;
        for (const resolvePath of this.resolvePathStack) {
            resolvePath(this.path);
        }
        return new protocol_http_dist_es/* HttpRequest */.Kd({
            protocol,
            hostname: this.hostname || hostname,
            port,
            method: this.method,
            path: this.path,
            query: this.query,
            body: this.body,
            headers: this.headers,
        });
    }
    hn(hostname) {
        this.hostname = hostname;
        return this;
    }
    bp(uriLabel) {
        this.resolvePathStack.push((basePath) => {
            this.path = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + uriLabel;
        });
        return this;
    }
    p(memberName, labelValueProvider, uriLabel, isGreedyLabel) {
        this.resolvePathStack.push((path) => {
            this.path = (0,smithy_client_dist_es/* resolvedPath */.un)(path, this.input, memberName, labelValueProvider, uriLabel, isGreedyLabel);
        });
        return this;
    }
    h(headers) {
        this.headers = headers;
        return this;
    }
    q(query) {
        this.query = query;
        return this;
    }
    b(body) {
        this.body = body;
        return this;
    }
    m(method) {
        this.method = method;
        return this;
    }
}

;// ./node_modules/@smithy/core/dist-es/pagination/createPaginator.js
const makePagedClientRequest = async (CommandCtor, client, input, ...args) => {
    return await client.send(new CommandCtor(input), ...args);
};
function createPaginator(ClientCtor, CommandCtor, inputTokenName, outputTokenName, pageSizeTokenName) {
    return async function* paginateOperation(config, input, ...additionalArguments) {
        let token = config.startingToken || undefined;
        let hasNext = true;
        let page;
        while (hasNext) {
            input[inputTokenName] = token;
            if (pageSizeTokenName) {
                input[pageSizeTokenName] = input[pageSizeTokenName] ?? config.pageSize;
            }
            if (config.client instanceof ClientCtor) {
                page = await makePagedClientRequest(CommandCtor, config.client, input, ...additionalArguments);
            }
            else {
                throw new Error(`Invalid client, expected instance of ${ClientCtor.name}`);
            }
            yield page;
            const prevToken = token;
            token = get(page, outputTokenName);
            hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
        }
        return undefined;
    };
}
const get = (fromObject, path) => {
    let cursor = fromObject;
    const pathComponents = path.split(".");
    for (const step of pathComponents) {
        if (!cursor || typeof cursor !== "object") {
            return undefined;
        }
        cursor = cursor[step];
    }
    return cursor;
};

;// ./node_modules/@smithy/core/dist-es/index.js









/***/ }),

/***/ 3957:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  NC: () => (/* reexport */ FetchHttpHandler),
  kv: () => (/* reexport */ streamCollector)
});

// UNUSED EXPORTS: keepAliveSupport

// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var dist_es = __webpack_require__(5479);
// EXTERNAL MODULE: ./node_modules/@smithy/util-uri-escape/dist-es/escape-uri.js
var escape_uri = __webpack_require__(2531);
;// ./node_modules/@smithy/querystring-builder/dist-es/index.js

function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0,escape_uri/* escapeUri */.o)(key);
        if (Array.isArray(value)) {
            for (let i = 0, iLen = value.length; i < iLen; i++) {
                parts.push(`${key}=${(0,escape_uri/* escapeUri */.o)(value[i])}`);
            }
        }
        else {
            let qsEntry = key;
            if (value || typeof value === "string") {
                qsEntry += `=${(0,escape_uri/* escapeUri */.o)(value)}`;
            }
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/request-timeout.js
function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject) => {
        if (timeoutInMs) {
            setTimeout(() => {
                const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
                timeoutError.name = "TimeoutError";
                reject(timeoutError);
            }, timeoutInMs);
        }
    });
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js



const keepAliveSupport = {
    supported: undefined,
};
class FetchHttpHandler {
    static create(instanceOrOptions) {
        if (typeof instanceOrOptions?.handle === "function") {
            return instanceOrOptions;
        }
        return new FetchHttpHandler(instanceOrOptions);
    }
    constructor(options) {
        if (typeof options === "function") {
            this.configProvider = options().then((opts) => opts || {});
        }
        else {
            this.config = options ?? {};
            this.configProvider = Promise.resolve(this.config);
        }
        if (keepAliveSupport.supported === undefined) {
            keepAliveSupport.supported = Boolean(typeof Request !== "undefined" && "keepalive" in new Request("https://[::1]"));
        }
    }
    destroy() {
    }
    async handle(request, { abortSignal } = {}) {
        if (!this.config) {
            this.config = await this.configProvider;
        }
        const requestTimeoutInMs = this.config.requestTimeout;
        const keepAlive = this.config.keepAlive === true;
        const credentials = this.config.credentials;
        if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        let path = request.path;
        const queryString = buildQueryString(request.query || {});
        if (queryString) {
            path += `?${queryString}`;
        }
        if (request.fragment) {
            path += `#${request.fragment}`;
        }
        let auth = "";
        if (request.username != null || request.password != null) {
            const username = request.username ?? "";
            const password = request.password ?? "";
            auth = `${username}:${password}@`;
        }
        const { port, method } = request;
        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? undefined : request.body;
        const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method: method,
            credentials,
        };
        if (this.config?.cache) {
            requestOptions.cache = this.config.cache;
        }
        if (body) {
            requestOptions.duplex = "half";
        }
        if (typeof AbortController !== "undefined") {
            requestOptions.signal = abortSignal;
        }
        if (keepAliveSupport.supported) {
            requestOptions.keepalive = keepAlive;
        }
        if (typeof this.config.requestInit === "function") {
            Object.assign(requestOptions, this.config.requestInit(request));
        }
        let removeSignalEventListener = () => { };
        const fetchRequest = new Request(url, requestOptions);
        const raceOfPromises = [
            fetch(fetchRequest).then((response) => {
                const fetchHeaders = response.headers;
                const transformedHeaders = {};
                for (const pair of fetchHeaders.entries()) {
                    transformedHeaders[pair[0]] = pair[1];
                }
                const hasReadableStream = response.body != undefined;
                if (!hasReadableStream) {
                    return response.blob().then((body) => ({
                        response: new dist_es/* HttpResponse */.cS({
                            headers: transformedHeaders,
                            reason: response.statusText,
                            statusCode: response.status,
                            body,
                        }),
                    }));
                }
                return {
                    response: new dist_es/* HttpResponse */.cS({
                        headers: transformedHeaders,
                        reason: response.statusText,
                        statusCode: response.status,
                        body: response.body,
                    }),
                };
            }),
            requestTimeout(requestTimeoutInMs),
        ];
        if (abortSignal) {
            raceOfPromises.push(new Promise((resolve, reject) => {
                const onAbort = () => {
                    const abortError = new Error("Request aborted");
                    abortError.name = "AbortError";
                    reject(abortError);
                };
                if (typeof abortSignal.addEventListener === "function") {
                    const signal = abortSignal;
                    signal.addEventListener("abort", onAbort, { once: true });
                    removeSignalEventListener = () => signal.removeEventListener("abort", onAbort);
                }
                else {
                    abortSignal.onabort = onAbort;
                }
            }));
        }
        return Promise.race(raceOfPromises).finally(removeSignalEventListener);
    }
    updateHttpClientConfig(key, value) {
        this.config = undefined;
        this.configProvider = this.configProvider.then((config) => {
            config[key] = value;
            return config;
        });
    }
    httpHandlerConfigs() {
        return this.config ?? {};
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 3 modules
var util_base64_dist_es = __webpack_require__(1302);
;// ./node_modules/@smithy/fetch-http-handler/dist-es/stream-collector.js

const streamCollector = (stream) => {
    if (typeof Blob === "function" && stream instanceof Blob) {
        return collectBlob(stream);
    }
    return collectStream(stream);
};
async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0,util_base64_dist_es/* fromBase64 */.E)(base64);
    return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
    const chunks = [];
    const reader = stream.getReader();
    let isDone = false;
    let length = 0;
    while (!isDone) {
        const { done, value } = await reader.read();
        if (value) {
            chunks.push(value);
            length += value.length;
        }
        isDone = done;
    }
    const collected = new Uint8Array(length);
    let offset = 0;
    for (const chunk of chunks) {
        collected.set(chunk, offset);
        offset += chunk.length;
    }
    return collected;
}
function readToBase64(blob) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
            if (reader.readyState !== 2) {
                return reject(new Error("Reader aborted too early"));
            }
            const result = (reader.result ?? "");
            const commaIndex = result.indexOf(",");
            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = () => reject(new Error("Read aborted"));
        reader.onerror = () => reject(reader.error);
        reader.readAsDataURL(blob);
    });
}

;// ./node_modules/@smithy/fetch-http-handler/dist-es/index.js




/***/ }),

/***/ 2423:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ invalidProvider)
/* harmony export */ });
const invalidProvider = (message) => () => Promise.reject(message);


/***/ }),

/***/ 649:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   vK: () => (/* binding */ getContentLengthPlugin)
/* harmony export */ });
/* unused harmony exports contentLengthMiddleware, contentLengthMiddlewareOptions */
/* harmony import */ var _smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5479);

const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next) => async (args) => {
        const request = args.request;
        if (_smithy_protocol_http__WEBPACK_IMPORTED_MODULE_0__/* .HttpRequest */ .Kd.isInstance(request)) {
            const { body, headers } = request;
            if (body &&
                Object.keys(headers)
                    .map((str) => str.toLowerCase())
                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {
                try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length),
                    };
                }
                catch (error) {
                }
            }
        }
        return next({
            ...args,
            request,
        });
    };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true,
};
const getContentLengthPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    },
});


/***/ }),

/***/ 7012:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ko: () => (/* reexport */ endpointMiddlewareOptions),
  rD: () => (/* reexport */ getEndpointPlugin),
  Co: () => (/* reexport */ resolveEndpointConfig)
});

// UNUSED EXPORTS: endpointMiddleware, getEndpointFromInstructions, resolveParams, toEndpointV1

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/service-customizations/s3.js
const resolveParamsForS3 = async (endpointParams) => {
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
            throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
    }
    else if (!isDnsCompatibleBucketName(bucket) ||
        (bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:")) ||
        bucket.toLowerCase() !== bucket ||
        bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName) => {
    const [arn, partition, service, , , bucket] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = Boolean(isArn && partition && service && bucket);
    if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return isValidArn;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
    const configProvider = async () => {
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
            return configValue();
        }
        return configValue;
    };
    if (configKey === "credentialScope" || canonicalEndpointParamKey === "CredentialScope") {
        return async () => {
            const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
            const configValue = credentials?.credentialScope ?? credentials?.CredentialScope;
            return configValue;
        };
    }
    if (configKey === "accountId" || canonicalEndpointParamKey === "AccountId") {
        return async () => {
            const credentials = typeof config.credentials === "function" ? await config.credentials() : config.credentials;
            const configValue = credentials?.accountId ?? credentials?.AccountId;
            return configValue;
        };
    }
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
            const endpoint = await configProvider();
            if (endpoint && typeof endpoint === "object") {
                if ("url" in endpoint) {
                    return endpoint.url.href;
                }
                if ("hostname" in endpoint) {
                    const { protocol, hostname, port, path } = endpoint;
                    return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
                }
            }
            return endpoint;
        };
    }
    return configProvider;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromConfig.browser.js
const getEndpointFromConfig = async (serviceId) => undefined;

// EXTERNAL MODULE: ./node_modules/@smithy/url-parser/dist-es/index.js + 1 modules
var url_parser_dist_es = __webpack_require__(2641);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/toEndpointV1.js

const toEndpointV1 = (endpoint) => {
    if (typeof endpoint === "object") {
        if ("url" in endpoint) {
            return (0,url_parser_dist_es/* parseUrl */.D)(endpoint.url);
        }
        return endpoint;
    }
    return (0,url_parser_dist_es/* parseUrl */.D)(endpoint);
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js




const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
    if (!clientConfig.endpoint) {
        let endpointFromConfig;
        if (clientConfig.serviceConfiguredEndpoint) {
            endpointFromConfig = await clientConfig.serviceConfiguredEndpoint();
        }
        else {
            endpointFromConfig = await getEndpointFromConfig(clientConfig.serviceId);
        }
        if (endpointFromConfig) {
            clientConfig.endpoint = () => Promise.resolve(toEndpointV1(endpointFromConfig));
        }
    }
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
            case "staticContextParams":
                endpointParams[name] = instruction.value;
                break;
            case "contextParams":
                endpointParams[name] = commandInput[instruction.name];
                break;
            case "clientContextParams":
            case "builtInParams":
                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
                break;
            default:
                throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
    }
    if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await resolveParamsForS3(endpointParams);
    }
    return endpointParams;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/endpointMiddleware.js


const endpointMiddleware = ({ config, instructions, }) => {
    return (next, context) => async (args) => {
        const endpoint = await getEndpointFromInstructions(args.input, {
            getEndpointParameterInstructions() {
                return instructions;
            },
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = endpoint.properties?.authSchemes;
        const authScheme = context.authSchemes?.[0];
        if (authScheme) {
            context["signing_region"] = authScheme.signingRegion;
            context["signing_service"] = authScheme.signingName;
            const smithyContext = (0,dist_es/* getSmithyContext */.u)(context);
            const httpAuthOption = smithyContext?.selectedHttpAuthScheme?.httpAuthOption;
            if (httpAuthOption) {
                httpAuthOption.signingProperties = Object.assign(httpAuthOption.signingProperties || {}, {
                    signing_region: authScheme.signingRegion,
                    signingRegion: authScheme.signingRegion,
                    signing_service: authScheme.signingName,
                    signingName: authScheme.signingName,
                    signingRegionSet: authScheme.signingRegionSet,
                }, authScheme.properties);
            }
        }
        return next({
            ...args,
        });
    };
};

// EXTERNAL MODULE: ./node_modules/@smithy/middleware-serde/dist-es/index.js + 3 modules
var middleware_serde_dist_es = __webpack_require__(1208);
;// ./node_modules/@smithy/middleware-endpoint/dist-es/getEndpointPlugin.js


const endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: middleware_serde_dist_es/* serializerMiddlewareOption */.Ou.name,
};
const getEndpointPlugin = (config, instructions) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(endpointMiddleware({
            config,
            instructions,
        }), endpointMiddlewareOptions);
    },
});

;// ./node_modules/@smithy/middleware-endpoint/dist-es/resolveEndpointConfig.js



const resolveEndpointConfig = (input) => {
    const tls = input.tls ?? true;
    const { endpoint } = input;
    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await (0,dist_es/* normalizeProvider */.t)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    const resolvedConfig = {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0,dist_es/* normalizeProvider */.t)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0,dist_es/* normalizeProvider */.t)(input.useFipsEndpoint ?? false),
    };
    let configuredEndpointPromise = undefined;
    resolvedConfig.serviceConfiguredEndpoint = async () => {
        if (input.serviceId && !configuredEndpointPromise) {
            configuredEndpointPromise = getEndpointFromConfig(input.serviceId);
        }
        return configuredEndpointPromise;
    };
    return resolvedConfig;
};

;// ./node_modules/@smithy/middleware-endpoint/dist-es/index.js







/***/ }),

/***/ 6232:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ey: () => (/* reexport */ getRetryPlugin),
  $z: () => (/* reexport */ resolveRetryConfig),
  j7: () => (/* reexport */ retryMiddlewareOptions)
});

// UNUSED EXPORTS: AdaptiveRetryStrategy, CONFIG_MAX_ATTEMPTS, CONFIG_RETRY_MODE, ENV_MAX_ATTEMPTS, ENV_RETRY_MODE, NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS, StandardRetryStrategy, defaultDelayDecider, defaultRetryDecider, getOmitRetryHeadersPlugin, getRetryAfterHint, omitRetryHeadersMiddleware, omitRetryHeadersMiddlewareOptions, retryMiddleware

// EXTERNAL MODULE: ./node_modules/@smithy/util-retry/dist-es/index.js + 8 modules
var dist_es = __webpack_require__(3323);
// EXTERNAL MODULE: ./node_modules/@smithy/protocol-http/dist-es/index.js + 5 modules
var protocol_http_dist_es = __webpack_require__(5479);
// EXTERNAL MODULE: ./node_modules/@smithy/service-error-classification/dist-es/index.js + 1 modules
var service_error_classification_dist_es = __webpack_require__(4542);
// EXTERNAL MODULE: ./node_modules/uuid/dist/esm-browser/v4.js + 3 modules
var v4 = __webpack_require__(3829);
;// ./node_modules/@smithy/middleware-retry/dist-es/defaultRetryQuota.js

const getDefaultRetryQuota = (initialRetryTokens, options) => {
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? dist_es/* NO_RETRY_INCREMENT */.XP;
    const retryCost = options?.retryCost ?? dist_es/* RETRY_COST */.XS;
    const timeoutRetryCost = options?.timeoutRetryCost ?? dist_es/* TIMEOUT_RETRY_COST */.Rn;
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error) => (error.name === "TimeoutError" ? timeoutRetryCost : retryCost);
    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
            throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens,
    });
};

;// ./node_modules/@smithy/middleware-retry/dist-es/delayDecider.js

const defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(dist_es/* MAXIMUM_RETRY_DELAY */.G8, Math.random() * 2 ** attempts * delayBase));

;// ./node_modules/@smithy/middleware-retry/dist-es/retryDecider.js

const defaultRetryDecider = (error) => {
    if (!error) {
        return false;
    }
    return (0,service_error_classification_dist_es/* isRetryableByTrait */.S0)(error) || (0,service_error_classification_dist_es/* isClockSkewError */.h5)(error) || (0,service_error_classification_dist_es/* isThrottlingError */.Qb)(error) || (0,service_error_classification_dist_es/* isTransientError */.bV)(error);
};

;// ./node_modules/@smithy/middleware-retry/dist-es/util.js
const asSdkError = (error) => {
    if (error instanceof Error)
        return error;
    if (error instanceof Object)
        return Object.assign(new Error(), error);
    if (typeof error === "string")
        return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};

;// ./node_modules/@smithy/middleware-retry/dist-es/StandardRetryStrategy.js








class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = dist_es/* RETRY_MODES */.cm.STANDARD;
        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;
        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;
        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(dist_es/* INITIAL_RETRY_TOKENS */.Df);
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        }
        catch (error) {
            maxAttempts = dist_es/* DEFAULT_MAX_ATTEMPTS */.Gz;
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_dist_es/* HttpRequest */.Kd.isInstance(request)) {
            request.headers[dist_es/* INVOCATION_ID_HEADER */.l5] = (0,v4/* default */.A)();
        }
        while (true) {
            try {
                if (protocol_http_dist_es/* HttpRequest */.Kd.isInstance(request)) {
                    request.headers[dist_es/* REQUEST_HEADER */.ok] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                if (options?.beforeRequest) {
                    await options.beforeRequest();
                }
                const { response, output } = await next(args);
                if (options?.afterRequest) {
                    options.afterRequest(response);
                }
                this.retryQuota.releaseRetryTokens(retryTokenAmount);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalDelay;
                return { response, output };
            }
            catch (e) {
                const err = asSdkError(e);
                attempts++;
                if (this.shouldRetry(err, attempts, maxAttempts)) {
                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                    const delayFromDecider = this.delayDecider((0,service_error_classification_dist_es/* isThrottlingError */.Qb)(err) ? dist_es/* THROTTLING_RETRY_DELAY_BASE */.jh : dist_es/* DEFAULT_RETRY_DELAY_BASE */.bp, attempts);
                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                    totalDelay += delay;
                    await new Promise((resolve) => setTimeout(resolve, delay));
                    continue;
                }
                if (!err.$metadata) {
                    err.$metadata = {};
                }
                err.$metadata.attempts = attempts;
                err.$metadata.totalRetryDelay = totalDelay;
                throw err;
            }
        }
    }
}
const getDelayFromRetryAfterHeader = (response) => {
    if (!protocol_http_dist_es/* HttpResponse */.cS.isInstance(response))
        return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
        return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};

;// ./node_modules/@smithy/middleware-retry/dist-es/AdaptiveRetryStrategy.js


class AdaptiveRetryStrategy extends StandardRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new dist_es/* DefaultRateLimiter */.QJ();
        this.mode = dist_es/* RETRY_MODES */.cm.ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async () => {
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response) => {
                this.rateLimiter.updateClientSendingRate(response);
            },
        });
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-middleware/dist-es/index.js + 2 modules
var util_middleware_dist_es = __webpack_require__(7135);
;// ./node_modules/@smithy/middleware-retry/dist-es/configurations.js


const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => {
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    configFileSelector: (profile) => {
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value)
            return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
    },
    default: dist_es/* DEFAULT_MAX_ATTEMPTS */.Gz,
};
const resolveRetryConfig = (input) => {
    const { retryStrategy } = input;
    const maxAttempts = (0,util_middleware_dist_es/* normalizeProvider */.t)(input.maxAttempts ?? dist_es/* DEFAULT_MAX_ATTEMPTS */.Gz);
    return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
            if (retryStrategy) {
                return retryStrategy;
            }
            const retryMode = await (0,util_middleware_dist_es/* normalizeProvider */.t)(input.retryMode)();
            if (retryMode === dist_es/* RETRY_MODES */.cm.ADAPTIVE) {
                return new dist_es/* AdaptiveRetryStrategy */.Y(maxAttempts);
            }
            return new dist_es/* StandardRetryStrategy */.ru(maxAttempts);
        },
    };
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],
    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],
    default: dist_es/* DEFAULT_RETRY_MODE */.L0,
};

;// ./node_modules/@smithy/middleware-retry/dist-es/omitRetryHeadersMiddleware.js


const omitRetryHeadersMiddleware = () => (next) => async (args) => {
    const { request } = args;
    if (HttpRequest.isInstance(request)) {
        delete request.headers[INVOCATION_ID_HEADER];
        delete request.headers[REQUEST_HEADER];
    }
    return next(args);
};
const omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true,
};
const getOmitRetryHeadersPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
    },
});

// EXTERNAL MODULE: ./node_modules/@smithy/smithy-client/dist-es/index.js + 27 modules
var smithy_client_dist_es = __webpack_require__(5342);
;// ./node_modules/@smithy/middleware-retry/dist-es/isStreamingPayload/isStreamingPayload.browser.js
const isStreamingPayload = (request) => request?.body instanceof ReadableStream;

;// ./node_modules/@smithy/middleware-retry/dist-es/retryMiddleware.js







const retryMiddleware = (options) => (next, context) => async (args) => {
    let retryStrategy = await options.retryStrategy();
    const maxAttempts = await options.maxAttempts();
    if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        const isRequest = protocol_http_dist_es/* HttpRequest */.Kd.isInstance(request);
        if (isRequest) {
            request.headers[dist_es/* INVOCATION_ID_HEADER */.l5] = (0,v4/* default */.A)();
        }
        while (true) {
            try {
                if (isRequest) {
                    request.headers[dist_es/* REQUEST_HEADER */.ok] = `attempt=${attempts + 1}; max=${maxAttempts}`;
                }
                const { response, output } = await next(args);
                retryStrategy.recordSuccess(retryToken);
                output.$metadata.attempts = attempts + 1;
                output.$metadata.totalRetryDelay = totalRetryDelay;
                return { response, output };
            }
            catch (e) {
                const retryErrorInfo = getRetryErrorInfo(e);
                lastError = asSdkError(e);
                if (isRequest && isStreamingPayload(request)) {
                    (context.logger instanceof smithy_client_dist_es/* NoOpLogger */.N4 ? console : context.logger)?.warn("An error was encountered in a non-retryable streaming request.");
                    throw lastError;
                }
                try {
                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
                }
                catch (refreshError) {
                    if (!lastError.$metadata) {
                        lastError.$metadata = {};
                    }
                    lastError.$metadata.attempts = attempts + 1;
                    lastError.$metadata.totalRetryDelay = totalRetryDelay;
                    throw lastError;
                }
                attempts = retryToken.getRetryCount();
                const delay = retryToken.getRetryDelay();
                totalRetryDelay += delay;
                await new Promise((resolve) => setTimeout(resolve, delay));
            }
        }
    }
    else {
        retryStrategy = retryStrategy;
        if (retryStrategy?.mode)
            context.userAgent = [...(context.userAgent || []), ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
    }
};
const isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" &&
    typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" &&
    typeof retryStrategy.recordSuccess !== "undefined";
const getRetryErrorInfo = (error) => {
    const errorInfo = {
        error,
        errorType: getRetryErrorType(error),
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
};
const getRetryErrorType = (error) => {
    if ((0,service_error_classification_dist_es/* isThrottlingError */.Qb)(error))
        return "THROTTLING";
    if ((0,service_error_classification_dist_es/* isTransientError */.bV)(error))
        return "TRANSIENT";
    if ((0,service_error_classification_dist_es/* isServerError */.GQ)(error))
        return "SERVER_ERROR";
    return "CLIENT_ERROR";
};
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true,
};
const getRetryPlugin = (options) => ({
    applyToStack: (clientStack) => {
        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    },
});
const getRetryAfterHint = (response) => {
    if (!protocol_http_dist_es/* HttpResponse */.cS.isInstance(response))
        return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName)
        return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
};

;// ./node_modules/@smithy/middleware-retry/dist-es/index.js









/***/ }),

/***/ 1208:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  TM: () => (/* reexport */ getSerdePlugin),
  Ou: () => (/* reexport */ serializerMiddlewareOption)
});

// UNUSED EXPORTS: deserializerMiddleware, deserializerMiddlewareOption, serializerMiddleware

;// ./node_modules/@smithy/middleware-serde/dist-es/deserializerMiddleware.js
const deserializerMiddleware = (options, deserializer) => (next) => async (args) => {
    const { response } = await next(args);
    try {
        const parsed = await deserializer(response, options);
        return {
            response,
            output: parsed,
        };
    }
    catch (error) {
        Object.defineProperty(error, "$response", {
            value: response,
        });
        if (!("$metadata" in error)) {
            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
            error.message += "\n  " + hint;
            if (typeof error.$responseBodyText !== "undefined") {
                if (error.$response) {
                    error.$response.body = error.$responseBodyText;
                }
            }
        }
        throw error;
    }
};

;// ./node_modules/@smithy/middleware-serde/dist-es/serializerMiddleware.js
const serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
    const endpoint = context.endpointV2?.url && options.urlParser
        ? async () => options.urlParser(context.endpointV2.url)
        : options.endpoint;
    if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, { ...options, endpoint });
    return next({
        ...args,
        request,
    });
};

;// ./node_modules/@smithy/middleware-serde/dist-es/serdePlugin.js


const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true,
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true,
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack) => {
            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
        },
    };
}

;// ./node_modules/@smithy/middleware-serde/dist-es/index.js





/***/ }),

/***/ 5479:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Kd: () => (/* reexport */ HttpRequest),
  cS: () => (/* reexport */ HttpResponse),
  eS: () => (/* reexport */ getHttpHandlerExtensionConfiguration),
  jt: () => (/* reexport */ resolveHttpHandlerRuntimeConfig)
});

// UNUSED EXPORTS: Field, Fields, isValidHostname

;// ./node_modules/@smithy/protocol-http/dist-es/extensions/httpExtensionConfiguration.js
const getHttpHandlerExtensionConfiguration = (runtimeConfig) => {
    let httpHandler = runtimeConfig.httpHandler;
    return {
        setHttpHandler(handler) {
            httpHandler = handler;
        },
        httpHandler() {
            return httpHandler;
        },
        updateHttpClientConfig(key, value) {
            httpHandler.updateHttpClientConfig(key, value);
        },
        httpHandlerConfigs() {
            return httpHandler.httpHandlerConfigs();
        },
    };
};
const resolveHttpHandlerRuntimeConfig = (httpHandlerExtensionConfiguration) => {
    return {
        httpHandler: httpHandlerExtensionConfiguration.httpHandler(),
    };
};

;// ./node_modules/@smithy/protocol-http/dist-es/extensions/index.js


// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/protocol-http/dist-es/Field.js

class Field {
    constructor({ name, kind = FieldPosition.HEADER, values = [] }) {
        this.name = name;
        this.kind = kind;
        this.values = values;
    }
    add(value) {
        this.values.push(value);
    }
    set(values) {
        this.values = values;
    }
    remove(value) {
        this.values = this.values.filter((v) => v !== value);
    }
    toString() {
        return this.values.map((v) => (v.includes(",") || v.includes(" ") ? `"${v}"` : v)).join(", ");
    }
    get() {
        return this.values;
    }
}

;// ./node_modules/@smithy/protocol-http/dist-es/httpRequest.js
class HttpRequest {
    constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol
            ? options.protocol.slice(-1) !== ":"
                ? `${options.protocol}:`
                : options.protocol
            : "https:";
        this.path = options.path ? (options.path.charAt(0) !== "/" ? `/${options.path}` : options.path) : "/";
        this.username = options.username;
        this.password = options.password;
        this.fragment = options.fragment;
    }
    static clone(request) {
        const cloned = new HttpRequest({
            ...request,
            headers: { ...request.headers },
        });
        if (cloned.query) {
            cloned.query = cloneQuery(cloned.query);
        }
        return cloned;
    }
    static isInstance(request) {
        if (!request) {
            return false;
        }
        const req = request;
        return ("method" in req &&
            "protocol" in req &&
            "hostname" in req &&
            "path" in req &&
            typeof req["query"] === "object" &&
            typeof req["headers"] === "object");
    }
    clone() {
        return HttpRequest.clone(this);
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [...param] : param,
        };
    }, {});
}

;// ./node_modules/@smithy/protocol-http/dist-es/httpResponse.js
class HttpResponse {
    constructor(options) {
        this.statusCode = options.statusCode;
        this.reason = options.reason;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response)
            return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}

;// ./node_modules/@smithy/protocol-http/dist-es/index.js










/***/ }),

/***/ 4542:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  h5: () => (/* binding */ isClockSkewError),
  S0: () => (/* binding */ isRetryableByTrait),
  GQ: () => (/* binding */ isServerError),
  Qb: () => (/* binding */ isThrottlingError),
  bV: () => (/* binding */ isTransientError)
});

// UNUSED EXPORTS: isClockSkewCorrectedError

;// ./node_modules/@smithy/service-error-classification/dist-es/constants.js
const CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch",
];
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException",
];
const TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
const NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];

;// ./node_modules/@smithy/service-error-classification/dist-es/index.js

const isRetryableByTrait = (error) => error.$retryable !== undefined;
const isClockSkewError = (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name);
const isClockSkewCorrectedError = (error) => error.$metadata?.clockSkewCorrected;
const isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||
    THROTTLING_ERROR_CODES.includes(error.name) ||
    error.$retryable?.throttling == true;
const isTransientError = (error) => isClockSkewCorrectedError(error) ||
    TRANSIENT_ERROR_CODES.includes(error.name) ||
    NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") ||
    TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);
const isServerError = (error) => {
    if (error.$metadata?.httpStatusCode !== undefined) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
            return true;
        }
        return false;
    }
    return false;
};


/***/ }),

/***/ 5342:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Kj: () => (/* reexport */ Client),
  uB: () => (/* reexport */ Command),
  N4: () => (/* reexport */ NoOpLogger),
  $H: () => (/* reexport */ SENSITIVE_STRING),
  TJ: () => (/* reexport */ ServiceException),
  Ss: () => (/* reexport */ _json),
  Px: () => (/* reexport */ collectBody),
  J1: () => (/* reexport */ createAggregatedClient),
  Mw: () => (/* reexport */ decorateServiceException),
  ak: () => (/* reexport */ expectBoolean),
  ET: () => (/* reexport */ expectInt32),
  Yy: () => (/* reexport */ expectLong),
  Y0: () => (/* reexport */ expectNonNull),
  r$: () => (/* reexport */ expectNumber),
  Xk: () => (/* reexport */ expectObject),
  lK: () => (/* reexport */ expectString),
  tN: () => (/* reexport */ expectUnion),
  xA: () => (/* reexport */ getDefaultExtensionConfiguration),
  JW: () => (/* reexport */ limitedParseDouble),
  Zx: () => (/* reexport */ limitedParseFloat32),
  lT: () => (/* reexport */ loadConfigsForDefaultMode),
  Tj: () => (/* reexport */ map),
  l3: () => (/* reexport */ parseEpochTimestamp),
  t_: () => (/* reexport */ parseRfc3339DateTimeWithOffset),
  uv: () => (/* reexport */ resolveDefaultRuntimeConfig),
  un: () => (/* reexport */ resolvedPath),
  VA: () => (/* reexport */ serializeFloat),
  s: () => (/* reexport */ take),
  jr: () => (/* reexport */ withBaseException)
});

// UNUSED EXPORTS: LazyJsonString, StringWrapper, convertMap, dateToUtcString, emitWarningIfUnsupportedVersion, expectByte, expectFloat32, expectInt, expectShort, extendedEncodeURIComponent, getArrayIfSingleItem, getDefaultClientConfiguration, getValueFromTextNode, handleFloat, isSerializableHeaderValue, limitedParseFloat, logger, parseBoolean, parseRfc3339DateTime, parseRfc7231DateTime, quoteHeader, serializeDateTime, splitEvery, splitHeader, strictParseByte, strictParseDouble, strictParseFloat, strictParseFloat32, strictParseInt, strictParseInt32, strictParseLong, strictParseShort, throwDefaultError

;// ./node_modules/@smithy/middleware-stack/dist-es/MiddlewareStack.js
const getAllAliases = (name, aliases) => {
    const _aliases = [];
    if (name) {
        _aliases.push(name);
    }
    if (aliases) {
        for (const alias of aliases) {
            _aliases.push(alias);
        }
    }
    return _aliases;
};
const getMiddlewareNameWithAliases = (name, aliases) => {
    return `${name || "anonymous"}${aliases && aliases.length > 0 ? ` (a.k.a. ${aliases.join(",")})` : ""}`;
};
const constructStack = () => {
    let absoluteEntries = [];
    let relativeEntries = [];
    let identifyOnResolve = false;
    const entriesNameSet = new Set();
    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||
        priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            const aliases = getAllAliases(entry.name, entry.aliases);
            if (aliases.includes(toRemove)) {
                isRemoved = true;
                for (const alias of aliases) {
                    entriesNameSet.delete(alias);
                }
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
            if (entry.middleware === toRemove) {
                isRemoved = true;
                for (const alias of getAllAliases(entry.name, entry.aliases)) {
                    entriesNameSet.delete(alias);
                }
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
            toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
            toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        toStack.identifyOnResolve?.(stack.identifyOnResolve());
        return toStack;
    };
    const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
            if (entry.before.length === 0 && entry.after.length === 0) {
                expandedMiddlewareList.push(entry);
            }
            else {
                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
            }
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
                normalizedEntriesNameMap[alias] = normalizedEntry;
            }
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
            const normalizedEntry = {
                ...entry,
                before: [],
                after: [],
            };
            for (const alias of getAllAliases(normalizedEntry.name, normalizedEntry.aliases)) {
                normalizedEntriesNameMap[alias] = normalizedEntry;
            }
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) {
                        return;
                    }
                    throw new Error(`${entry.toMiddleware} is not found when adding ` +
                        `${getMiddlewareNameWithAliases(entry.name, entry.aliases)} ` +
                        `middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") {
                    toMiddleware.after.push(entry);
                }
                if (entry.relation === "before") {
                    toMiddleware.before.push(entry);
                }
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries)
            .map(expandRelativeMiddlewareList)
            .reduce((wholeList, expandedMiddlewareList) => {
            wholeList.push(...expandedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {}) => {
            const { name, override, aliases: _aliases } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options,
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias) => entriesNameSet.has(alias))) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases) {
                        const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));
                        if (toOverrideIndex === -1) {
                            continue;
                        }
                        const toOverride = absoluteEntries[toOverrideIndex];
                        if (toOverride.step !== entry.step || entry.priority !== toOverride.priority) {
                            throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware with ` +
                                `${toOverride.priority} priority in ${toOverride.step} step cannot ` +
                                `be overridden by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware with ` +
                                `${entry.priority} priority in ${entry.step} step.`);
                        }
                        absoluteEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases) {
                    entriesNameSet.add(alias);
                }
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
            const { name, override, aliases: _aliases } = options;
            const entry = {
                middleware,
                ...options,
            };
            const aliases = getAllAliases(name, _aliases);
            if (aliases.length > 0) {
                if (aliases.some((alias) => entriesNameSet.has(alias))) {
                    if (!override)
                        throw new Error(`Duplicate middleware name '${getMiddlewareNameWithAliases(name, _aliases)}'`);
                    for (const alias of aliases) {
                        const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === alias || entry.aliases?.some((a) => a === alias));
                        if (toOverrideIndex === -1) {
                            continue;
                        }
                        const toOverride = relativeEntries[toOverrideIndex];
                        if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                            throw new Error(`"${getMiddlewareNameWithAliases(toOverride.name, toOverride.aliases)}" middleware ` +
                                `${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` +
                                `by "${getMiddlewareNameWithAliases(name, _aliases)}" middleware ${entry.relation} ` +
                                `"${entry.toMiddleware}" middleware.`);
                        }
                        relativeEntries.splice(toOverrideIndex, 1);
                    }
                }
                for (const alias of aliases) {
                    entriesNameSet.add(alias);
                }
            }
            relativeEntries.push(entry);
        },
        clone: () => cloneTo(constructStack()),
        use: (plugin) => {
            plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
            if (typeof toRemove === "string")
                return removeByName(toRemove);
            else
                return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
            let isRemoved = false;
            const filterCb = (entry) => {
                const { tags, name, aliases: _aliases } = entry;
                if (tags && tags.includes(toRemove)) {
                    const aliases = getAllAliases(name, _aliases);
                    for (const alias of aliases) {
                        entriesNameSet.delete(alias);
                    }
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from) => {
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            cloned.identifyOnResolve(identifyOnResolve || cloned.identifyOnResolve() || (from.identifyOnResolve?.() ?? false));
            return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
            return getMiddlewareList(true).map((mw) => {
                const step = mw.step ??
                    mw.relation +
                        " " +
                        mw.toMiddleware;
                return getMiddlewareNameWithAliases(mw.name, mw.aliases) + " - " + step;
            });
        },
        identifyOnResolve(toggle) {
            if (typeof toggle === "boolean")
                identifyOnResolve = toggle;
            return identifyOnResolve;
        },
        resolve: (handler, context) => {
            for (const middleware of getMiddlewareList()
                .map((entry) => entry.middleware)
                .reverse()) {
                handler = middleware(handler, context);
            }
            if (identifyOnResolve) {
                console.log(stack.identify());
            }
            return handler;
        },
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1,
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1,
};

;// ./node_modules/@smithy/middleware-stack/dist-es/index.js


;// ./node_modules/@smithy/smithy-client/dist-es/client.js

class Client {
    constructor(config) {
        this.config = config;
        this.middlewareStack = constructStack();
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const useHandlerCache = options === undefined && this.config.cacheMiddleware === true;
        let handler;
        if (useHandlerCache) {
            if (!this.handlers) {
                this.handlers = new WeakMap();
            }
            const handlers = this.handlers;
            if (handlers.has(command.constructor)) {
                handler = handlers.get(command.constructor);
            }
            else {
                handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
                handlers.set(command.constructor, handler);
            }
        }
        else {
            delete this.handlers;
            handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        }
        if (callback) {
            handler(command)
                .then((result) => callback(null, result.output), (err) => callback(err))
                .catch(() => { });
        }
        else {
            return handler(command).then((result) => result.output);
        }
    }
    destroy() {
        this.config?.requestHandler?.destroy?.();
        delete this.handlers;
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/util-base64/dist-es/index.js + 3 modules
var dist_es = __webpack_require__(1302);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/toUtf8.browser.js
var toUtf8_browser = __webpack_require__(5792);
// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8_browser = __webpack_require__(2637);
;// ./node_modules/@smithy/util-stream/dist-es/blob/transforms.js



function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") {
        return (0,dist_es/* toBase64 */.n)(payload);
    }
    return (0,toUtf8_browser/* toUtf8 */.P)(payload);
}
function transformFromString(str, encoding) {
    if (encoding === "base64") {
        return Uint8ArrayBlobAdapter.mutate((0,dist_es/* fromBase64 */.E)(str));
    }
    return Uint8ArrayBlobAdapter.mutate((0,fromUtf8_browser/* fromUtf8 */.a)(str));
}

;// ./node_modules/@smithy/util-stream/dist-es/blob/Uint8ArrayBlobAdapter.js

class Uint8ArrayBlobAdapter extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
        switch (typeof source) {
            case "string":
                return transformFromString(source, encoding);
            default:
                throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
        }
    }
    static mutate(source) {
        Object.setPrototypeOf(source, Uint8ArrayBlobAdapter.prototype);
        return source;
    }
    transformToString(encoding = "utf-8") {
        return transformToString(this, encoding);
    }
}

// EXTERNAL MODULE: ./node_modules/@smithy/fetch-http-handler/dist-es/index.js + 4 modules
var fetch_http_handler_dist_es = __webpack_require__(3957);
// EXTERNAL MODULE: ./node_modules/@smithy/util-hex-encoding/dist-es/index.js
var util_hex_encoding_dist_es = __webpack_require__(8004);
;// ./node_modules/@smithy/util-stream/dist-es/sdk-stream-mixin.browser.js





const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
const sdkStreamMixin = (stream) => {
    if (!isBlobInstance(stream) && !isReadableStream(stream)) {
        const name = stream?.__proto__?.constructor?.name || stream;
        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
        if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await streamCollector(stream);
    };
    const blobToWebStream = (blob) => {
        if (typeof blob.stream !== "function") {
            throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" +
                "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
        }
        return blob.stream();
    };
    return Object.assign(stream, {
        transformToByteArray: transformToByteArray,
        transformToString: async (encoding) => {
            const buf = await transformToByteArray();
            if (encoding === "base64") {
                return toBase64(buf);
            }
            else if (encoding === "hex") {
                return toHex(buf);
            }
            else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
                return toUtf8(buf);
            }
            else if (typeof TextDecoder === "function") {
                return new TextDecoder(encoding).decode(buf);
            }
            else {
                throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
            }
        },
        transformToWebStream: () => {
            if (transformed) {
                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
            }
            transformed = true;
            if (isBlobInstance(stream)) {
                return blobToWebStream(stream);
            }
            else if (isReadableStream(stream)) {
                return stream;
            }
            else {
                throw new Error(`Cannot transform payload to web stream, got ${stream}`);
            }
        },
    });
};
const isBlobInstance = (stream) => typeof Blob === "function" && stream instanceof Blob;

;// ./node_modules/@smithy/util-stream/dist-es/index.js







;// ./node_modules/@smithy/smithy-client/dist-es/collect-stream-body.js

const collectBody = async (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
        return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
    }
    const fromContext = context.streamCollector(streamBody);
    return Uint8ArrayBlobAdapter.mutate(await fromContext);
};

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var types_dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/smithy-client/dist-es/command.js


class Command {
    constructor() {
        this.middlewareStack = constructStack();
    }
    static classBuilder() {
        return new ClassBuilder();
    }
    resolveMiddlewareWithContext(clientStack, configuration, options, { middlewareFn, clientName, commandName, inputFilterSensitiveLog, outputFilterSensitiveLog, smithyContext, additionalContext, CommandCtor, }) {
        for (const mw of middlewareFn.bind(this)(CommandCtor, clientStack, configuration, options)) {
            this.middlewareStack.use(mw);
        }
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog,
            outputFilterSensitiveLog,
            [types_dist_es/* SMITHY_CONTEXT_KEY */.Vf]: {
                commandInstance: this,
                ...smithyContext,
            },
            ...additionalContext,
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
}
class ClassBuilder {
    constructor() {
        this._init = () => { };
        this._ep = {};
        this._middlewareFn = () => [];
        this._commandName = "";
        this._clientName = "";
        this._additionalContext = {};
        this._smithyContext = {};
        this._inputFilterSensitiveLog = (_) => _;
        this._outputFilterSensitiveLog = (_) => _;
        this._serializer = null;
        this._deserializer = null;
    }
    init(cb) {
        this._init = cb;
    }
    ep(endpointParameterInstructions) {
        this._ep = endpointParameterInstructions;
        return this;
    }
    m(middlewareSupplier) {
        this._middlewareFn = middlewareSupplier;
        return this;
    }
    s(service, operation, smithyContext = {}) {
        this._smithyContext = {
            service,
            operation,
            ...smithyContext,
        };
        return this;
    }
    c(additionalContext = {}) {
        this._additionalContext = additionalContext;
        return this;
    }
    n(clientName, commandName) {
        this._clientName = clientName;
        this._commandName = commandName;
        return this;
    }
    f(inputFilter = (_) => _, outputFilter = (_) => _) {
        this._inputFilterSensitiveLog = inputFilter;
        this._outputFilterSensitiveLog = outputFilter;
        return this;
    }
    ser(serializer) {
        this._serializer = serializer;
        return this;
    }
    de(deserializer) {
        this._deserializer = deserializer;
        return this;
    }
    build() {
        const closure = this;
        let CommandRef;
        return (CommandRef = class extends Command {
            static getEndpointParameterInstructions() {
                return closure._ep;
            }
            constructor(...[input]) {
                super();
                this.serialize = closure._serializer;
                this.deserialize = closure._deserializer;
                this.input = input ?? {};
                closure._init(this);
            }
            resolveMiddleware(stack, configuration, options) {
                return this.resolveMiddlewareWithContext(stack, configuration, options, {
                    CommandCtor: CommandRef,
                    middlewareFn: closure._middlewareFn,
                    clientName: closure._clientName,
                    commandName: closure._commandName,
                    inputFilterSensitiveLog: closure._inputFilterSensitiveLog,
                    outputFilterSensitiveLog: closure._outputFilterSensitiveLog,
                    smithyContext: closure._smithyContext,
                    additionalContext: closure._additionalContext,
                });
            }
        });
    }
}

;// ./node_modules/@smithy/smithy-client/dist-es/constants.js
const SENSITIVE_STRING = "***SensitiveInformation***";

;// ./node_modules/@smithy/smithy-client/dist-es/create-aggregated-client.js
const createAggregatedClient = (commands, Client) => {
    for (const command of Object.keys(commands)) {
        const CommandCtor = commands[command];
        const methodImpl = async function (args, optionsOrCb, cb) {
            const command = new CommandCtor(args);
            if (typeof optionsOrCb === "function") {
                this.send(command, optionsOrCb);
            }
            else if (typeof cb === "function") {
                if (typeof optionsOrCb !== "object")
                    throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
                this.send(command, optionsOrCb || {}, cb);
            }
            else {
                return this.send(command, optionsOrCb);
            }
        };
        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
        Client.prototype[methodName] = methodImpl;
    }
};

;// ./node_modules/@smithy/smithy-client/dist-es/parse-utils.js
const parseBoolean = (value) => {
    switch (value) {
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "number") {
        if (value === 0 || value === 1) {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
            return false;
        }
        if (value === 1) {
            return true;
        }
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
            return false;
        }
        if (lower === "true") {
            return true;
        }
    }
    if (typeof value === "boolean") {
        return value;
    }
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) {
                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            }
            return parsed;
        }
    }
    if (typeof value === "number") {
        return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value) => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
            throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
    }
    return expected;
};
const expectLong = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = (/* unused pure expression or super */ null && (expectLong));
const expectInt32 = (value) => expectSizedInt(value, 32);
const expectShort = (value) => expectSizedInt(value, 16);
const expectByte = (value) => expectSizedInt(value, 8);
const expectSizedInt = (value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
};
const castInt = (value, size) => {
    switch (size) {
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location) => {
    if (value === null || value === undefined) {
        if (location) {
            throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
        return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value === "string") {
        return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject)
        .filter(([, v]) => v != null)
        .map(([k]) => k);
    if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
};
const strictParseDouble = (value) => {
    if (typeof value == "string") {
        return expectNumber(parseNumber(value));
    }
    return expectNumber(value);
};
const strictParseFloat = (/* unused pure expression or super */ null && (strictParseDouble));
const strictParseFloat32 = (value) => {
    if (typeof value == "string") {
        return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value) => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
};
const limitedParseDouble = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectNumber(value);
};
const handleFloat = (/* unused pure expression or super */ null && (limitedParseDouble));
const limitedParseFloat = (/* unused pure expression or super */ null && (limitedParseDouble));
const limitedParseFloat32 = (value) => {
    if (typeof value == "string") {
        return parseFloatString(value);
    }
    return expectFloat32(value);
};
const parseFloatString = (value) => {
    switch (value) {
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value) => {
    if (typeof value === "string") {
        return expectLong(parseNumber(value));
    }
    return expectLong(value);
};
const strictParseInt = (/* unused pure expression or super */ null && (strictParseLong));
const strictParseInt32 = (value) => {
    if (typeof value === "string") {
        return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
};
const parse_utils_strictParseShort = (value) => {
    if (typeof value === "string") {
        return expectShort(parseNumber(value));
    }
    return expectShort(value);
};
const strictParseByte = (value) => {
    if (typeof value === "string") {
        return expectByte(parseNumber(value));
    }
    return expectByte(value);
};
const stackTraceWarning = (message) => {
    return String(new TypeError(message).stack || message)
        .split("\n")
        .slice(0, 5)
        .filter((s) => !s.includes("stackTraceWarning"))
        .join("\n");
};
const logger = {
    warn: console.warn,
};

;// ./node_modules/@smithy/smithy-client/dist-es/date-utils.js

const DAYS = (/* unused pure expression or super */ null && (["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]));
const MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = (/* unused pure expression or super */ null && (new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/)));
const parseRfc3339DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
};
const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
const parseRfc3339DateTimeWithOffset = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = parse_utils_strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    if (offsetStr.toUpperCase() != "Z") {
        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
};
const IMF_FIXDATE = (/* unused pure expression or super */ null && (new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/)));
const RFC_850_DATE = (/* unused pure expression or super */ null && (new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/)));
const ASC_TIME = (/* unused pure expression or super */ null && (new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/)));
const parseRfc7231DateTime = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds,
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value) => {
    if (value === null || value === undefined) {
        return undefined;
    }
    let valueAsDouble;
    if (typeof value === "number") {
        valueAsDouble = value;
    }
    else if (typeof value === "string") {
        valueAsDouble = strictParseDouble(value);
    }
    else if (typeof value === "object" && value.tag === 1) {
        valueAsDouble = value.value;
    }
    else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    }
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    }
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value) => {
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
    }
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = (/* unused pure expression or super */ null && (50 * 365 * 24 * 60 * 60 * 1000));
const adjustRfc850Year = (input) => {
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
};
const parseMonthByShortName = (value) => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const validateDayOfMonth = (year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
    }
    if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
};
const isLeapYear = (year) => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper) => {
    const dateVal = strictParseByte(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
};
const parseMilliseconds = (value) => {
    if (value === null || value === undefined) {
        return 0;
    }
    return strictParseFloat32("0." + value) * 1000;
};
const parseOffsetToMilliseconds = (value) => {
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
        direction = 1;
    }
    else if (directionStr == "-") {
        direction = -1;
    }
    else {
        throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
};
const stripLeadingZeroes = (value) => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
    }
    if (idx === 0) {
        return value;
    }
    return value.slice(idx);
};

;// ./node_modules/@smithy/smithy-client/dist-es/exceptions.js
class ServiceException extends Error {
    constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
const decorateServiceException = (exception, additions = {}) => {
    Object.entries(additions)
        .filter(([, v]) => v !== undefined)
        .forEach(([k, v]) => {
        if (exception[k] == undefined || exception[k] === "") {
            exception[k] = v;
        }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};

;// ./node_modules/@smithy/smithy-client/dist-es/default-error-handler.js

const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata,
    });
    throw decorateServiceException(response, parsedBody);
};
const withBaseException = (ExceptionCtor) => {
    return ({ output, parsedBody, errorCode }) => {
        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});

;// ./node_modules/@smithy/smithy-client/dist-es/defaults-mode.js
const loadConfigsForDefaultMode = (mode) => {
    switch (mode) {
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100,
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100,
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000,
            };
        default:
            return {};
    }
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/checksum.js


const getChecksumConfiguration = (runtimeConfig) => {
    const checksumAlgorithms = [];
    for (const id in types_dist_es/* AlgorithmId */.dB) {
        const algorithmId = types_dist_es/* AlgorithmId */.dB[id];
        if (runtimeConfig[algorithmId] === undefined) {
            continue;
        }
        checksumAlgorithms.push({
            algorithmId: () => algorithmId,
            checksumConstructor: () => runtimeConfig[algorithmId],
        });
    }
    return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
            this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
            return this._checksumAlgorithms;
        },
    };
};
const resolveChecksumRuntimeConfig = (clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/retry.js
const getRetryConfiguration = (runtimeConfig) => {
    let _retryStrategy = runtimeConfig.retryStrategy;
    return {
        setRetryStrategy(retryStrategy) {
            _retryStrategy = retryStrategy;
        },
        retryStrategy() {
            return _retryStrategy;
        },
    };
};
const resolveRetryRuntimeConfig = (retryStrategyConfiguration) => {
    const runtimeConfig = {};
    runtimeConfig.retryStrategy = retryStrategyConfiguration.retryStrategy();
    return runtimeConfig;
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/defaultExtensionConfiguration.js


const getDefaultExtensionConfiguration = (runtimeConfig) => {
    return {
        ...getChecksumConfiguration(runtimeConfig),
        ...getRetryConfiguration(runtimeConfig),
    };
};
const getDefaultClientConfiguration = (/* unused pure expression or super */ null && (getDefaultExtensionConfiguration));
const resolveDefaultRuntimeConfig = (config) => {
    return {
        ...resolveChecksumRuntimeConfig(config),
        ...resolveRetryRuntimeConfig(config),
    };
};

;// ./node_modules/@smithy/smithy-client/dist-es/extensions/index.js


;// ./node_modules/@smithy/smithy-client/dist-es/lazy-json.js
const StringWrapper = function () {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [null, ...arguments]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true,
    },
});
Object.setPrototypeOf(StringWrapper, String);
class LazyJsonString extends (/* unused pure expression or super */ null && (StringWrapper)) {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) {
            return object;
        }
        else if (object instanceof String || typeof object === "string") {
            return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
    }
}

;// ./node_modules/@smithy/smithy-client/dist-es/NoOpLogger.js
class NoOpLogger {
    trace() { }
    debug() { }
    info() { }
    warn() { }
    error() { }
}

;// ./node_modules/@smithy/smithy-client/dist-es/object-mapping.js
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    }
    else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        }
        else {
            instructions = arg1;
        }
    }
    for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        applyInstruction(target, null, instructions, key);
    }
    return target;
}
const convertMap = (target) => {
    const output = {};
    for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
    }
    return output;
};
const take = (source, instructions) => {
    const out = {};
    for (const key in instructions) {
        applyInstruction(out, source, instructions, key);
    }
    return out;
};
const mapWithFilter = (target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
            _instructions[key] = value;
        }
        else {
            if (typeof value === "function") {
                _instructions[key] = [filter, value()];
            }
            else {
                _instructions[key] = [filter, value];
            }
        }
        return _instructions;
    }, {}));
};
const applyInstruction = (target, source, instructions, targetKey) => {
    if (source !== null) {
        let instruction = instructions[targetKey];
        if (typeof instruction === "function") {
            instruction = [, instruction];
        }
        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
        if ((typeof filter === "function" && filter(source[sourceKey])) || (typeof filter !== "function" && !!filter)) {
            target[targetKey] = valueFn(source[sourceKey]);
        }
        return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
        let _value;
        const defaultFilterPassed = filter === undefined && (_value = value()) != null;
        const customFilterPassed = (typeof filter === "function" && !!filter(void 0)) || (typeof filter !== "function" && !!filter);
        if (defaultFilterPassed) {
            target[targetKey] = _value;
        }
        else if (customFilterPassed) {
            target[targetKey] = value();
        }
    }
    else {
        const defaultFilterPassed = filter === undefined && value != null;
        const customFilterPassed = (typeof filter === "function" && !!filter(value)) || (typeof filter !== "function" && !!filter);
        if (defaultFilterPassed || customFilterPassed) {
            target[targetKey] = value;
        }
    }
};
const nonNullish = (_) => _ != null;
const pass = (_) => _;

;// ./node_modules/@smithy/smithy-client/dist-es/extended-encode-uri-component.js
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}

;// ./node_modules/@smithy/smithy-client/dist-es/resolve-path.js

const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel
            ? labelValue
                .split("/")
                .map((segment) => extendedEncodeURIComponent(segment))
                .join("/")
            : extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath;
};

;// ./node_modules/@smithy/smithy-client/dist-es/ser-utils.js
const serializeFloat = (value) => {
    if (value !== value) {
        return "NaN";
    }
    switch (value) {
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};
const serializeDateTime = (date) => date.toISOString().replace(".000Z", "Z");

;// ./node_modules/@smithy/smithy-client/dist-es/serde-json.js
const _json = (obj) => {
    if (obj == null) {
        return {};
    }
    if (Array.isArray(obj)) {
        return obj.filter((_) => _ != null).map(_json);
    }
    if (typeof obj === "object") {
        const target = {};
        for (const key of Object.keys(obj)) {
            if (obj[key] == null) {
                continue;
            }
            target[key] = _json(obj[key]);
        }
        return target;
    }
    return obj;
};

;// ./node_modules/@smithy/smithy-client/dist-es/index.js



























/***/ }),

/***/ 7523:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  dB: () => (/* reexport */ AlgorithmId),
  Ue: () => (/* reexport */ EndpointURLScheme),
  Vf: () => (/* reexport */ SMITHY_CONTEXT_KEY)
});

// UNUSED EXPORTS: FieldPosition, HttpApiKeyAuthLocation, HttpAuthLocation, IniSectionType, RequestHandlerProtocol, getDefaultClientConfiguration, resolveDefaultRuntimeConfig

;// ./node_modules/@smithy/types/dist-es/auth/auth.js
var HttpAuthLocation;
(function (HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
})(HttpAuthLocation || (HttpAuthLocation = {}));

;// ./node_modules/@smithy/types/dist-es/auth/HttpApiKeyAuth.js
var HttpApiKeyAuthLocation;
(function (HttpApiKeyAuthLocation) {
    HttpApiKeyAuthLocation["HEADER"] = "header";
    HttpApiKeyAuthLocation["QUERY"] = "query";
})(HttpApiKeyAuthLocation || (HttpApiKeyAuthLocation = {}));

;// ./node_modules/@smithy/types/dist-es/auth/index.js







;// ./node_modules/@smithy/types/dist-es/endpoint.js
var EndpointURLScheme;
(function (EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));

;// ./node_modules/@smithy/types/dist-es/extensions/checksum.js
var AlgorithmId;
(function (AlgorithmId) {
    AlgorithmId["MD5"] = "md5";
    AlgorithmId["CRC32"] = "crc32";
    AlgorithmId["CRC32C"] = "crc32c";
    AlgorithmId["SHA1"] = "sha1";
    AlgorithmId["SHA256"] = "sha256";
})(AlgorithmId || (AlgorithmId = {}));
const checksum_getChecksumConfiguration = (runtimeConfig) => {
    const checksumAlgorithms = [];
    if (runtimeConfig.sha256 !== undefined) {
        checksumAlgorithms.push({
            algorithmId: () => AlgorithmId.SHA256,
            checksumConstructor: () => runtimeConfig.sha256,
        });
    }
    if (runtimeConfig.md5 != undefined) {
        checksumAlgorithms.push({
            algorithmId: () => AlgorithmId.MD5,
            checksumConstructor: () => runtimeConfig.md5,
        });
    }
    return {
        _checksumAlgorithms: checksumAlgorithms,
        addChecksumAlgorithm(algo) {
            this._checksumAlgorithms.push(algo);
        },
        checksumAlgorithms() {
            return this._checksumAlgorithms;
        },
    };
};
const checksum_resolveChecksumRuntimeConfig = (clientConfig) => {
    const runtimeConfig = {};
    clientConfig.checksumAlgorithms().forEach((checksumAlgorithm) => {
        runtimeConfig[checksumAlgorithm.algorithmId()] = checksumAlgorithm.checksumConstructor();
    });
    return runtimeConfig;
};

;// ./node_modules/@smithy/types/dist-es/extensions/defaultClientConfiguration.js

const getDefaultClientConfiguration = (runtimeConfig) => {
    return {
        ...getChecksumConfiguration(runtimeConfig),
    };
};
const resolveDefaultRuntimeConfig = (config) => {
    return {
        ...resolveChecksumRuntimeConfig(config),
    };
};

;// ./node_modules/@smithy/types/dist-es/extensions/index.js




;// ./node_modules/@smithy/types/dist-es/http.js
var FieldPosition;
(function (FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
})(FieldPosition || (FieldPosition = {}));

;// ./node_modules/@smithy/types/dist-es/middleware.js
const SMITHY_CONTEXT_KEY = "__smithy_context";

;// ./node_modules/@smithy/types/dist-es/profile.js
var IniSectionType;
(function (IniSectionType) {
    IniSectionType["PROFILE"] = "profile";
    IniSectionType["SSO_SESSION"] = "sso-session";
    IniSectionType["SERVICES"] = "services";
})(IniSectionType || (IniSectionType = {}));

;// ./node_modules/@smithy/types/dist-es/transfer.js
var RequestHandlerProtocol;
(function (RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));

;// ./node_modules/@smithy/types/dist-es/index.js






































/***/ }),

/***/ 2641:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  D: () => (/* binding */ parseUrl)
});

;// ./node_modules/@smithy/querystring-parser/dist-es/index.js
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
        for (const pair of querystring.split("&")) {
            let [key, value = null] = pair.split("=");
            key = decodeURIComponent(key);
            if (value) {
                value = decodeURIComponent(value);
            }
            if (!(key in query)) {
                query[key] = value;
            }
            else if (Array.isArray(query[key])) {
                query[key].push(value);
            }
            else {
                query[key] = [query[key], value];
            }
        }
    }
    return query;
}

;// ./node_modules/@smithy/url-parser/dist-es/index.js

const parseUrl = (url) => {
    if (typeof url === "string") {
        return parseUrl(new URL(url));
    }
    const { hostname, pathname, port, protocol, search } = url;
    let query;
    if (search) {
        query = parseQueryString(search);
    }
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query,
    };
};


/***/ }),

/***/ 1302:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  E: () => (/* reexport */ fromBase64),
  n: () => (/* reexport */ toBase64)
});

;// ./node_modules/@smithy/util-base64/dist-es/constants.browser.js
const alphabetByEncoding = {};
const alphabetByValue = new Array(64);
for (let i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for (let i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    const index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
for (let i = 0; i < 10; i++) {
    alphabetByEncoding[i.toString(10)] = i + 52;
    const char = i.toString(10);
    const index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
const bitsPerLetter = 6;
const bitsPerByte = 8;
const maxLetterValue = 0b111111;


;// ./node_modules/@smithy/util-base64/dist-es/fromBase64.browser.js

const fromBase64 = (input) => {
    let totalByteLength = (input.length / 4) * 3;
    if (input.slice(-2) === "==") {
        totalByteLength -= 2;
    }
    else if (input.slice(-1) === "=") {
        totalByteLength--;
    }
    const out = new ArrayBuffer(totalByteLength);
    const dataView = new DataView(out);
    for (let i = 0; i < input.length; i += 4) {
        let bits = 0;
        let bitLength = 0;
        for (let j = i, limit = i + 3; j <= limit; j++) {
            if (input[j] !== "=") {
                if (!(input[j] in alphabetByEncoding)) {
                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);
                }
                bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);
                bitLength += bitsPerLetter;
            }
            else {
                bits >>= bitsPerLetter;
            }
        }
        const chunkOffset = (i / 4) * 3;
        bits >>= bitLength % bitsPerByte;
        const byteLength = Math.floor(bitLength / bitsPerByte);
        for (let k = 0; k < byteLength; k++) {
            const offset = (byteLength - k - 1) * bitsPerByte;
            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);
        }
    }
    return new Uint8Array(out);
};

// EXTERNAL MODULE: ./node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8_browser = __webpack_require__(2637);
;// ./node_modules/@smithy/util-base64/dist-es/toBase64.browser.js


function toBase64(_input) {
    let input;
    if (typeof _input === "string") {
        input = (0,fromUtf8_browser/* fromUtf8 */.a)(_input);
    }
    else {
        input = _input;
    }
    const isArrayLike = typeof input === "object" && typeof input.length === "number";
    const isUint8Array = typeof input === "object" &&
        typeof input.byteOffset === "number" &&
        typeof input.byteLength === "number";
    if (!isArrayLike && !isUint8Array) {
        throw new Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");
    }
    let str = "";
    for (let i = 0; i < input.length; i += 3) {
        let bits = 0;
        let bitLength = 0;
        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
            bits |= input[j] << ((limit - j - 1) * bitsPerByte);
            bitLength += bitsPerByte;
        }
        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
        bits <<= bitClusterCount * bitsPerLetter - bitLength;
        for (let k = 1; k <= bitClusterCount; k++) {
            const offset = (bitClusterCount - k) * bitsPerLetter;
            str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}

;// ./node_modules/@smithy/util-base64/dist-es/index.js




/***/ }),

/***/ 9795:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  n: () => (/* reexport */ calculateBodyLength)
});

;// ./node_modules/@smithy/util-body-length-browser/dist-es/calculateBodyLength.js
const TEXT_ENCODER = typeof TextEncoder == "function" ? new TextEncoder() : null;
const calculateBodyLength = (body) => {
    if (typeof body === "string") {
        if (TEXT_ENCODER) {
            return TEXT_ENCODER.encode(body).byteLength;
        }
        let len = body.length;
        for (let i = len - 1; i >= 0; i--) {
            const code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff)
                len++;
            else if (code > 0x7ff && code <= 0xffff)
                len += 2;
            if (code >= 0xdc00 && code <= 0xdfff)
                i--;
        }
        return len;
    }
    else if (typeof body.byteLength === "number") {
        return body.byteLength;
    }
    else if (typeof body.size === "number") {
        return body.size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
};

;// ./node_modules/@smithy/util-body-length-browser/dist-es/index.js



/***/ }),

/***/ 8727:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  I: () => (/* reexport */ resolveDefaultsModeConfig)
});

;// ./node_modules/@smithy/property-provider/dist-es/ProviderError.js
class ProviderError_ProviderError extends Error {
    constructor(message, options = true) {
        let logger;
        let tryNextLink = true;
        if (typeof options === "boolean") {
            logger = undefined;
            tryNextLink = options;
        }
        else if (options != null && typeof options === "object") {
            logger = options.logger;
            tryNextLink = options.tryNextLink ?? true;
        }
        super(message);
        this.name = "ProviderError";
        this.tryNextLink = tryNextLink;
        Object.setPrototypeOf(this, ProviderError_ProviderError.prototype);
        logger?.debug?.(`@smithy/property-provider ${tryNextLink ? "->" : "(!)"} ${message}`);
    }
    static from(error, options = true) {
        return Object.assign(new this(error.message, options), error);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/CredentialsProviderError.js

class CredentialsProviderError extends ProviderError_ProviderError {
    constructor(message, options = true) {
        super(message, options);
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/TokenProviderError.js

class TokenProviderError extends ProviderError_ProviderError {
    constructor(message, options = true) {
        super(message, options);
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}

;// ./node_modules/@smithy/property-provider/dist-es/chain.js

const chain = (...providers) => async () => {
    if (providers.length === 0) {
        throw new ProviderError("No providers in chain");
    }
    let lastProviderError;
    for (const provider of providers) {
        try {
            const credentials = await provider();
            return credentials;
        }
        catch (err) {
            lastProviderError = err;
            if (err?.tryNextLink) {
                continue;
            }
            throw err;
        }
    }
    throw lastProviderError;
};

;// ./node_modules/@smithy/property-provider/dist-es/memoize.js
const memoize = (provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async () => {
        if (!pending) {
            pending = provider();
        }
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        }
        finally {
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) {
        return async (options) => {
            if (!hasResult || options?.forceRefresh) {
                resolved = await coalesceProvider();
            }
            return resolved;
        };
    }
    return async (options) => {
        if (!hasResult || options?.forceRefresh) {
            resolved = await coalesceProvider();
        }
        if (isConstant) {
            return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};

;// ./node_modules/@smithy/property-provider/dist-es/index.js







// EXTERNAL MODULE: ./node_modules/bowser/es5.js
var es5 = __webpack_require__(6880);
var es5_default = /*#__PURE__*/__webpack_require__.n(es5);
;// ./node_modules/@smithy/util-defaults-mode-browser/dist-es/constants.js
const DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];

;// ./node_modules/@smithy/util-defaults-mode-browser/dist-es/resolveDefaultsModeConfig.js



const resolveDefaultsModeConfig = ({ defaultsMode, } = {}) => memoize(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode?.toLowerCase()) {
        case "auto":
            return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
        case "mobile":
        case "in-region":
        case "cross-region":
        case "standard":
        case "legacy":
            return Promise.resolve(mode?.toLocaleLowerCase());
        case undefined:
            return Promise.resolve("legacy");
        default:
            throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
});
const isMobileBrowser = () => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent
        ? es5_default().parse(window.navigator.userAgent)
        : undefined;
    const platform = parsedUA?.platform?.type;
    return platform === "tablet" || platform === "mobile";
};

;// ./node_modules/@smithy/util-defaults-mode-browser/dist-es/index.js



/***/ }),

/***/ 8545:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  kS: () => (/* reexport */ EndpointCache),
  mw: () => (/* reexport */ customEndpointFunctions),
  oX: () => (/* reexport */ isIpAddress),
  X8: () => (/* reexport */ isValidHostLabel),
  sO: () => (/* reexport */ resolveEndpoint)
});

// UNUSED EXPORTS: EndpointError

;// ./node_modules/@smithy/util-endpoints/dist-es/cache/EndpointCache.js
class EndpointCache {
    constructor({ size, params }) {
        this.data = new Map();
        this.parameters = [];
        this.capacity = size ?? 50;
        if (params) {
            this.parameters = params;
        }
    }
    get(endpointParams, resolver) {
        const key = this.hash(endpointParams);
        if (key === false) {
            return resolver();
        }
        if (!this.data.has(key)) {
            if (this.data.size > this.capacity + 10) {
                const keys = this.data.keys();
                let i = 0;
                while (true) {
                    const { value, done } = keys.next();
                    this.data.delete(value);
                    if (done || ++i > 10) {
                        break;
                    }
                }
            }
            this.data.set(key, resolver());
        }
        return this.data.get(key);
    }
    size() {
        return this.data.size;
    }
    hash(endpointParams) {
        let buffer = "";
        const { parameters } = this;
        if (parameters.length === 0) {
            return false;
        }
        for (const param of parameters) {
            const val = String(endpointParams[param] ?? "");
            if (val.includes("|;")) {
                return false;
            }
            buffer += val + "|;";
        }
        return buffer;
    }
}

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isIpAddress.js
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith("[") && value.endsWith("]"));

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isValidHostLabel.js
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false) => {
    if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
        if (!isValidHostLabel(label)) {
            return false;
        }
    }
    return true;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/customEndpointFunctions.js
const customEndpointFunctions = {};

;// ./node_modules/@smithy/util-endpoints/dist-es/debug/debugId.js
const debugId = "endpoints";

;// ./node_modules/@smithy/util-endpoints/dist-es/debug/toDebugString.js
function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
        return input;
    }
    if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
}

;// ./node_modules/@smithy/util-endpoints/dist-es/types/EndpointError.js
class EndpointError extends Error {
    constructor(message) {
        super(message);
        this.name = "EndpointError";
    }
}

;// ./node_modules/@smithy/util-endpoints/dist-es/types/index.js








;// ./node_modules/@smithy/util-endpoints/dist-es/lib/booleanEquals.js
const booleanEquals = (value1, value2) => value1 === value2;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/getAttrPathList.js

const getAttrPathList = (path) => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) {
                throw new EndpointError(`Path: '${path}' does not end with ']'`);
            }
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) {
                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            }
            if (squareBracketIndex !== 0) {
                pathList.push(part.slice(0, squareBracketIndex));
            }
            pathList.push(arrayIndex);
        }
        else {
            pathList.push(part);
        }
    }
    return pathList;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/getAttr.js


const getAttr = (value, path) => getAttrPathList(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
        throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    }
    else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
    }
    return acc[index];
}, value);

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/isSet.js
const isSet = (value) => value != null;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/not.js
const not = (value) => !value;

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/util-endpoints/dist-es/lib/parseURL.js


const DEFAULT_PORTS = {
    [dist_es/* EndpointURLScheme */.Ue.HTTP]: 80,
    [dist_es/* EndpointURLScheme */.Ue.HTTPS]: 443,
};
const parseURL = (value) => {
    const whatwgURL = (() => {
        try {
            if (value instanceof URL) {
                return value;
            }
            if (typeof value === "object" && "hostname" in value) {
                const { hostname, port, protocol = "", path = "", query = {} } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query)
                    .map(([k, v]) => `${k}=${v}`)
                    .join("&");
                return url;
            }
            return new URL(value);
        }
        catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host, hostname, pathname, protocol, search } = whatwgURL;
    if (search) {
        return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(dist_es/* EndpointURLScheme */.Ue).includes(scheme)) {
        return null;
    }
    const isIp = isIpAddress(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||
        (typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp,
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/stringEquals.js
const stringEquals = (value1, value2) => value1 === value2;

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/substring.js
const substring = (input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
        return null;
    }
    if (!reverse) {
        return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/uriEncode.js
const uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);

;// ./node_modules/@smithy/util-endpoints/dist-es/lib/index.js










;// ./node_modules/@smithy/util-endpoints/dist-es/utils/endpointFunctions.js

const endpointFunctions = {
    booleanEquals: booleanEquals,
    getAttr: getAttr,
    isSet: isSet,
    isValidHostLabel: isValidHostLabel,
    not: not,
    parseURL: parseURL,
    stringEquals: stringEquals,
    substring: substring,
    uriEncode: uriEncode,
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTemplate.js

const evaluateTemplate = (template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(currentIndex));
            break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex));
            break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
            currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
            const [refName, attrName] = parameterName.split("#");
            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
        }
        else {
            evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getReferenceValue.js
const getReferenceValue = ({ ref }, options) => {
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord,
    };
    return referenceRecord[ref];
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateExpression.js




const evaluateExpression = (obj, keyName, options) => {
    if (typeof obj === "string") {
        return evaluateTemplate(obj, options);
    }
    else if (obj["fn"]) {
        return callFunction(obj, options);
    }
    else if (obj["ref"]) {
        return getReferenceValue(obj, options);
    }
    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/callFunction.js



const callFunction = ({ fn, argv }, options) => {
    const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
    const fnSegments = fn.split(".");
    if (fnSegments[0] in customEndpointFunctions && fnSegments[1] != null) {
        return customEndpointFunctions[fnSegments[0]][fnSegments[1]](...evaluatedArgs);
    }
    return endpointFunctions[fn](...evaluatedArgs);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateCondition.js



const evaluateCondition = ({ assign, ...fnArgs }, options) => {
    if (assign && assign in options.referenceRecord) {
        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
    }
    const value = callFunction(fnArgs, options);
    options.logger?.debug?.(`${debugId} evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...(assign != null && { toAssign: { name: assign, value } }),
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateConditions.js


const evaluateConditions = (conditions = [], options) => {
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
        const { result, toAssign } = evaluateCondition(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord,
            },
        });
        if (!result) {
            return { result };
        }
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.(`${debugId} assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
        }
    }
    return { result: true, referenceRecord: conditionsReferenceRecord };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointHeaders.js


const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
            throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
    }),
}), {});

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperty.js



const getEndpointProperty = (property, options) => {
    if (Array.isArray(property)) {
        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
        case "string":
            return evaluateTemplate(property, options);
        case "object":
            if (property === null) {
                throw new EndpointError(`Unexpected endpoint property: ${property}`);
            }
            return getEndpointProperties(property, options);
        case "boolean":
            return property;
        default:
            throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointProperties.js

const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: getEndpointProperty(propertyVal, options),
}), {});

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/getEndpointUrl.js


const getEndpointUrl = (endpointUrl, options) => {
    const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
        try {
            return new URL(expression);
        }
        catch (error) {
            console.error(`Failed to construct URL with ${expression}`, error);
            throw error;
        }
    }
    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateEndpointRule.js





const evaluateEndpointRule = (endpointRule, options) => {
    const { conditions, endpoint } = endpointRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    };
    const { url, properties, headers } = endpoint;
    options.logger?.debug?.(`${debugId} Resolving endpoint from template: ${toDebugString(endpoint)}`);
    return {
        ...(headers != undefined && {
            headers: getEndpointHeaders(headers, endpointRuleOptions),
        }),
        ...(properties != undefined && {
            properties: getEndpointProperties(properties, endpointRuleOptions),
        }),
        url: getEndpointUrl(url, endpointRuleOptions),
    };
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateErrorRule.js



const evaluateErrorRule = (errorRule, options) => {
    const { conditions, error } = errorRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    throw new EndpointError(evaluateExpression(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    }));
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateTreeRule.js


const evaluateTreeRule = (treeRule, options) => {
    const { conditions, rules } = treeRule;
    const { result, referenceRecord } = evaluateConditions(conditions, options);
    if (!result) {
        return;
    }
    return evaluateRules(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord },
    });
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/evaluateRules.js




const evaluateRules = (rules, options) => {
    for (const rule of rules) {
        if (rule.type === "endpoint") {
            const endpointOrUndefined = evaluateEndpointRule(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else if (rule.type === "error") {
            evaluateErrorRule(rule, options);
        }
        else if (rule.type === "tree") {
            const endpointOrUndefined = evaluateTreeRule(rule, options);
            if (endpointOrUndefined) {
                return endpointOrUndefined;
            }
        }
        else {
            throw new EndpointError(`Unknown endpoint rule: ${rule}`);
        }
    }
    throw new EndpointError(`Rules evaluation failed`);
};

;// ./node_modules/@smithy/util-endpoints/dist-es/utils/index.js



;// ./node_modules/@smithy/util-endpoints/dist-es/resolveEndpoint.js



const resolveEndpoint = (ruleSetObject, options) => {
    const { endpointParams, logger } = options;
    const { parameters, rules } = ruleSetObject;
    options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters)
        .filter(([, v]) => v.default != null)
        .map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
        }
    }
    const requiredParams = Object.entries(parameters)
        .filter(([, v]) => v.required)
        .map(([k]) => k);
    for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
            throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
    }
    const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });
    options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
    return endpoint;
};

;// ./node_modules/@smithy/util-endpoints/dist-es/index.js








/***/ }),

/***/ 8004:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fromHex),
/* harmony export */   n: () => (/* binding */ toHex)
/* harmony export */ });
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for (let i = 0; i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
            out[i / 2] = HEX_TO_SHORT[encodedByte];
        }
        else {
            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
}


/***/ }),

/***/ 7135:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  u: () => (/* reexport */ getSmithyContext),
  t: () => (/* reexport */ normalizeProvider)
});

// EXTERNAL MODULE: ./node_modules/@smithy/types/dist-es/index.js + 11 modules
var dist_es = __webpack_require__(7523);
;// ./node_modules/@smithy/util-middleware/dist-es/getSmithyContext.js

const getSmithyContext = (context) => context[dist_es/* SMITHY_CONTEXT_KEY */.Vf] || (context[dist_es/* SMITHY_CONTEXT_KEY */.Vf] = {});

;// ./node_modules/@smithy/util-middleware/dist-es/normalizeProvider.js
const normalizeProvider = (input) => {
    if (typeof input === "function")
        return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
};

;// ./node_modules/@smithy/util-middleware/dist-es/index.js




/***/ }),

/***/ 3323:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Y: () => (/* reexport */ AdaptiveRetryStrategy),
  Gz: () => (/* reexport */ DEFAULT_MAX_ATTEMPTS),
  bp: () => (/* reexport */ DEFAULT_RETRY_DELAY_BASE),
  L0: () => (/* reexport */ DEFAULT_RETRY_MODE),
  QJ: () => (/* reexport */ DefaultRateLimiter),
  Df: () => (/* reexport */ INITIAL_RETRY_TOKENS),
  l5: () => (/* reexport */ INVOCATION_ID_HEADER),
  G8: () => (/* reexport */ MAXIMUM_RETRY_DELAY),
  XP: () => (/* reexport */ NO_RETRY_INCREMENT),
  ok: () => (/* reexport */ REQUEST_HEADER),
  XS: () => (/* reexport */ RETRY_COST),
  cm: () => (/* reexport */ RETRY_MODES),
  ru: () => (/* reexport */ StandardRetryStrategy),
  jh: () => (/* reexport */ THROTTLING_RETRY_DELAY_BASE),
  Rn: () => (/* reexport */ TIMEOUT_RETRY_COST)
});

// UNUSED EXPORTS: ConfiguredRetryStrategy

;// ./node_modules/@smithy/util-retry/dist-es/config.js
var RETRY_MODES;
(function (RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

// EXTERNAL MODULE: ./node_modules/@smithy/service-error-classification/dist-es/index.js + 1 modules
var dist_es = __webpack_require__(4542);
;// ./node_modules/@smithy/util-retry/dist-es/DefaultRateLimiter.js

class DefaultRateLimiter {
    constructor(options) {
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) {
            return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;
            await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0,dist_es/* isThrottlingError */.Qb)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        }
        else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/constants.js
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20 * 1000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";

;// ./node_modules/@smithy/util-retry/dist-es/defaultRetryBackoffStrategy.js

const getDefaultRetryBackoffStrategy = () => {
    let delayBase = DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = (delay) => {
        delayBase = delay;
    };
    return {
        computeNextBackoffDelay,
        setDelayBase,
    };
};

;// ./node_modules/@smithy/util-retry/dist-es/defaultRetryToken.js

const createDefaultRetryToken = ({ retryDelay, retryCount, retryCost, }) => {
    const getRetryCount = () => retryCount;
    const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
    const getRetryCost = () => retryCost;
    return {
        getRetryCount,
        getRetryDelay,
        getRetryCost,
    };
};

;// ./node_modules/@smithy/util-retry/dist-es/StandardRetryStrategy.js




class StandardRetryStrategy {
    constructor(maxAttempts) {
        this.maxAttempts = maxAttempts;
        this.mode = RETRY_MODES.STANDARD;
        this.capacity = INITIAL_RETRY_TOKENS;
        this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
        this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
        return createDefaultRetryToken({
            retryDelay: DEFAULT_RETRY_DELAY_BASE,
            retryCount: 0,
        });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(token, errorInfo, maxAttempts)) {
            const errorType = errorInfo.errorType;
            this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
            const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
            const retryDelay = errorInfo.retryAfterHint
                ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType)
                : delayFromErrorType;
            const capacityCost = this.getCapacityCost(errorType);
            this.capacity -= capacityCost;
            return createDefaultRetryToken({
                retryDelay,
                retryCount: token.getRetryCount() + 1,
                retryCost: capacityCost,
            });
        }
        throw new Error("No retry token available");
    }
    recordSuccess(token) {
        this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
    }
    getCapacity() {
        return this.capacity;
    }
    async getMaxAttempts() {
        try {
            return await this.maxAttemptsProvider();
        }
        catch (error) {
            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
            return DEFAULT_MAX_ATTEMPTS;
        }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount() + 1;
        return (attempts < maxAttempts &&
            this.capacity >= this.getCapacityCost(errorInfo.errorType) &&
            this.isRetryableError(errorInfo.errorType));
    }
    getCapacityCost(errorType) {
        return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
    }
    isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/AdaptiveRetryStrategy.js



class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options ?? {};
        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/ConfiguredRetryStrategy.js


class ConfiguredRetryStrategy extends StandardRetryStrategy {
    constructor(maxAttempts, computeNextBackoffDelay = DEFAULT_RETRY_DELAY_BASE) {
        super(typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts);
        if (typeof computeNextBackoffDelay === "number") {
            this.computeNextBackoffDelay = () => computeNextBackoffDelay;
        }
        else {
            this.computeNextBackoffDelay = computeNextBackoffDelay;
        }
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const token = await super.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
        token.getRetryDelay = () => this.computeNextBackoffDelay(token.getRetryCount());
        return token;
    }
}

;// ./node_modules/@smithy/util-retry/dist-es/index.js









/***/ }),

/***/ 2531:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ escapeUri)
/* harmony export */ });
const escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;


/***/ }),

/***/ 2637:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ fromUtf8)
/* harmony export */ });
const fromUtf8 = (input) => new TextEncoder().encode(input);


/***/ }),

/***/ 5792:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ toUtf8)
/* harmony export */ });
const toUtf8 = (input) => {
    if (typeof input === "string") {
        return input;
    }
    if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
        throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
    }
    return new TextDecoder("utf-8").decode(input);
};


/***/ }),

/***/ 6880:
/***/ (function(module) {

!function(e,t){ true?module.exports=t():0}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default},18:function(e,t,r){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default},91:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];"string"==typeof a?(i[t]=a,s+=1):"object"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})}));

/***/ }),

/***/ 6606:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
const index_1 = __webpack_require__(8156);
(() => {
    const connect = __webpack_require__.g.connect || {};
    const qconnectjs = connect.qconnectjs || {};
    connect.qconnectjs = qconnectjs;
    __webpack_require__.g.connect = connect;
    qconnectjs.Client = index_1.Client;
    qconnectjs.QConnectClient = index_1.QConnectClient;
    qconnectjs.FetchHttpHandler = index_1.FetchHttpHandler;
    qconnectjs.SDKHandler = index_1.SDKHandler;
    qconnectjs.commands = {
        DescribeContact: index_1.DescribeContact,
        DescribeContactFlow: index_1.DescribeContactFlow,
        GetAuthorizedWidgetsForUser: index_1.GetAuthorizedWidgetsForUser,
        GetContact: index_1.GetContact,
        GetContent: index_1.GetContent,
        GetRecommendations: index_1.GetRecommendations,
        ListContentAssociations: index_1.ListContentAssociations,
        ListIntegrationAssociations: index_1.ListIntegrationAssociations,
        NotifyRecommendationsReceived: index_1.NotifyRecommendationsReceived,
        PutFeedback: index_1.PutFeedback,
        QueryAssistant: index_1.QueryAssistant,
        SearchSessions: index_1.SearchSessions,
    };
})();


/***/ }),

/***/ 3985:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Client = void 0;
const runtimeConfig_browser_1 = __webpack_require__(6662);
const serviceIds_1 = __webpack_require__(571);
class Client {
    constructor(config) {
        const _config = (0, runtimeConfig_browser_1.getRuntimeConfig)(config);
        this.config = _config;
        if (document.readyState === 'complete') {
            this.initFrameConduit();
        }
        else {
            document.addEventListener('readystatechange', () => {
                if (document.readyState === 'complete') {
                    this.initFrameConduit();
                }
            });
        }
        this.config.requestHandler.setRuntimeConfig(this.config);
    }
    initFrameConduit() {
        var _a, _b;
        if (this.config.frameWindow || this.config.instanceUrl.includes((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.origin))
            return;
        const iframe = document.querySelector('iframe[src*="wisdom-v2"]');
        if (iframe && iframe.contentWindow) {
            this.config.frameWindow = iframe;
        }
        else {
            try {
                (_b = window === null || window === void 0 ? void 0 : window.connect) === null || _b === void 0 ? void 0 : _b.core.onInitialized(() => {
                    var _a;
                    let container = document.querySelector('q-connect-container');
                    if (!container) {
                        container = document.createElement('div');
                        container.id = 'q-connect-container';
                        document.body.appendChild(container);
                    }
                    (_a = window === null || window === void 0 ? void 0 : window.connect) === null || _a === void 0 ? void 0 : _a.agentApp.initApp(serviceIds_1.ServiceIds.AmazonQConnect, 'q-connect-container', `${this.config.instanceUrl}/wisdom-v2/?theme=hidden_page`, {
                        style: 'display: none',
                    });
                    this.config.frameWindow = document.getElementById(serviceIds_1.ServiceIds.AmazonQConnect);
                });
            }
            catch (e) {
                console.error('There was an error initializing Amazon Q Connect');
            }
        }
    }
    async call(command, options) {
        const handler = command.resolveRequestHandler(this.config, options);
        return handler().then((response) => response);
    }
}
exports.Client = Client;


/***/ }),

/***/ 7518:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Command = void 0;
const httpRequest_1 = __webpack_require__(7857);
const urlParser_1 = __webpack_require__(8960);
const buildAmzTarget_1 = __webpack_require__(4373);
const buildAmzVendor_1 = __webpack_require__(7758);
class Command {
    serializeRequest(configuration) {
        return new httpRequest_1.HttpRequest({
            ...(0, urlParser_1.parseUrl)(configuration.endpoint),
            headers: {
                ...configuration.headers,
                ...(0, buildAmzTarget_1.buildAmzTarget)(this.clientMethod, configuration),
                ...(0, buildAmzVendor_1.buildAmzVendor)(this.vendorCode),
            },
            body: JSON.stringify(this.clientInput),
            frameWindow: configuration.frameWindow,
        });
    }
}
exports.Command = Command;


/***/ }),

/***/ 4288:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DescribeContact = void 0;
const client_connect_1 = __webpack_require__(6924);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
const serviceIds_1 = __webpack_require__(571);
class DescribeContact extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Connect;
        this.clientMethod = clientMethods_1.ClientMethods.DescribeContact;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { InstanceId, ContactId } = this.clientInput;
        if ((InstanceId === undefined) || !InstanceId.length) {
            throw new Error('Invalid InstanceId.');
        }
        if ((ContactId === undefined) || !ContactId.length) {
            throw new Error('Invalid ContactId.');
        }
        return super.serializeRequest({
            ...configuration,
            serviceId: serviceIds_1.ServiceIds.Acs,
        });
    }
    serializeCommand(configuration) {
        const command = new client_connect_1.DescribeContactCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.DescribeContact = DescribeContact;


/***/ }),

/***/ 1104:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DescribeContactFlow = void 0;
const client_connect_1 = __webpack_require__(6924);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
const serviceIds_1 = __webpack_require__(571);
class DescribeContactFlow extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Connect;
        this.clientMethod = clientMethods_1.ClientMethods.DescribeContactFlow;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { InstanceId, ContactFlowId } = this.clientInput;
        if ((InstanceId === undefined) || !InstanceId.length) {
            throw new Error('Invalid InstanceId.');
        }
        if ((ContactFlowId === undefined) || !ContactFlowId.length) {
            throw new Error('Invalid ContactFlowId.');
        }
        return super.serializeRequest({
            ...configuration,
            serviceId: serviceIds_1.ServiceIds.Acs,
        });
    }
    serializeCommand(configuration) {
        const command = new client_connect_1.DescribeContactFlowCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.DescribeContactFlow = DescribeContactFlow;


/***/ }),

/***/ 3461:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetAuthorizedWidgetsForUser = void 0;
const command_1 = __webpack_require__(7518);
const fetchHttpHandler_1 = __webpack_require__(6086);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
const serviceIds_1 = __webpack_require__(571);
class GetAuthorizedWidgetsForUser extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Connect;
        this.clientMethod = clientMethods_1.ClientMethods.GetAuthorizedWidgetsForUser;
    }
    resolveRequestHandler(configuration, options) {
        let { requestHandler } = configuration;
        requestHandler = new fetchHttpHandler_1.FetchHttpHandler();
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        return super.serializeRequest({
            ...configuration,
            serviceId: serviceIds_1.ServiceIds.AgentApp,
        });
    }
    serializeCommand(_configuration) {
        return null;
    }
}
exports.GetAuthorizedWidgetsForUser = GetAuthorizedWidgetsForUser;


/***/ }),

/***/ 7123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetContact = void 0;
const command_1 = __webpack_require__(7518);
const fetchHttpHandler_1 = __webpack_require__(6086);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
const serviceIds_1 = __webpack_require__(571);
class GetContact extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Connect;
        this.clientMethod = clientMethods_1.ClientMethods.GetContact;
    }
    resolveRequestHandler(configuration, options) {
        let { requestHandler } = configuration;
        requestHandler = new fetchHttpHandler_1.FetchHttpHandler();
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { awsAccountId, instanceId, contactId } = this.clientInput;
        if ((awsAccountId === undefined) || !awsAccountId.length) {
            throw new Error('Invalid awsAccountId.');
        }
        if ((instanceId === undefined) || !instanceId.length) {
            throw new Error('Invalid instanceId.');
        }
        if ((contactId === undefined) || !contactId.length) {
            throw new Error('Invalid contactId.');
        }
        return super.serializeRequest({
            ...configuration,
            serviceId: serviceIds_1.ServiceIds.Lcms,
        });
    }
    serializeCommand(_configuration) {
        return null;
    }
}
exports.GetContact = GetContact;


/***/ }),

/***/ 2866:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetContent = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class GetContent extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.GetContent;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { contentId, knowledgeBaseId } = this.clientInput;
        if ((contentId === undefined) || !contentId.length) {
            throw new Error('Invalid contentId.');
        }
        if ((knowledgeBaseId === undefined) || !knowledgeBaseId.length) {
            throw new Error('Invalid knowledgeBaseId.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.GetContentCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.GetContent = GetContent;


/***/ }),

/***/ 1051:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.GetRecommendations = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const fetchHttpHandler_1 = __webpack_require__(6086);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class GetRecommendations extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.GetRecommendations;
    }
    resolveRequestHandler(configuration, options) {
        let { requestHandler } = configuration;
        if (this.clientInput.waitTimeSeconds && this.clientInput.waitTimeSeconds > 5) {
            requestHandler = new fetchHttpHandler_1.FetchHttpHandler();
        }
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { assistantId, sessionId } = this.clientInput;
        if ((assistantId === undefined) || !assistantId.length) {
            throw new Error('Invalid assistantId.');
        }
        if ((sessionId === undefined) || !sessionId.length) {
            throw new Error('Invalid sessionId.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.GetRecommendationsCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.GetRecommendations = GetRecommendations;


/***/ }),

/***/ 5059:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1635);
tslib_1.__exportStar(__webpack_require__(4288), exports);
tslib_1.__exportStar(__webpack_require__(1104), exports);
tslib_1.__exportStar(__webpack_require__(3461), exports);
tslib_1.__exportStar(__webpack_require__(2866), exports);
tslib_1.__exportStar(__webpack_require__(1051), exports);
tslib_1.__exportStar(__webpack_require__(5086), exports);
tslib_1.__exportStar(__webpack_require__(9545), exports);
tslib_1.__exportStar(__webpack_require__(2251), exports);
tslib_1.__exportStar(__webpack_require__(2079), exports);
tslib_1.__exportStar(__webpack_require__(5170), exports);
tslib_1.__exportStar(__webpack_require__(7123), exports);
tslib_1.__exportStar(__webpack_require__(8729), exports);


/***/ }),

/***/ 5086:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListContentAssociations = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class ListContentAssociations extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.ListContentAssociations;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { contentId, knowledgeBaseId } = this.clientInput;
        if ((contentId === undefined) || !contentId.length) {
            throw new Error('Invalid contentId.');
        }
        if ((knowledgeBaseId === undefined) || !knowledgeBaseId.length) {
            throw new Error('Invalid knowledgeBaseId.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.ListContentAssociationsCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.ListContentAssociations = ListContentAssociations;


/***/ }),

/***/ 9545:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ListIntegrationAssociations = void 0;
const client_connect_1 = __webpack_require__(6924);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
const serviceIds_1 = __webpack_require__(571);
class ListIntegrationAssociations extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Connect;
        this.clientMethod = clientMethods_1.ClientMethods.ListIntegrationAssociations;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { InstanceId } = this.clientInput;
        if ((InstanceId === undefined) || !InstanceId.length) {
            throw new Error('Invalid InstanceId.');
        }
        return super.serializeRequest({
            ...configuration,
            serviceId: serviceIds_1.ServiceIds.Acs,
        });
    }
    serializeCommand(configuration) {
        const command = new client_connect_1.ListIntegrationAssociationsCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.ListIntegrationAssociations = ListIntegrationAssociations;


/***/ }),

/***/ 2251:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotifyRecommendationsReceived = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class NotifyRecommendationsReceived extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.NotifyRecommendationsReceived;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { assistantId, sessionId, recommendationIds } = this.clientInput;
        if ((assistantId === undefined) || !assistantId.length) {
            throw new Error('Invalid assistantId.');
        }
        if ((sessionId === undefined) || !sessionId.length) {
            throw new Error('Invalid sessionId.');
        }
        if ((recommendationIds === undefined) || !recommendationIds.length) {
            throw new Error('Invalid recommendationIds.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.NotifyRecommendationsReceivedCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.NotifyRecommendationsReceived = NotifyRecommendationsReceived;


/***/ }),

/***/ 8729:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PutFeedback = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class PutFeedback extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.PutFeedback;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        const { assistantId, targetId, targetType, contentFeedback } = this.clientInput;
        if ((assistantId === undefined) || !assistantId.length) {
            throw new Error('Invalid assistantId.');
        }
        if ((targetId === undefined) || !targetId.length) {
            throw new Error('Invalid targetId.');
        }
        if (targetType === undefined) {
            throw new Error('Invalid targetType.');
        }
        if (contentFeedback === undefined) {
            throw new Error('Invalid contentFeedback.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.PutFeedbackCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.PutFeedback = PutFeedback;


/***/ }),

/***/ 2079:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QueryAssistant = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class QueryAssistant extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.QueryAssistant;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {}
        });
    }
    serializeRequest(configuration) {
        const { assistantId } = this.clientInput;
        if ((assistantId === undefined) || !assistantId.length) {
            throw new Error('Invalid assistantId.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.QueryAssistantCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.QueryAssistant = QueryAssistant;


/***/ }),

/***/ 5170:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SearchSessions = void 0;
const client_qconnect_1 = __webpack_require__(252);
const command_1 = __webpack_require__(7518);
const buildClientMiddleware_1 = __webpack_require__(1421);
const vendorCodes_1 = __webpack_require__(1742);
const clientMethods_1 = __webpack_require__(2053);
class SearchSessions extends command_1.Command {
    constructor(clientInput) {
        super();
        this.clientInput = clientInput;
        this.vendorCode = vendorCodes_1.VendorCodes.Wisdom;
        this.clientMethod = clientMethods_1.ClientMethods.SearchSessions;
    }
    resolveRequestHandler(configuration, options) {
        const { requestHandler } = configuration;
        return () => requestHandler.handle({
            request: this.serializeRequest(configuration),
            command: this.serializeCommand(configuration),
            options: options || {},
        });
    }
    serializeRequest(configuration) {
        var _a;
        const { assistantId, searchExpression } = this.clientInput;
        if ((assistantId === undefined) || !assistantId.length) {
            throw new Error('Invalid assistantId.');
        }
        if ((searchExpression === undefined) || !(searchExpression === null || searchExpression === void 0 ? void 0 : searchExpression.filters) || !((_a = searchExpression === null || searchExpression === void 0 ? void 0 : searchExpression.filters) === null || _a === void 0 ? void 0 : _a.length)) {
            throw new Error('Invalid searchExpression.');
        }
        return super.serializeRequest(configuration);
    }
    serializeCommand(configuration) {
        const command = new client_qconnect_1.SearchSessionsCommand(this.clientInput);
        const [middleware, opt] = (0, buildClientMiddleware_1.buildClientRequestMiddleware)(configuration.headers);
        command.middlewareStack.add(middleware, opt);
        return command;
    }
}
exports.SearchSessions = SearchSessions;


/***/ }),

/***/ 6086:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FetchHttpHandler = void 0;
const communicationProxy_1 = __webpack_require__(1588);
const buildAmzTarget_1 = __webpack_require__(4373);
const command_1 = __webpack_require__(4959);
class FetchHttpHandler {
    constructor(config) {
        this.config = config !== null && config !== void 0 ? config : {};
        (0, communicationProxy_1.subscribeToChannel)(this.channelRequestHandler.bind(this));
    }
    setRuntimeConfig(config) {
        this.runtimeConfig = config;
    }
    async responseHandler(response) {
        const { status, statusText, ok, headers, body } = response;
        const fetchHeaders = headers;
        const transformedHeaders = {};
        if (fetchHeaders.entries) {
            for (const pair of fetchHeaders.entries()) {
                transformedHeaders[pair[0]] = pair[1];
            }
        }
        const hasReadableStream = body !== undefined;
        if (!hasReadableStream) {
            return response.blob()
                .then(() => {
                return {
                    status,
                    statusText,
                    ok,
                    headers: transformedHeaders,
                    body: response.json(),
                };
            });
        }
        const reader = body.getReader();
        let res = new Uint8Array(0);
        let isDone = false;
        while (!isDone) {
            const { done, value } = await reader.read();
            if (value) {
                const prior = res;
                res = new Uint8Array(prior.length + value.length);
                res.set(prior);
                res.set(value, prior.length);
            }
            isDone = done;
        }
        return {
            status,
            statusText,
            ok,
            headers: transformedHeaders,
            body: JSON.parse(new TextDecoder('utf8').decode(res)),
        };
    }
    async channelRequestHandler(_, options) {
        try {
            const { headers, body } = options;
            const amzTarget = headers === null || headers === void 0 ? void 0 : headers['x-amz-target'];
            const clientMethod = (0, buildAmzTarget_1.parseAmzTarget)(amzTarget);
            const Command = command_1.Commands[clientMethod];
            const clientCommand = new Command(JSON.parse(body));
            const config = this.runtimeConfig;
            return this.handle({
                request: clientCommand.serializeRequest(config),
            });
        }
        catch (e) {
            console.error(`Something went wrong during request: ${e === null || e === void 0 ? void 0 : e.message}`);
            return Promise.reject(e);
        }
    }
    async fetchRequestHandler(url, options) {
        try {
            const response = await fetch(url, options);
            return this.responseHandler(response);
        }
        catch (e) {
            console.error(`Something went wrong during request: ${e === null || e === void 0 ? void 0 : e.message}`);
            return Promise.reject(e);
        }
    }
    async fetchRequest(url, options, frameWindow) {
        try {
            if (frameWindow) {
                const response = await (0, communicationProxy_1.fetchWithChannel)(frameWindow.contentWindow, frameWindow.src, { url, options });
                return Promise.resolve(response);
            }
            else {
                return this.fetchRequestHandler(url, options);
            }
        }
        catch (e) {
            console.error(`Something went wrong during request: ${e === null || e === void 0 ? void 0 : e.message}`);
            return Promise.reject(e);
        }
    }
    requestTimeout(timeoutInMs) {
        return new Promise((_, reject) => {
            if (timeoutInMs) {
                setTimeout(() => {
                    const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms.`);
                    timeoutError.name = "TimeoutError";
                    reject(timeoutError);
                }, timeoutInMs);
            }
        });
    }
    abortRequest(abortSignal) {
        return new Promise((_, reject) => {
            if (abortSignal) {
                abortSignal.onabort = () => {
                    const abortError = new Error('Request aborted.');
                    abortError.name = 'AbortError';
                    reject(abortError);
                };
            }
        });
    }
    handle({ request, options, }) {
        const { abortSignal } = options || {};
        const { requestTimeout } = this.config || {};
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        const { protocol, hostname, port, path, method, headers, body, frameWindow } = request;
        const url = `${protocol}//${hostname}${port ? `:${port}` : ''}${path}`;
        const requestOptions = {
            method,
            headers,
            body,
            ...(!frameWindow && AbortController && abortSignal && { signal: abortSignal }),
        };
        return Promise.race([
            this.fetchRequest(url, requestOptions, frameWindow),
            this.requestTimeout(requestTimeout),
            this.abortRequest(abortSignal),
        ]);
    }
}
exports.FetchHttpHandler = FetchHttpHandler;


/***/ }),

/***/ 7857:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpRequest = void 0;
class HttpRequest {
    constructor(options) {
        this.method = options.method || 'POST';
        this.protocol = options.protocol
            ? options.protocol.charAt(options.protocol.length - 1) !== ':'
                ? `${options.protocol}:`
                : options.protocol
            : 'https:';
        this.hostname = options.hostname || 'localhost';
        this.port = options.port;
        this.path = options.path && options.path !== '/'
            ? options.path.charAt(0) !== '/'
                ? `/${options.path}`
                : options.path
            : '/agent-app/api';
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.frameWindow = options.frameWindow;
    }
}
exports.HttpRequest = HttpRequest;


/***/ }),

/***/ 8156:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const tslib_1 = __webpack_require__(1635);
tslib_1.__exportStar(__webpack_require__(3985), exports);
tslib_1.__exportStar(__webpack_require__(4174), exports);
tslib_1.__exportStar(__webpack_require__(5059), exports);
tslib_1.__exportStar(__webpack_require__(6086), exports);
tslib_1.__exportStar(__webpack_require__(5758), exports);
tslib_1.__exportStar(__webpack_require__(4734), exports);
tslib_1.__exportStar(__webpack_require__(5488), exports);


/***/ }),

/***/ 4174:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.QConnectClient = void 0;
const client_1 = __webpack_require__(3985);
const commands_1 = __webpack_require__(5059);
class QConnectClient extends client_1.Client {
    constructor(config) {
        super(config);
    }
    describeContact(args, options) {
        const command = new commands_1.DescribeContact(args);
        return this.call(command, options);
    }
    describeContactFlow(args, options) {
        const command = new commands_1.DescribeContactFlow(args);
        return this.call(command, options);
    }
    getAuthorizedWidgetsForUser(args, options) {
        const command = new commands_1.GetAuthorizedWidgetsForUser(args);
        return this.call(command, options);
    }
    getContact(args, options) {
        const command = new commands_1.GetContact(args);
        return this.call(command, options);
    }
    getContent(args, options) {
        const command = new commands_1.GetContent(args);
        return this.call(command, options);
    }
    getRecommendations(args, options) {
        const command = new commands_1.GetRecommendations(args);
        return this.call(command, options);
    }
    listContentAssociations(args, options) {
        const command = new commands_1.ListContentAssociations(args);
        return this.call(command, options);
    }
    listIntegrationAssociations(args, options) {
        const command = new commands_1.ListIntegrationAssociations(args);
        return this.call(command, options);
    }
    notifyRecommendationsReceived(args, options) {
        const command = new commands_1.NotifyRecommendationsReceived(args);
        return this.call(command, options);
    }
    putFeedback(args, options) {
        const command = new commands_1.PutFeedback(args);
        return this.call(command, options);
    }
    queryAssistant(args, options) {
        const command = new commands_1.QueryAssistant(args);
        return this.call(command, options);
    }
    searchSessions(args, options) {
        const command = new commands_1.SearchSessions(args);
        return this.call(command, options);
    }
}
exports.QConnectClient = QConnectClient;


/***/ }),

/***/ 5758:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SDKHandler = void 0;
const client_connect_1 = __webpack_require__(6924);
const client_qconnect_1 = __webpack_require__(252);
const communicationProxy_1 = __webpack_require__(1588);
const buildAmzTarget_1 = __webpack_require__(4373);
const buildClientMiddleware_1 = __webpack_require__(1421);
const getBaseCredentials_1 = __webpack_require__(1309);
const command_1 = __webpack_require__(4959);
const vendorCodes_1 = __webpack_require__(1742);
class SDKHandler {
    constructor(config) {
        this.config = config !== null && config !== void 0 ? config : {};
        (0, communicationProxy_1.subscribeToChannel)(this.channelRequestHandler.bind(this));
    }
    setRuntimeConfig(config) {
        this.runtimeConfig = config;
        this.initializeClients();
    }
    initializeClients() {
        var _a;
        const endpoint = `${(_a = this.runtimeConfig) === null || _a === void 0 ? void 0 : _a.endpoint}/api-proxy`;
        this.sdkClients = {
            [vendorCodes_1.VendorCodes.Connect]: new client_connect_1.ConnectClient({
                region: 'us-west-2',
                endpoint: `${endpoint}/${vendorCodes_1.VendorCodes.Connect}`,
                credentials: (0, getBaseCredentials_1.getBaseCredentials)(),
            }),
            [vendorCodes_1.VendorCodes.Wisdom]: new client_qconnect_1.QConnectClient({
                region: 'us-west-2',
                endpoint: `${endpoint}/${vendorCodes_1.VendorCodes.Wisdom}`,
                credentials: (0, getBaseCredentials_1.getBaseCredentials)(),
            }),
        };
    }
    async responseHandler(response) {
        const { statusCode, reason, headers, body } = response;
        return {
            status: statusCode,
            statusText: reason,
            ok: reason === 'OK',
            headers,
            body,
        };
    }
    async channelRequestHandler(_, options) {
        try {
            const { headers, body } = options;
            const amzTarget = headers === null || headers === void 0 ? void 0 : headers['x-amz-target'];
            const clientMethod = (0, buildAmzTarget_1.parseAmzTarget)(amzTarget);
            const Command = command_1.Commands[clientMethod];
            const clientCommand = new Command(JSON.parse(body));
            const config = this.runtimeConfig;
            return this.handle({
                request: clientCommand.serializeRequest(config),
                command: clientCommand.serializeCommand(config),
            });
        }
        catch (e) {
            console.error(`Something went wrong during request: ${e === null || e === void 0 ? void 0 : e.message}`);
            return Promise.reject(e);
        }
    }
    async sdkRequestHandler(command, options) {
        var _a;
        try {
            const { headers } = options;
            const amzVendor = headers === null || headers === void 0 ? void 0 : headers['x-amz-vendor'];
            const client = (_a = this.sdkClients) === null || _a === void 0 ? void 0 : _a[amzVendor];
            let httpResponse;
            const [middleware, ops] = (0, buildClientMiddleware_1.buildClientResponseMiddleware)((response) => {
                httpResponse = response;
            });
            command === null || command === void 0 ? void 0 : command.middlewareStack.add(middleware, ops);
            const deserializedResponse = await (client === null || client === void 0 ? void 0 : client.send(command, options));
            return this.responseHandler({
                ...httpResponse,
                body: deserializedResponse,
            });
        }
        catch (e) {
            console.error(`Something went wrong during request handling: ${e === null || e === void 0 ? void 0 : e.message}`);
            return Promise.reject(e);
        }
    }
    async sdkRequest({ command, options, }) {
        var _a;
        try {
            if ((_a = this.runtimeConfig) === null || _a === void 0 ? void 0 : _a.frameWindow) {
                const response = await (0, communicationProxy_1.fetchWithChannel)(this.runtimeConfig.frameWindow.contentWindow, this.runtimeConfig.frameWindow.src, {
                    url: this.runtimeConfig.endpoint,
                    options,
                });
                return Promise.resolve(response);
            }
            else {
                return this.sdkRequestHandler(command, options);
            }
        }
        catch (e) {
            console.error(`Something went wrong during SDK request: ${e === null || e === void 0 ? void 0 : e.message}, ${e === null || e === void 0 ? void 0 : e.$response}`);
            return Promise.reject(e);
        }
    }
    requestTimeout(timeoutInMs) {
        return new Promise((_, reject) => {
            if (timeoutInMs) {
                setTimeout(() => {
                    const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms.`);
                    timeoutError.name = "TimeoutError";
                    reject(timeoutError);
                }, timeoutInMs);
            }
        });
    }
    abortRequest(abortSignal) {
        return new Promise((_, reject) => {
            if (abortSignal) {
                abortSignal.onabort = () => {
                    const abortError = new Error('Request aborted.');
                    abortError.name = 'AbortError';
                    reject(abortError);
                };
            }
        });
    }
    handle({ request, command, options, }) {
        const { abortSignal } = options || {};
        const { requestTimeout } = this.config || {};
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        const { method, headers, body, frameWindow } = request;
        const requestOptions = {
            method,
            headers,
            body,
            ...(!frameWindow && AbortController && abortSignal && { signal: abortSignal }),
        };
        return Promise.race([
            this.sdkRequest({ command, options: requestOptions }),
            this.requestTimeout(requestTimeout),
            this.abortRequest(abortSignal),
        ]);
    }
}
exports.SDKHandler = SDKHandler;


/***/ }),

/***/ 8201:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AppNames = void 0;
var AppNames;
(function (AppNames) {
    AppNames["QConnectJS"] = "wisdom-js";
    AppNames["WisdomUI"] = "wisdom-ui";
})(AppNames = exports.AppNames || (exports.AppNames = {}));


/***/ }),

/***/ 5488:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallSources = void 0;
var CallSources;
(function (CallSources) {
    CallSources["AgentApp"] = "agent-app";
    CallSources["PublicApiProxy"] = "public-api-proxy";
})(CallSources = exports.CallSources || (exports.CallSources = {}));


/***/ }),

/***/ 2053:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LcmsMethods = exports.AcsMethods = exports.AgentAppMethods = exports.QConnectMethods = exports.ClientMethods = void 0;
var ClientMethods;
(function (ClientMethods) {
    ClientMethods["DescribeContact"] = "describeContact";
    ClientMethods["DescribeContactFlow"] = "describeContactFlow";
    ClientMethods["GetAuthorizedWidgetsForUser"] = "getAuthorizedWidgetsForUser";
    ClientMethods["GetContent"] = "getContent";
    ClientMethods["GetRecommendations"] = "getRecommendations";
    ClientMethods["ListContentAssociations"] = "listContentAssociations";
    ClientMethods["ListIntegrationAssociations"] = "listIntegrationAssociations";
    ClientMethods["NotifyRecommendationsReceived"] = "notifyRecommendationsReceived";
    ClientMethods["QueryAssistant"] = "queryAssistant";
    ClientMethods["SearchSessions"] = "searchSessions";
    ClientMethods["GetContact"] = "getContact";
    ClientMethods["PutFeedback"] = "putFeedback";
})(ClientMethods = exports.ClientMethods || (exports.ClientMethods = {}));
var QConnectMethods;
(function (QConnectMethods) {
    QConnectMethods["GetContent"] = "getContent";
    QConnectMethods["GetRecommendations"] = "getRecommendations";
    QConnectMethods["ListContentAssociations"] = "listContentAssociations";
    QConnectMethods["NotifyRecommendationsReceived"] = "notifyRecommendationsReceived";
    QConnectMethods["QueryAssistant"] = "queryAssistant";
    QConnectMethods["SearchSessions"] = "searchSessions";
    QConnectMethods["PutFeedback"] = "putFeedback";
})(QConnectMethods = exports.QConnectMethods || (exports.QConnectMethods = {}));
var AgentAppMethods;
(function (AgentAppMethods) {
    AgentAppMethods["GetAuthorizedWidgetsForUser"] = "getAuthorizedWidgetsForUser";
})(AgentAppMethods = exports.AgentAppMethods || (exports.AgentAppMethods = {}));
var AcsMethods;
(function (AcsMethods) {
    AcsMethods["DescribeContact"] = "describeContact";
    AcsMethods["DescribeContactFlow"] = "describeContactFlow";
    AcsMethods["ListIntegrationAssociations"] = "listIntegrationAssociations";
})(AcsMethods = exports.AcsMethods || (exports.AcsMethods = {}));
var LcmsMethods;
(function (LcmsMethods) {
    LcmsMethods["GetContact"] = "getContact";
})(LcmsMethods = exports.LcmsMethods || (exports.LcmsMethods = {}));


/***/ }),

/***/ 4959:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Commands = void 0;
const commands_1 = __webpack_require__(5059);
exports.Commands = {
    describeContact: commands_1.DescribeContact,
    describeContactFlow: commands_1.DescribeContactFlow,
    getAuthorizedWidgetsForUser: commands_1.GetAuthorizedWidgetsForUser,
    getContent: commands_1.GetContent,
    getRecommendations: commands_1.GetRecommendations,
    listContentAssociations: commands_1.ListContentAssociations,
    listIntegrationAssociations: commands_1.ListIntegrationAssociations,
    notifyRecommendationsReceived: commands_1.NotifyRecommendationsReceived,
    queryAssistant: commands_1.QueryAssistant,
    searchSessions: commands_1.SearchSessions,
    getContact: commands_1.GetContact,
    putFeedback: commands_1.PutFeedback,
};


/***/ }),

/***/ 4734:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TargetType = exports.SourceContentType = exports.RelevanceLevel = exports.Relevance = exports.RecommendationType = exports.RecommendationTriggerType = exports.RecommendationTriggerData = exports.RecommendationSourceType = exports.QueryResultType = exports.QueryConditionFieldName = exports.QueryConditionComparisonOperator = exports.QueryCondition = exports.FilterOperator = exports.FilterField = exports.DataReference = exports.DataDetails = exports.ContentStatus = exports.ContentFeedbackData = exports.SourceType = exports.IntegrationType = void 0;
var client_connect_1 = __webpack_require__(6924);
Object.defineProperty(exports, "IntegrationType", ({ enumerable: true, get: function () { return client_connect_1.IntegrationType; } }));
Object.defineProperty(exports, "SourceType", ({ enumerable: true, get: function () { return client_connect_1.SourceType; } }));
var client_qconnect_1 = __webpack_require__(252);
Object.defineProperty(exports, "ContentFeedbackData", ({ enumerable: true, get: function () { return client_qconnect_1.ContentFeedbackData; } }));
Object.defineProperty(exports, "ContentStatus", ({ enumerable: true, get: function () { return client_qconnect_1.ContentStatus; } }));
Object.defineProperty(exports, "DataDetails", ({ enumerable: true, get: function () { return client_qconnect_1.DataDetails; } }));
Object.defineProperty(exports, "DataReference", ({ enumerable: true, get: function () { return client_qconnect_1.DataReference; } }));
Object.defineProperty(exports, "FilterField", ({ enumerable: true, get: function () { return client_qconnect_1.FilterField; } }));
Object.defineProperty(exports, "FilterOperator", ({ enumerable: true, get: function () { return client_qconnect_1.FilterOperator; } }));
Object.defineProperty(exports, "QueryCondition", ({ enumerable: true, get: function () { return client_qconnect_1.QueryCondition; } }));
Object.defineProperty(exports, "QueryConditionComparisonOperator", ({ enumerable: true, get: function () { return client_qconnect_1.QueryConditionComparisonOperator; } }));
Object.defineProperty(exports, "QueryConditionFieldName", ({ enumerable: true, get: function () { return client_qconnect_1.QueryConditionFieldName; } }));
Object.defineProperty(exports, "QueryResultType", ({ enumerable: true, get: function () { return client_qconnect_1.QueryResultType; } }));
Object.defineProperty(exports, "RecommendationSourceType", ({ enumerable: true, get: function () { return client_qconnect_1.RecommendationSourceType; } }));
Object.defineProperty(exports, "RecommendationTriggerData", ({ enumerable: true, get: function () { return client_qconnect_1.RecommendationTriggerData; } }));
Object.defineProperty(exports, "RecommendationTriggerType", ({ enumerable: true, get: function () { return client_qconnect_1.RecommendationTriggerType; } }));
Object.defineProperty(exports, "RecommendationType", ({ enumerable: true, get: function () { return client_qconnect_1.RecommendationType; } }));
Object.defineProperty(exports, "Relevance", ({ enumerable: true, get: function () { return client_qconnect_1.Relevance; } }));
Object.defineProperty(exports, "RelevanceLevel", ({ enumerable: true, get: function () { return client_qconnect_1.RelevanceLevel; } }));
Object.defineProperty(exports, "SourceContentType", ({ enumerable: true, get: function () { return client_qconnect_1.SourceContentType; } }));
Object.defineProperty(exports, "TargetType", ({ enumerable: true, get: function () { return client_qconnect_1.TargetType; } }));


/***/ }),

/***/ 571:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ServiceIds = void 0;
var ServiceIds;
(function (ServiceIds) {
    ServiceIds["AmazonQConnect"] = "AmazonQConnect";
    ServiceIds["Wisdom"] = "Wisdom";
    ServiceIds["AgentApp"] = "AgentApp";
    ServiceIds["Acs"] = "Acs";
    ServiceIds["Lcms"] = "Lcms";
})(ServiceIds = exports.ServiceIds || (exports.ServiceIds = {}));


/***/ }),

/***/ 1742:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VendorCodes = void 0;
var VendorCodes;
(function (VendorCodes) {
    VendorCodes["Wisdom"] = "wisdom";
    VendorCodes["Connect"] = "connect";
})(VendorCodes = exports.VendorCodes || (exports.VendorCodes = {}));


/***/ }),

/***/ 5040:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WidgetServices = void 0;
var WidgetServices;
(function (WidgetServices) {
    WidgetServices["AmazonQConnect"] = "WisdomV2";
    WidgetServices["Wisdom"] = "WisdomV2";
    WidgetServices["AgentApp"] = "AgentApp";
    WidgetServices["Acs"] = "Acs";
    WidgetServices["Lcms"] = "Lcms";
})(WidgetServices = exports.WidgetServices || (exports.WidgetServices = {}));


/***/ }),

/***/ 3091:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateEndpoint = void 0;
const urlParser_1 = __webpack_require__(8960);
const generateEndpoint = (instanceUrl) => {
    const { hostname, port, protocol, path } = (0, urlParser_1.parseUrl)(instanceUrl);
    return `${protocol}//${hostname}${port ? `:${port}` : ''}${path.replace(/\/$/, '')}/agent-app/api`;
};
exports.generateEndpoint = generateEndpoint;


/***/ }),

/***/ 4373:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseAmzTarget = exports.buildAmzTarget = void 0;
const clientMethods_1 = __webpack_require__(2053);
const widgetServices_1 = __webpack_require__(5040);
const buildAmzTarget = (clientMethod, { serviceId }) => {
    return {
        'x-amz-target': `AgentAppService.${widgetServices_1.WidgetServices[serviceId]}.${clientMethod}`,
    };
};
exports.buildAmzTarget = buildAmzTarget;
const parseAmzTarget = (xAmzTarget) => {
    const [prefix, widgetService, clientMethod] = (xAmzTarget === null || xAmzTarget === void 0 ? void 0 : xAmzTarget.split('.')) || [];
    if (!prefix || prefix !== 'AgentAppService') {
        throw new Error('Unsupported service prefix.');
    }
    if (!widgetService || !Object.values(widgetServices_1.WidgetServices).includes(widgetService)) {
        throw new Error('Unsupported service.');
    }
    let serviceMethods;
    switch (widgetService) {
        case widgetServices_1.WidgetServices.AmazonQConnect:
            serviceMethods = clientMethods_1.QConnectMethods;
            break;
        case widgetServices_1.WidgetServices.AgentApp:
            serviceMethods = clientMethods_1.AgentAppMethods;
            break;
        case widgetServices_1.WidgetServices.Acs:
            serviceMethods = clientMethods_1.AcsMethods;
            break;
        case widgetServices_1.WidgetServices.Lcms:
            serviceMethods = clientMethods_1.LcmsMethods;
            break;
    }
    if (!clientMethod || !Object.values(serviceMethods).includes(clientMethod)) {
        throw new Error('Unsupported client method.');
    }
    return clientMethod;
};
exports.parseAmzTarget = parseAmzTarget;


/***/ }),

/***/ 7758:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildAmzVendor = void 0;
const buildAmzVendor = (vendorCode) => {
    return {
        'x-amz-vendor': vendorCode,
    };
};
exports.buildAmzVendor = buildAmzVendor;


/***/ }),

/***/ 1421:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.buildClientResponseMiddleware = exports.buildClientRequestMiddleware = void 0;
const buildClientRequestMiddleware = (headers) => {
    const middleware = (next) => {
        return (args) => {
            return next({
                ...args,
                request: {
                    ...args.request,
                    headers: {
                        ...args.request.headers,
                        'x-access-section': headers === null || headers === void 0 ? void 0 : headers['x-access-section'],
                    },
                },
            });
        };
    };
    const options = {
        step: 'finalizeRequest',
    };
    return [middleware, options];
};
exports.buildClientRequestMiddleware = buildClientRequestMiddleware;
const buildClientResponseMiddleware = (cb) => {
    const middleware = (next) => {
        return async (args) => {
            const result = await next(args);
            cb(result.response);
            return result;
        };
    };
    const options = {
        step: 'deserialize'
    };
    return [middleware, options];
};
exports.buildClientResponseMiddleware = buildClientResponseMiddleware;


/***/ }),

/***/ 1588:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.subscribeToChannel = exports.fetchWithChannel = void 0;
const appNames_1 = __webpack_require__(8201);
const fetchWithChannel = (destination, origin, data) => {
    return new Promise((resolve, reject) => {
        try {
            const channel = new MessageChannel();
            const { port1, port2 } = channel;
            port1.onmessage = (e) => {
                port1.close();
                resolve(e.data.data);
            };
            destination.postMessage({
                source: appNames_1.AppNames.QConnectJS,
                data,
            }, origin, [port2]);
        }
        catch (e) {
            reject(e);
        }
    });
};
exports.fetchWithChannel = fetchWithChannel;
const subscribeToChannel = (cb) => {
    if (window.self == window.top)
        return;
    window.addEventListener('message', async (e) => {
        var _a;
        if (e.data.source !== appNames_1.AppNames.QConnectJS)
            return;
        if (((_a = e.source) === null || _a === void 0 ? void 0 : _a.location) !== ((window.top || window.parent).location))
            return;
        const port = e.ports[0];
        const { url, options } = e.data.data;
        const response = await cb(url, options);
        port.postMessage({
            source: appNames_1.AppNames.WisdomUI,
            data: response,
        });
    });
};
exports.subscribeToChannel = subscribeToChannel;


/***/ }),

/***/ 1309:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getBaseCredentials = void 0;
const getBaseCredentials = () => {
    return {
        accessKeyId: '',
        secretAccessKey: '',
        sessionToken: '',
    };
};
exports.getBaseCredentials = getBaseCredentials;


/***/ }),

/***/ 8491:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getDefaultHeaders = void 0;
const BASE_HEADERS = {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
};
const getDefaultHeaders = ({ callSource, serviceId }) => {
    return {
        ...BASE_HEADERS,
        'x-access-section': serviceId.toUpperCase(),
        'x-amazon-call-source': callSource,
        'x-amz-access-section': serviceId,
    };
};
exports.getDefaultHeaders = getDefaultHeaders;


/***/ }),

/***/ 6662:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRuntimeConfig = void 0;
const runtimeConfig_shared_1 = __webpack_require__(2325);
const fetchHttpHandler_1 = __webpack_require__(6086);
const sdkHandler_1 = __webpack_require__(5758);
const getDefaultHeaders_1 = __webpack_require__(8491);
const callSources_1 = __webpack_require__(5488);
const DEFAULT_MAX_ATTEMPTS = 3;
const getRuntimeConfig = (config) => {
    var _a, _b, _c;
    const sharedRuntimeConfig = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
    return {
        ...sharedRuntimeConfig,
        ...config,
        headers: (_a = config.headers) !== null && _a !== void 0 ? _a : (0, getDefaultHeaders_1.getDefaultHeaders)(sharedRuntimeConfig),
        maxAttempts: (_b = config.maxAttempts) !== null && _b !== void 0 ? _b : DEFAULT_MAX_ATTEMPTS,
        requestHandler: (_c = config.requestHandler) !== null && _c !== void 0 ? _c : (sharedRuntimeConfig.callSource === callSources_1.CallSources.PublicApiProxy
            ? new sdkHandler_1.SDKHandler()
            : new fetchHttpHandler_1.FetchHttpHandler()),
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 2325:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getRuntimeConfig = void 0;
const urlParser_1 = __webpack_require__(8960);
const callSources_1 = __webpack_require__(5488);
const serviceIds_1 = __webpack_require__(571);
const appConfig_1 = __webpack_require__(3091);
const getRuntimeConfig = (config) => {
    var _a, _b, _c, _d;
    return {
        logger: (_a = config === null || config === void 0 ? void 0 : config.logger) !== null && _a !== void 0 ? _a : {},
        serviceId: (_b = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _b !== void 0 ? _b : serviceIds_1.ServiceIds.Wisdom,
        callSource: (_c = config === null || config === void 0 ? void 0 : config.callSource) !== null && _c !== void 0 ? _c : callSources_1.CallSources.AgentApp,
        instanceUrl: (_d = config === null || config === void 0 ? void 0 : config.instanceUrl) !== null && _d !== void 0 ? _d : (0, urlParser_1.getBaseUrl)(),
        endpoint: (config === null || config === void 0 ? void 0 : config.endpoint) || (0, appConfig_1.generateEndpoint)((config === null || config === void 0 ? void 0 : config.instanceUrl) || (0, urlParser_1.getBaseUrl)()),
    };
};
exports.getRuntimeConfig = getRuntimeConfig;


/***/ }),

/***/ 8960:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.parseUrl = exports.getBaseUrl = void 0;
const getBaseUrl = () => {
    return __webpack_require__.g.location.href;
};
exports.getBaseUrl = getBaseUrl;
const parseUrl = (url) => {
    const { hostname, pathname, port, protocol } = new URL(url);
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
    };
};
exports.parseUrl = parseUrl;


/***/ }),

/***/ 3829:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ esm_browser_v4)
});

;// ./node_modules/uuid/dist/esm-browser/native.js
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const esm_browser_native = ({
  randomUUID
});
;// ./node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
;// ./node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));
;// ./node_modules/uuid/dist/esm-browser/v4.js




function v4(options, buf, offset) {
  if (esm_browser_native.randomUUID && !buf && !options) {
    return esm_browser_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_browser_v4 = (v4);

/***/ }),

/***/ 1635:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),
/* harmony export */   __assign: () => (/* binding */ __assign),
/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),
/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),
/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),
/* harmony export */   __await: () => (/* binding */ __await),
/* harmony export */   __awaiter: () => (/* binding */ __awaiter),
/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),
/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),
/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),
/* harmony export */   __createBinding: () => (/* binding */ __createBinding),
/* harmony export */   __decorate: () => (/* binding */ __decorate),
/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),
/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),
/* harmony export */   __exportStar: () => (/* binding */ __exportStar),
/* harmony export */   __extends: () => (/* binding */ __extends),
/* harmony export */   __generator: () => (/* binding */ __generator),
/* harmony export */   __importDefault: () => (/* binding */ __importDefault),
/* harmony export */   __importStar: () => (/* binding */ __importStar),
/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),
/* harmony export */   __metadata: () => (/* binding */ __metadata),
/* harmony export */   __param: () => (/* binding */ __param),
/* harmony export */   __propKey: () => (/* binding */ __propKey),
/* harmony export */   __read: () => (/* binding */ __read),
/* harmony export */   __rest: () => (/* binding */ __rest),
/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),
/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),
/* harmony export */   __spread: () => (/* binding */ __spread),
/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),
/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),
/* harmony export */   __values: () => (/* binding */ __values),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__(6606);
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(8156);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});